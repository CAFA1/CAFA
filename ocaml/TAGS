
BatListFull.ml,41
BatListFull1,0
module ListList10,209

arithmetic.ml,535
Arithmetic1,0
module DD10,167
exception ArithmeticExArithmeticEx16,306
let power_of_twopower_of_two18,340
let bitmaskbitmask19,397
let bits_of_widthbits_of_width21,458
let to_big_intto_big_int26,577
let to_sbig_intto_sbig_int31,692
let t_divt_div43,1214
let t_modt_mod63,2041
let toshifttoshift78,2592
let to_valto_val90,2901
let exp_boolexp_bool93,2943
let binopbinop99,3101
let unopunop122,4435
let castcast128,4638
let extractextract144,5001
let concatconcat151,5154
let is_zerois_zero164,5498

asmir.mli,2070
Asmir1,0
exception Memory_errorMemory_error17,422
exception Disassembly_errorDisassembly_error18,445
type asmprogramasmprogram20,474
type archarch22,491
val arch_i386arch_i38623,501
val arch_armarch_arm24,522
type varctxvarctx26,543
val gamma_creategamma_create28,556
val gamma_lookupgamma_lookup29,605
val decls_for_archdecls_for_arch53,1280
val gamma_for_archgamma_for_arch54,1322
val get_asmprogram_archget_asmprogram_arch56,1359
val x86_memx86_mem58,1405
val x86_regsx86_regs59,1425
val all_regsall_regs61,1452
val open_programopen_program63,1479
val asmprogram_to_bapasmprogram_to_bap64,1538
val asm_addr_to_bapasm_addr_to_bap65,1605
val asmprogram_to_bap_rangeasmprogram_to_bap_range67,1693
val bap_from_trace_filebap_from_trace_file71,1936
val serialized_bap_from_trace_fileserialized_bap_from_trace_file73,2085
val bap_stream_from_trace_filebap_stream_from_trace_file76,2238
val serialized_bap_stream_from_trace_fileserialized_bap_stream_from_trace_file78,2405
val get_symbolsget_symbols80,2494
val find_symbolfind_symbol81,2553
val get_flavourget_flavour83,2604
val get_all_asectionsget_all_asections85,2649
val get_section_startaddrget_section_startaddr87,2706
val get_section_endaddrget_section_endaddr88,2768
val get_base_addressget_base_address91,2872
val get_start_addrget_start_addr93,2951
val get_asm_instr_stringget_asm_instr_string95,2997
val get_asm_instr_string_rangeget_asm_instr_string_range96,3058
val is_loadis_load98,3139
val is_codeis_code99,3173
val byte_insn_to_bapbyte_insn_to_bap101,3208
val byte_sequence_to_bapbyte_sequence_to_bap104,3301
val set_print_warningset_print_warning107,3395
val get_print_warningget_print_warning109,3433
val set_use_simple_segmentsset_use_simple_segments111,3471
val get_exec_mem_contentsget_exec_mem_contents116,3710
val get_exec_mem_contents_listget_exec_mem_contents_list120,3903
val get_readable_mem_contentsget_readable_mem_contents124,4076
val get_readable_mem_contents_listget_readable_mem_contents_list128,4250

asmir.ml,5139
Asmir1,0
module BArrayBArray20,395
exception Disassembly_errorDisassembly_error22,428
exception Memory_errorMemory_error23,458
type archarch25,484
type asmprogramasmprogram26,520
type asmpasmp26,520
		   archarch27,570
		   secssecs28,588
		   get_execget_exec30,670
                   get_readableget_readable32,751
let arch_i386arch_i38636,805
let arch_armarch_arm37,835
let trace_blocksizetrace_blocksize41,984
module DD43,1019
module StatusStatus46,1101
module DVDV49,1166
module DTestDTest53,1363
let tr_unoptr_unop56,1470
let tr_regtypetr_regtype61,1566
type varctxvarctx69,1808
let gamma_creategamma_create75,2057
let gamma_lookupgamma_lookup82,2258
let gamma_extendgamma_extend87,2422
let gamma_unextendgamma_unextend89,2454
let tr_labeltr_label92,2565
let rec tr_exptr_exp96,2671
and tr_binoptr_binop146,4388
let tr_vardecltr_vardecl182,6017
let tr_vardeclstr_vardecls191,6388
let cval_type_to_typcval_type_to_typ195,6533
let get_cval_usageget_cval_usage206,6781
let int_to_taintint_to_taint216,6986
let big_int_of_big_valbig_int_of_big_val218,7016
let tr_context_tuptr_context_tup239,7887
let tr_attributestr_attributes250,8300
let tr_frame_attrstr_frame_attrs266,8744
let rec tr_stmttr_stmt290,9371
let rec handle_specialshandle_specials327,10306
let tr_bap_block_auxtr_bap_block_aux341,10739
let tr_bap_block_ttr_bap_block_t359,11345
let tr_bap_block_t_trace_asmtr_bap_block_t_trace_asm366,11561
let tr_bap_block_t_no_asmtr_bap_block_t_no_asm373,11773
let tr_bap_blocks_ttr_bap_blocks_t381,12039
let tr_bap_blocks_t_trace_asmtr_bap_blocks_t_trace_asm385,12209
let tr_bap_blocks_t_no_asmtr_bap_blocks_t_no_asm389,12389
let x86_regsx86_regs393,12563
let x86_memx86_mem394,12598
let arm_regsarm_regs395,12631
let all_regsall_regs396,12666
let decls_for_archdecls_for_arch398,12702
let gamma_for_archgamma_for_arch403,12864
let get_asmprogram_archget_asmprogram_arch409,13051
let fold_memory_datafold_memory_data411,13094
let get_rodata_assignmentsget_rodata_assignments422,13491
let get_all_sectionsget_all_sections431,13856
let get_all_asectionsget_all_asections436,13989
let bfd_section_sizebfd_section_size439,14042
let bfd_section_vmabfd_section_vma440,14093
let bfd_section_namebfd_section_name441,14142
let is_loadis_load444,14222
let is_codeis_code449,14349
let codeonlycodeonly453,14450
let loadedloaded454,14490
let section_memory_helpersection_memory_helper459,14705
let section_contentssection_contents475,15320
let section_contents_listsection_contents_list489,15708
let open_programopen_program499,16069
let get_asmget_asm513,16615
let asm_addr_to_bapasm_addr_to_bap544,17768
let flattenflatten584,19437
let asmprogram_to_bap_rangeasmprogram_to_bap_range588,19625
let asmprogram_section_to_bapasmprogram_section_to_bap608,20267
let asmprogram_to_bapasmprogram_to_bap613,20489
let byte_insn_to_bapbyte_insn_to_bap626,20903
let byte_sequence_to_bapbyte_sequence_to_bap635,21316
let rec bap_get_block_from_fbap_get_block_from_f655,22047
  let add_operandsadd_operands692,23267
module PinTracePinTrace702,23595
  let trans_frametrans_frame705,23649
  let alt_bap_from_trace_file_range_revalt_bap_from_trace_file_range_rev734,25258
  let alt_bap_from_trace_file_rangealt_bap_from_trace_file_range771,26517
  let alt_bap_from_trace_filealt_bap_from_trace_file775,26690
let alt_bap_get_block_from_trace_filealt_bap_get_block_from_trace_file790,27083
let alt_bap_stream_from_trace_filealt_bap_stream_from_trace_file796,27355
module SerializedTraceSerializedTrace803,27586
  let new_bap_from_trace_framesnew_bap_from_trace_frames805,27619
  let new_bap_from_trace_filenew_bap_from_trace_file924,32896
  let new_bap_stream_from_trace_filenew_bap_stream_from_trace_file929,33064
module OldTraceOldTrace937,33315
  let old_bap_from_trace_fileold_bap_from_trace_file940,33360
let bap_from_trace_filebap_from_trace_file970,34383
let serialized_bap_stream_from_trace_fileserialized_bap_stream_from_trace_file976,34573
let bap_stream_from_trace_filebap_stream_from_trace_file977,34664
let serialized_bap_from_trace_fileserialized_bap_from_trace_file979,34738
let get_symbolsget_symbols983,34844
let find_symbolfind_symbol990,35057
let get_flavourget_flavour995,35262
let get_section_startaddrget_section_startaddr997,35327
let get_section_endaddrget_section_endaddr1000,35424
let get_base_addressget_base_address1003,35517
let get_start_addrget_start_addr1006,35584
let get_asm_instr_stringget_asm_instr_string1009,35647
let get_asm_instr_string_rangeget_asm_instr_string_range1012,35720
let set_print_warningset_print_warning1027,36063
let get_print_warningget_print_warning1029,36121
let set_use_simple_segmentsset_use_simple_segments1031,36179
let get_exec_mem_contentsget_exec_mem_contents1033,36249
let get_exec_mem_contents_listget_exec_mem_contents_list1036,36309
let get_readable_mem_contentsget_readable_mem_contents1038,36413
let get_readable_mem_contents_listget_readable_mem_contents_list1040,36487

asmir_consts.ml,409
Asmir_consts1,0
let (<<<<7,160
let bsf_globalbsf_global9,178
let bsf_debuggingbsf_debugging10,202
let bsf_functionbsf_function11,229
let bsec_no_flagsbsec_no_flags14,272
let bsec_allocbsec_alloc16,333
let bsec_loadbsec_load18,395
let bsec_relocbsec_reloc20,447
let bsec_readonlybsec_readonly22,487
let bsec_codebsec_code24,525
let bsec_databsec_data26,559
let bsec_rombsec_rom28,592

asmir_rdisasm.mli,144
Asmir_rdisasm1,0
type callbackcallback9,96
val rdisasm_atrdisasm_at14,325
val rdisasmrdisasm19,573
val max_callbackmax_callback25,868

asmir_rdisasm.ml,358
Asmir_rdisasm1,0
module DD5,62
let get_addrget_addr9,162
let collect_somecollect_some14,273
let addrtaddrt19,357
let get_code_addrsget_code_addrs25,521
module Int64SetInt64Set71,2300
type callbackcallback77,2399
let defaultdefault78,2449
let rdisasm_atrdisasm_at80,2475
let rdisasmrdisasm133,4270
let max_callbackmax_callback138,4485

asmir_vars.ml,124
Asmir_vars1,0
let x86_regsx86_regs5,35
let x86_memx86_mem6,67
let arm_regsarm_regs8,98
let all_regsall_regs33,441

ast.ml,1582
Ast1,0
type varvar16,360
type expexp18,378
  | LoadLoad19,390
  | StoreStore20,458
  | BinOpBinOp21,539
  | UnOpUnOp22,577
  | VarVar23,607
  | LabLab24,622
  | IntInt25,640
  | CastCast26,667
  | LetLet27,730
  | UnknownUnknown28,759
  | IteIte30,864
  | ExtractExtract31,893
  | ConcatConcat32,980
type attrsattrs34,1050
type stmtstmt36,1080
  | MoveMove37,1092
  | JmpJmp39,1195
  | CJmpCJmp40,1251
  | LabelLabel42,1366
  | HaltHalt43,1425
  | AssertAssert44,1451
  | AssumeAssume45,1479
  | CommentComment46,1507
  | SpecialSpecial47,1570
type programprogram49,1646
let exp_of_labexp_of_lab55,1830
let lab_of_explab_of_exp61,2010
let reg_1reg_168,2162
and reg_8reg_869,2180
and reg_16reg_1670,2198
and reg_32reg_3271,2218
and reg_64reg_6472,2238
and reg_128reg_12873,2258
let exp_falseexp_false76,2366
let exp_trueexp_true78,2420
let little_endianlittle_endian80,2452
let big_endianbig_endian81,2482
let newlabnewlab83,2509
let num_expnum_exp90,2644
  let getargsgetargs106,2957
let quick_exp_eqquick_exp_eq140,4454
let rec full_exp_eqfull_exp_eq173,5705
let (======194,6717
let rec compare_expcompare_exp196,6742
let num_stmtnum_stmt226,7808
let getargs_stmtgetargs_stmt237,7987
let quick_stmt_eqquick_stmt_eq250,8398
let full_stmt_eqfull_stmt_eq270,9106
let is_indirectjumpis_indirectjump288,9861
let is_syscallis_syscall298,10144
let full_stmts_eqfull_stmts_eq302,10231
let is_trueis_true306,10351
let is_falseis_false307,10382
let get_attrsget_attrs309,10416

ast_convenience.ml,1762
Ast_convenience1,0
let cjmpcjmp12,315
let ncjmpncjmp19,532
let unknownunknown26,662
let binopbinop29,697
let unopunop37,946
let concatconcat43,1077
let extractextract49,1226
let exp_andexp_and59,1512
let exp_orexp_or60,1548
let exp_eqexp_eq61,1582
let exp_notexp_not62,1616
let exp_impliesexp_implies63,1643
let (exp_shlexp_shl65,1691
let (exp_shl, exp_shrexp_shr65,1691
let ( +*+*72,1841
let ( -*-*73,1875
let ( ****74,1910
let ( <<*<<*75,1945
let ( >>*>>*76,1981
let ( >>>*>>>*77,2017
let ( &*&*78,2054
let ( |*|*79,2087
let ( ^*^*80,2119
let ( ==*==*81,2152
let ( <>*<>*82,2184
let ( <*<*83,2217
let ( >*>*84,2249
let (<=*<=*85,2281
let (>=*>=*86,2313
let ( =*=*88,2369
let ( ++*++*90,2414
let ( %*%*91,2445
let ( $%*$%*92,2476
let ( /*/*93,2509
let ( $/*$/*94,2543
let castcast96,2580
let cast_lowcast_low101,2726
let cast_highcast_high102,2755
let cast_signedcast_signed103,2786
let rec cast_unsignedcast_unsigned104,2821
let exp_intexp_int113,3175
let itit114,3213
let exp_iteexp_ite116,3245
let parse_iteparse_ite132,3655
let parse_impliesparse_implies149,4150
let rec rm_duplicatesrm_duplicates161,4472
let parse_extractparse_extract181,5101
let parse_concatparse_concat198,5665
let rm_iterm_ite244,7161
let rm_extractrm_extract255,7518
let rm_concatrm_concat267,7866
let last_meaningful_stmtlast_meaningful_stmt277,8200
let min_symbolicmin_symbolic286,8368
let extract_elementextract_element292,8596
let extract_byteextract_byte298,8814
let extract_element_symbolicextract_element_symbolic302,8973
let extract_byte_symbolicextract_byte_symbolic308,9207
let reverse_bytesreverse_bytes310,9275
let concat_explistconcat_explist318,9527

ast_mapper.mli,165
Ast_mapper1,0
class type mapmap10,124
  method expexp11,148
  method stmtstmt12,174
  method progprog13,203
  method cfgcfg14,238
val map_emap_e21,413

ast_mapper.ml,164
Ast_mapper1,0
class type mapmap9,105
  method expexp10,129
  method stmtstmt11,155
  method progprog12,184
  method cfgcfg13,219
let map_emap_e16,266

ast_slice.ml,500
Ast_slice1,0
module CHOP_ASTCHOP_AST8,96
 module TraverseTraverse14,213
  let print_cfgprint_cfg16,263
module SGSG28,529
 tt30,548
 module VV31,570
 let iter_vertexiter_vertex32,594
 let iter_succiter_succ33,635
module CompComp36,677
let rewrite_missing_labelsrewrite_missing_labels39,761
 let get_sccget_scc73,1805
 let compute_cdscompute_cds93,2481
 let add_jmp_stmtsadd_jmp_stmts114,3151
 let get_ddsget_dds135,3682
  let sliceslice143,3851
 let chopchop176,4772

ast_visitor.mli,344
Ast_visitor1,0
class tt16,532
  method visit_expvisit_exp18,554
  method visit_stmtvisit_stmt21,644
  method visit_labelvisit_label30,977
  method visit_rvarvisit_rvar33,1102
  method visit_avarvisit_avar36,1229
  method visit_lbindingvisit_lbinding39,1354
  method visit_ulbindingvisit_ulbinding43,1558
class nopnop51,1870

ast_visitor.ml,1061
Ast_visitor1,0
class tt11,141
  method visit_expvisit_exp12,163
  method visit_stmtvisit_stmt14,208
  method visit_labelvisit_label16,257
  method visit_rvarvisit_rvar18,309
  method visit_avarvisit_avar20,356
  method visit_lbindingvisit_lbinding22,403
  method visit_ulbindingvisit_ulbinding24,467
class nopnop28,523
  method visit_expvisit_exp29,546
  method visit_stmtvisit_stmt30,582
  method visit_labelvisit_label31,618
  method visit_avarvisit_avar32,654
  method visit_rvarvisit_rvar33,690
  method visit_lbindingvisit_lbinding34,726
  method visit_ulbindingvisit_ulbinding35,765
let rec actionaction39,811
let wrapstmtwrapstmt46,1028
let wrapexpwrapexp47,1100
let rec exp_acceptexp_accept49,1171
and label_acceptlabel_accept97,2605
and avar_acceptavar_accept100,2670
and rvar_acceptrvar_accept102,2732
and lbinding_acceptlbinding_accept105,2795
and ulbinding_acceptulbinding_accept113,2981
and stmt_acceptstmt_accept121,3184
and prog_acceptprog_accept144,3937
and cfg_acceptcfg_accept147,4028

big_int_convenience.ml,1517
Big_int_convenience1,0
module HashTypeHashType6,74
  tt7,99
  let equalequal8,118
  let hashhash9,143
module OrderedTypeOrderedType11,173
  tt12,201
  let comparecompare13,220
module BIHBIH15,256
module BISBIS16,292
module BIMBIM17,327
let bi0bi019,363
let bi1bi120,392
let bi2bi221,421
let bi3bi322,450
let bi4bi423,479
let bi5bi524,508
let bi6bi625,537
let bi7bi726,566
let bi8bi827,595
let bi9bi928,624
let biabia29,653
let bibbib30,682
let bicbic31,711
let bidbid32,740
let biebie33,769
let bifbif34,798
let bim1bim135,827
let bim2bim236,860
let bim3bim337,893
let bim4bim438,926
let bim5bim539,959
let bim6bim640,992
let bim7bim741,1025
let bim8bim842,1058
let bim9bim943,1091
let bimabima44,1124
let bimbbimb45,1157
let bimcbimc46,1190
let bimdbimd47,1223
let bimebime48,1256
let bimfbimf49,1289
let biconstbiconst51,1323
let bibi52,1356
let biconst32biconst3253,1373
let biconst64biconst6454,1410
let big_int_of_boolbig_int_of_bool56,1448
let (==%==%61,1570
let (<>%<>%64,1657
let (<%<%67,1724
let (<=%<=%70,1792
let (>%>%73,1860
let (>=%>=%76,1928
let (<<%<<%79,1997
let (>>%>>%82,2072
let ($>>%$>>%85,2149
let (+%+%88,2238
let ( *%*%91,2306
let (++%++%94,2382
let (-%-%97,2442
let (|%|%100,2510
let (&%&%103,2577
let (/%/%106,2650
let (%%%%109,2724
let (~%~%112,2800
let bi_is_zerobi_is_zero115,2877
let bi_is_onebi_is_one118,2953
let bi_is_minusonebi_is_minusone121,3034

cfg.mli,1022
Cfg1,0
type bbidbbid11,258
    BB_EntryBB_Entry12,270
  | BB_ExitBB_Exit13,301
  | BB_IndirectBB_Indirect14,339
  | BB_ErrorBB_Error15,391
  | BBBB16,422
val bbid_to_stringbbid_to_string19,500
module BBidBBid21,537
  tt23,555
  val comparecompare24,571
  val hashhash25,603
  val equalequal26,628
module BSBS29,664
module BHBH30,705
module BMBM31,750
module type CFGCFG36,864
  type langlang40,973
  val find_vertexfind_vertex43,1020
  val find_labelfind_label46,1115
  val get_stmtsget_stmts49,1210
  val defaultdefault52,1291
  val set_stmtsset_stmts55,1360
  val join_stmtsjoin_stmts58,1442
  val lang_to_stringlang_to_string61,1515
  val create_vertexcreate_vertex68,1767
  val copy_mapcopy_map71,1882
  val remove_vertexremove_vertex74,1944
  val remove_edgeremove_edge75,1986
  val remove_edge_eremove_edge_e76,2035
  val v2sv2s79,2124
module ASTAST84,2229
module SSASSA89,2464
val map_ast2ssamap_ast2ssa95,2717
val map_ssa2astmap_ssa2ast96,2790

cfg.ml,4493
Cfg1,0
module DD4,28
module LMLM8,126
type bbidbbid10,195
  | BB_EntryBB_Entry11,207
  | BB_ExitBB_Exit12,220
  | BB_IndirectBB_Indirect13,232
  | BB_ErrorBB_Error14,248
  | BBBB15,261
let bbid_to_stringbbid_to_string17,276
module BBidBBid24,468
  tt26,489
  let comparecompare27,505
  let hashhash28,529
  let equalequal34,678
module BSBS37,701
module BHBH38,728
module BMBM39,759
module EE43,789
  tt45,807
  let comparecompare46,830
  let defaultdefault47,854
module type CFGCFG52,882
  type langlang56,991
  val find_vertexfind_vertex58,1004
  val find_labelfind_label59,1050
  val get_stmtsget_stmts60,1096
  val defaultdefault61,1135
  val set_stmtsset_stmts62,1156
  val join_stmtsjoin_stmts63,1202
  val lang_to_stringlang_to_string64,1242
  val create_vertexcreate_vertex66,1310
  val copy_mapcopy_map67,1359
  val remove_vertexremove_vertex70,1421
  val remove_edgeremove_edge71,1463
  val remove_edge_eremove_edge_e72,1512
  val v2sv2s75,1606
type ('a,'b,'c) pcfgpcfg79,1640
      gg81,1669
      ss82,1682
      ll83,1695
      nextidnextid84,1708
module type LanguageLanguage87,1734
  tt89,1761
  val defaultdefault90,1770
  val joinjoin91,1788
  val iter_labelsiter_labels92,1813
  val to_stringto_string93,1860
module MakePMakeP97,1933
  module G'G'100,2052
  type langlang102,2130
  module GG106,2154
    module VV108,2175
    type vertexvertex109,2195
    module EE110,2217
    type edgeedge111,2237
    tt121,2360
    let is_directedis_directed123,2409
    let is_emptyis_empty128,2465
    let nb_vertexnb_vertex129,2514
    let nb_edgesnb_edges130,2566
    let out_degreeout_degree131,2618
    let in_degreein_degree132,2670
    let mem_vertexmem_vertex133,2722
    let mem_edgemem_edge134,2774
    let mem_edge_emem_edge_e135,2826
    let find_edgefind_edge136,2878
    let find_all_edgesfind_all_edges137,2924
    let succsucc138,2975
    let predpred139,3024
    let succ_esucc_e140,3073
    let pred_epred_e141,3124
    let iter_vertexiter_vertex143,3176
    let iter_edgesiter_edges144,3224
    let fold_vertexfold_vertex145,3272
    let fold_edgesfold_edges146,3320
    let iter_edges_eiter_edges_e147,3368
    let fold_edges_efold_edges_e148,3417
    let iter_succiter_succ149,3466
    let iter_prediter_pred150,3514
    let fold_succfold_succ151,3562
    let fold_predfold_pred152,3610
    let iter_succ_eiter_succ_e153,3658
    let fold_succ_efold_succ_e154,3706
    let iter_pred_eiter_pred_e155,3754
    let fold_pred_efold_pred_e156,3802
    let add_edgeadd_edge159,3852
    let add_edge_eadd_edge_e160,3919
    let remove_edgeremove_edge161,3984
    let remove_edge_eremove_edge_e162,4054
    let add_vertexadd_vertex163,4122
    let emptyempty166,4219
    let map_vertexmap_vertex174,4310
    let copy_mapcopy_map177,4379
  let find_vertexfind_vertex182,4530
  let find_labelfind_label186,4637
  let get_stmtsget_stmts188,4675
  let defaultdefault192,4755
  let join_stmtsjoin_stmts194,4785
  let lang_to_stringlang_to_string196,4815
  let fold_labelsfold_labels199,4871
  let remove_labelsremove_labels203,4972
  let set_stmtsset_stmts208,5089
  let newidnewid224,5807
  let create_vertexcreate_vertex229,5942
  let remove_vertexremove_vertex235,6089
  let emptyempty244,6326
  let copycopy245,6351
  let add_vertexadd_vertex246,6368
  let add_edgeadd_edge247,6400
  let add_edge_eadd_edge_e248,6428
  let remove_edgeremove_edge251,6495
  let remove_edge_eremove_edge_e252,6529
  let copy_mapcopy_map254,6568
  let v2sv2s256,6597
module MakeMake261,6682
module LangASTLangAST263,6703
  tt265,6727
  let defaultdefault266,6752
  let joinjoin267,6771
  let iter_labelsiter_labels271,7028
  let to_stringto_string273,7110
module LangSSALangSSA276,7212
  tt278,7236
  let defaultdefault279,7261
  let joinjoin280,7280
  let iter_labelsiter_labels284,7532
  let to_stringto_string291,7741
module ASTAST294,7843
module SSASSA295,7870
module type CFG_PRIVCFG_PRIV298,7899
  type langlang300,7926
  module G'G'301,7938
  val get_stmtsget_stmts308,8115
  val defaultdefault309,8155
  val set_stmtsset_stmts310,8179
module MkMapMkMap313,8231
  let mapmap315,8277
module M2ssaM2ssa329,8762
module M2astM2ast330,8793
let map_ast2ssamap_ast2ssa332,8825
let map_ssa2astmap_ssa2ast333,8853

cfg_ast.mli,258
Cfg_ast1,0
val of_progof_prog4,113
val to_progto_prog7,233
val create_entrycreate_entry12,348
val find_entryfind_entry17,493
val find_errorfind_error20,623
val find_exitfind_exit23,752
val find_indirectfind_indirect26,884
val v2sv2s31,1065

cfg_ast.ml,323
Cfg_ast1,0
module CC13,227
module DD16,248
let v2sv2s19,332
let createcreate21,375
let create_entrycreate_entry26,486
let find_entryfind_entry29,555
let find_errorfind_error35,693
let find_exitfind_exit41,845
let find_indirectfind_indirect47,999
let of_progof_prog54,1145
let to_progto_prog177,5325

cfg_pp.ml,12
Cfg_pp1,0

cfg_ssa.mli,301
Cfg_ssa1,0
val v2sv2s9,137
val of_astcfgof_astcfg11,172
val of_astof_ast13,216
val to_astcfgto_astcfg15,257
val to_astto_ast17,336
type translation_resultstranslation_results20,400
  cfgcfg21,429
  to_astvarto_astvar22,450
  to_ssavarto_ssavar23,535
val trans_cfgtrans_cfg26,617

cfg_ssa.ml,1360
Cfg_ssa1,0
module DD15,169
module VHVH18,249
module CC19,273
module BHBH20,292
module CACA21,311
module DomDom22,331
let v2sv2s24,365
module CtxCtx27,462
  tt29,482
  let createcreate30,541
  let lookuplookup31,605
  let extendextend35,689
  let letextendletextend41,872
  let letunextendletunextend47,1103
  let pushpush50,1154
  let poppop53,1220
let type_of_valuetype_of_value59,1388
let type_of_exptype_of_exp63,1515
let ssa_temp_namessa_temp_name93,2180
let rec exp2ssaexpexp2ssaexp97,2306
and exp2ssaexp2ssa152,4490
let rec stmt2ssastmt2ssa167,4961
let stmts2ssastmts2ssa200,6109
let defsitesdefsites206,6291
type translation_resultstranslation_results232,7032
  cfgcfg233,7061
  to_astvarto_astvar234,7082
  to_ssavarto_ssavar235,7167
let rec trans_cfgtrans_cfg245,7653
let of_astcfgof_astcfg397,12739
let of_astof_ast402,12851
let uninitializeduninitialized406,12901
let rec mklabelmklabel438,13826
let split_edgessplit_edges455,14258
let list_countlist_count494,15463
let rm_phisrm_phis498,15539
type tmtm666,21586
let create_tmcreate_tm677,22137
let rec value2astvalue2ast709,22933
and exp2astexp2ast714,23089
let stmt2aststmt2ast730,23741
let stmts2aststmts2ast742,24141
let cfg2astcfg2ast753,24480
let to_astcfgto_astcfg757,24580
let to_astto_ast762,24772

checks.mli,622
Checks1,0
exception SanitySanity9,217
type 'a sanityfsanityf16,464
val connected_astcfgconnected_astcfg21,609
val connected_ssacfgconnected_ssacfg24,735
module MakeConnectedCheckMakeConnectedCheck27,827
      val connected_checkconnected_check31,977
val acyclic_astcfgacyclic_astcfg36,1111
val acyclic_ssacfgacyclic_ssacfg40,1236
module MakeAcyclicCheckMakeAcyclicCheck43,1325
      val acyclic_checkacyclic_check48,1480
val exit_check_astcfgexit_check_astcfg54,1707
val exit_check_ssacfgexit_check_ssacfg59,1999
module MakeExitCheckMakeExitCheck62,2160
      val exit_checkexit_check68,2414

checks.ml,858
Checks1,0
module DD4,30
exception SanitySanity7,109
type 'a sanityfsanityf9,137
let insaneinsane11,177
let wrapdebugwrapdebug13,210
let wrapdebug2wrapdebug216,267
module MakeConnectedCheckMakeConnectedCheck20,330
  module RR21,376
  let connected_checkconnected_check23,408
  let connected_checkconnected_check30,886
let connected_astcfgconnected_astcfg34,942
let connected_ssacfgconnected_ssacfg35,1031
module MakeAcyclicCheckMakeAcyclicCheck37,1121
  let acyclic_checkacyclic_check38,1165
  let acyclic_checkacyclic_check64,2372
let acyclic_astcfgacyclic_astcfg67,2423
let acyclic_ssacfgacyclic_ssacfg68,2506
module MakeExitCheckMakeExitCheck70,2590
  let exit_checkexit_check72,2632
  let exit_checkexit_check78,3225
let exit_check_astcfgexit_check_astcfg81,3334
let exit_check_ssacfgexit_check_ssacfg82,3414

coalesce.mli,88
Coalesce1,0
val coalesce_astcoalesce_ast15,628
val coalesce_ssacoalesce_ssa18,809

coalesce.ml,666
Coalesce1,0
module DD6,74
module type CFG'CFG'9,155
  val is_safe_to_coalesceis_safe_to_coalesce11,192
module MakeCoalesceMakeCoalesce14,353
  module GG16,392
  module GSGS17,409
  let coalescecoalesce28,830
module AST'AST'127,5208
  let remove_redundant_jumpremove_redundant_jump130,5243
  let is_safe_to_coalesceis_safe_to_coalesce137,5515
module SSA'SSA'147,5753
  let remove_redundant_jumpremove_redundant_jump150,5788
  let is_safe_to_coalesceis_safe_to_coalesce157,6060
module AST_CoalesceAST_Coalesce167,6298
module SSA_CoalesceSSA_Coalesce168,6339
let coalesce_astcoalesce_ast170,6381
let coalesce_ssacoalesce_ssa171,6422

deadcode.mli,84
Deadcode1,0
val do_dcedo_dce3,46
val do_aggressive_dcedo_aggressive_dce17,668

deadcode.ml,272
Deadcode1,0
module DD8,124
module VHVH10,208
module CC11,232
module BHBH12,251
type sitesite14,284
type newsitenewsite17,358
let deadstmtdeadstmt20,416
let def_usesdef_uses29,844
let do_dcedo_dce55,1665
let do_aggressive_dcedo_aggressive_dce165,5415

debug.mli,431
Debug1,0
val set_logfileset_logfile32,1292
module type DEBUGDEBUG37,1537
  val debugdebug39,1561
  val warnwarn42,1638
  val pdebugpdebug45,1706
  val dprintfdprintf48,1786
  val dtracedtrace51,1898
  val pwarnpwarn57,2210
  val wprintfwprintf60,2291
module type DEBUG_MOD_INFODEBUG_MOD_INFO65,2457
  val namename67,2490
  val defaultdefault70,2575
module NoDebugNoDebug75,2779
module MakeMake79,2845

debug.ml,971
Debug1,0
let logfilelogfile1,0
let set_logfileset_logfile2,25
let debug_stringdebug_string4,63
let debug_endlinedebug_endline5,109
let global_debugglobal_debug11,271
let set_global_debugset_global_debug12,299
let get_env_optionsget_env_options22,565
let has_debughas_debug53,1402
let has_warnhas_warn60,1660
let indentindent64,1720
let inc_indentinc_indent65,1739
let dec_indentdec_indent66,1781
let pindentpindent67,1823
let ptime_unixptime_unix78,2074
let ptime_isoptime_iso81,2156
let ptime_noneptime_none88,2398
let ptimeptime90,2421
module type DEBUGDEBUG106,2866
  val debugdebug108,2890
  val warnwarn110,2918
  val pdebugpdebug112,2937
  val dprintfdprintf114,2968
  val dtracedtrace116,3024
  val pwarnpwarn120,3140
  val wprintfwprintf122,3170
module type DEBUG_MOD_INFODEBUG_MOD_INFO126,3231
  val namename128,3264
  val defaultdefault130,3285
module NoDebugNoDebug133,3328
module MakeMake144,3603

debug_snippets.ml,243
Debug_snippets1,0
module DD5,38
let vv11,167
let print_astcfgprint_astcfg18,319
let print_astprint_ast21,378
let vv26,465
let print_ssacfgprint_ssacfg33,617
let print_ssaprint_ssa36,677
let intv_to_stringintv_to_string39,735

depgraphs.mli,1453
Depgraphs1,0
module type CDGCDG13,419
  module GG15,441
    tt17,460
    module VV18,471
      tt20,494
  val compute_cdcompute_cd36,1017
  val compute_cdgcompute_cdg40,1177
module MakeCDGMakeCDG44,1284
module CDG_SSACDG_SSA48,1399
module CDG_ASTCDG_AST51,1493
module DDG_SSADDG_SSA57,1620
    type locationlocation61,1750
    module SSSS64,1821
    val compute_ddcompute_dd72,2242
    val compute_ddscompute_dds78,2456
    val compute_ddgcompute_ddg81,2609
    val stmtlist_to_single_stmtstmtlist_to_single_stmt86,2840
module DDG_ASTDDG_AST90,2951
  type locationlocation94,3075
  module SSSS97,3142
  val compute_ddcompute_dd105,3549
  val compute_ddscompute_dds111,3755
  val compute_ddgcompute_ddg115,3908
module PDG_ASTPDG_AST125,4136
  val compute_pdgcompute_pdg128,4228
module UseDef_ASTUseDef_AST134,4367
  type locationlocation138,4494
  module LocationTypeLocationType140,4533
    tt142,4563
    type t = UndefinedUndefined142,4563
    type t = Undefined | LocLoc142,4563
    val comparecompare143,4604
    val to_stringto_string144,4638
  module LSLS146,4676
  val usedefusedef154,4981
  val defusedefuse161,5219
module DEFS_ASTDEFS_AST170,5410
  type locationlocation174,5535
  val undefinedundefined181,5873
  val undefinedvarsundefinedvars186,6085
  val defsdefs192,6301
  val varsvars195,6420
module DEFS_SSADEFS_SSA199,6536
  val defsdefs204,6708

depgraphs.ml,3194
Depgraphs1,0
module VSVS6,163
module VHVH7,186
module type CDGCDG11,230
  module GG13,252
      tt15,273
      module VV16,286
          tt18,315
  val compute_cdcompute_cd21,352
  val compute_cdgcompute_cdg22,398
module MakeCDGMakeCDG25,434
  module GG27,468
  module DbgDbg29,486
  module G'G'37,711
    tt38,732
    module VV39,749
    let predpred41,769
    let succsucc45,893
    let nb_vertexnb_vertex46,915
    let fold_vertexfold_vertex47,947
    let iter_vertexiter_vertex48,983
  module DD53,1062
  let compute_cdcompute_cd57,1106
  let compute_cdgcompute_cdg68,1625
module CDG_SSACDG_SSA81,1974
module CDG_ASTCDG_AST83,2009
type varvar87,2081
type var = VarVar87,2081
type var = Var of Var.t | NovarNovar87,2081
type var = Var of Var.t | Novar | GammaGamma87,2081
module DDG_SSADDG_SSA89,2122
  type locationlocation93,2188
  module DbgDbg95,2227
  module VHVH97,2314
  module VSVS98,2340
  module GSGS99,2365
  module GEGE103,2529
  module SSSS107,2704
  let compute_ddcompute_dd117,3148
  let compute_ddg_datacompute_ddg_data153,4180
  let compute_ddscompute_dds248,7305
  let compute_ddgcompute_ddg255,7460
  let stmtlist_to_single_stmtstmtlist_to_single_stmt290,8737
module DDG_ASTDDG_AST321,9720
  type locationlocation325,9786
  module DbgDbg327,9825
  module VHVH329,9912
  module VSVS330,9938
  module SSSS331,9963
  module GSGS335,10070
  module GEGE339,10234
  let compute_ddcompute_dd346,10472
  let compute_ddg_datacompute_ddg_data378,11463
  let compute_ddgcompute_ddg473,14588
  let compute_ddscompute_dds475,14640
module PDG_ASTPDG_AST487,14874
  module DbgDbg490,14900
  let compute_pdgcompute_pdg493,14988
module UseDef_ASTUseDef_AST528,15939
  module DD531,15969
  module CC533,16057
  module VMVM534,16078
  type locationlocation536,16104
  module LocationTypeLocationType539,16180
    tt542,16218
      | UndefinedUndefined544,16292
      | LocLoc545,16363
    let comparecompare547,16423
    let to_stringto_string549,16454
  module LSLS557,16662
  let get_mapget_map561,16717
  let add_mapadd_map567,16805
  module UseDefLUseDefL572,16916
    tt576,17037
    let to_stringto_string578,17061
    let toptop592,17325
    and meetmeet593,17348
    and equalequal601,17472
    let is_directedis_directed607,17572
  module DefUseSpecDefUseSpec610,17606
    module GG613,17665
    module LL614,17690
    let transfer_functiontransfer_function616,17714
    let s0s0639,18328
    let initinit642,18438
    let dirdir669,19128
  module UseDefSpecUseDefSpec672,19172
    module GG675,19231
    module LL676,19256
    let transfer_functiontransfer_function678,19280
    let s0s0698,19771
    let initinit701,19882
    let dirdir728,20572
  let usedefusedef736,20828
  let defusedefuse779,22273
module DEFS_ASTDEFS_AST824,23493
  type locationlocation827,23519
  module LSLS829,23558
  let undefinedundefined836,23885
  let undefinedvarsundefinedvars884,25048
  let defsdefs895,25283
  let varsvars916,25920
module DEFS_SSADEFS_SSA940,26511
  let defsdefs944,26591

disasm.ml,160
Disasm1,0
exception UnimplementedUnimplemented3,34
let disasm_instrdisasm_instr5,59
let is_tempis_temp10,184
let is_decode_erroris_decode_error12,216

disasm_i386.ml,17
Disasm_i3861,0

dominator.ml,1725
Dominator1,0
let (|>|>9,290
exception UnreachableUnreachable12,331
module type GG14,354
  tt15,374
  module VV16,383
  val predpred17,417
  val succsucc18,451
  val fold_vertexfold_vertex19,485
  val iter_vertexiter_vertex20,540
  val nb_vertexnb_vertex21,587
module MakeMake32,799
  module HH34,825
  module SS35,856
  type idomidom38,940
  type idomsidoms41,1041
  type dom_treedom_tree44,1159
  type dominatorsdominators48,1321
  type domineesdominees51,1435
  type domdom54,1528
  type sdomsdom57,1630
  type dom_frontierdom_frontier62,1792
  type dom_functionsdom_functions64,1835
    idomidom65,1860
    idomsidoms66,1877
    dom_treedom_tree67,1895
    dominatorsdominators68,1919
    domineesdominees69,1947
    domdom70,1971
    sdomsdom71,1985
    dom_frontierdom_frontier72,2001
  let set_of_listset_of_list75,2038
  let pseudo_topological_foldpseudo_topological_fold79,2211
  let pseudo_topological_sortpseudo_topological_sort93,2635
  let compute_idomcompute_idom100,2942
  let dominators_to_domdominators_to_dom203,6088
  let dominators_to_sdomdominators_to_sdom209,6335
  let dom_to_sdomdom_to_sdom212,6437
  let dominators_to_sdominatorsdominators_to_sdominators217,6624
  let dominators_to_idomsdominators_to_idoms225,6901
  let dominators_to_dom_treedominators_to_dom_tree240,7475
  let dom_tree_to_domineesdom_tree_to_dominees265,8127
  let idom_to_dom_treeidom_to_dom_tree289,8807
  let idom_to_idomsidom_to_idoms302,9054
  let compute_dom_frontiercompute_dom_frontier310,9322
  let idom_to_dominatorsidom_to_dominators341,10111
  let rec idom_to_domidom_to_dom351,10265
  let compute_allcompute_all368,10780

flatten_mem.mli,192
Flatten_mem1,0
val flatten_memexpflatten_memexp16,587
val flatten_storesflatten_stores28,1121
val flatten_loadsflatten_loads34,1432
val flatten_mem_programflatten_mem_program37,1530

flatten_mem.ml,351
Flatten_mem1,0
module DD2,9
let explode_mem_letexplode_mem_let11,287
let flatten_memexp_revflatten_memexp_rev42,1184
let flatten_memexpflatten_memexp57,1850
let flatten_storesflatten_stores61,1957
let flatten_loadsflatten_loads68,2201
let flatten_loads_stmtflatten_loads_stmt76,2406
let flatten_mem_programflatten_mem_program84,2582

formulap.ml,1546
Formulap1,0
module VHVH3,26
module DD5,51
let freevarsfreevars12,220
class virtual fppfpp45,1007
  method virtual forallforall47,1040
  method virtual ast_expast_exp48,1086
  method virtual assert_ast_expassert_ast_exp49,1129
  method virtual valid_ast_expvalid_ast_exp50,1224
  method virtual counterexamplecounterexample51,1318
class virtual fpp_ocfpp_oc54,1362
  method virtual closeclose57,1412
  method virtual flushflush58,1442
type fppffppf65,1584
class virtual stream_fppstream_fpp67,1619
  method virtual and_startand_start70,1724
  method virtual and_constraintand_constraint72,1809
  method virtual and_close_constraintand_close_constraint76,1930
  method virtual and_endand_end80,2062
  method virtual let_beginlet_begin82,2123
  method virtual let_endlet_end84,2202
  method virtual open_stream_benchmarkopen_stream_benchmark87,2362
  method virtual close_benchmarkclose_benchmark89,2437
  method virtual counterexamplecounterexample91,2512
  method virtual predeclare_free_varpredeclare_free_var94,2691
  method virtual print_free_varprint_free_var95,2742
  method virtual assert_ast_exp_beginassert_ast_exp_begin98,2900
  method virtual assert_ast_exp_endassert_ast_exp_end100,3037
  method virtual valid_ast_exp_beginvalid_ast_exp_begin103,3186
  method virtual valid_ast_exp_endvalid_ast_exp_end105,3322
class virtual stream_fpp_ocstream_fpp_oc108,3369
  method virtual closeclose111,3433
  method virtual flushflush112,3463
type stream_fppfstream_fppf115,3498

func_boundary.mli,113
Func_boundary1,0
val start_addressesstart_addresses12,277
val get_function_rangesget_function_ranges14,324

func_boundary.ml,19
Func_boundary1,0

fwp.mli,135
Fwp1,0
val fwpfwp6,56
val fwp_uwpfwp_uwp15,402
val fwp_lazyconcfwp_lazyconc21,591
val fwp_lazyconc_uwpfwp_lazyconc_uwp27,814

fwp.ml,1399
Fwp1,0
module DD3,30
module VHVH8,142
module VMVM9,166
module CACA11,190
module RevCFGRevCFG13,209
  tt15,232
  module VV16,250
  let iter_vertexiter_vertex17,270
  let iter_succiter_succ18,307
  let in_degreein_degree19,340
module ToposortToposort22,379
module RToposortRToposort23,431
module SymbolicMapSymbolicMap25,484
let unwrap_symbunwrap_symb27,531
let choose_bestchoose_best33,771
module type DeltaDelta38,844
  tt40,868
  val createcreate41,877
  val mergemerge42,902
  val setset46,1101
  val getget48,1169
  val set_expset_exp51,1293
  val get_expget_exp52,1330
  val simplifysimplify53,1362
module VMDeltaVMDelta57,1465
  tt59,1489
  let createcreate60,1521
  let mergemerge62,1552
  let setset68,1759
  let getget71,1875
  let get_expget_exp73,1907
  let set_expset_exp75,1953
  let simplifysimplify77,2009
let or_simpor_simp83,2160
let rec fwpintfwpint111,3449
module MakeMake147,5103
  let mark_usedmark_used150,5185
  let mark_used_vars_inmark_used_vars_in152,5239
  let trans_closetrans_close154,5327
  let rec fwpconcintfwpconcint170,5905
let fwp_lazyconcfwp_lazyconc280,11254
let fwp_lazyconc_uwpfwp_lazyconc_uwp312,12285
let ast_sizeast_size457,18162
let fwpfwp470,18488
let fwp_uwpfwp_uwp490,19269
let fwp_lazyconcfwp_lazyconc494,19437
let fwp_lazyconc_uwpfwp_lazyconc_uwp498,19564

gcl.mli,706
Gcl1,0
tt25,787
  | AssumeAssume26,796
  | AssignAssign27,814
  | AssertAssert28,840
  | ChoiceChoice29,858
  | SeqSeq30,878
  | SkipSkip31,895
val to_stringto_string33,905
val sizesize37,1024
val of_astcfgof_astcfg42,1156
val of_astof_ast58,2028
val passified_of_ssapassified_of_ssa64,2203
val passified_of_astcfgpassified_of_astcfg79,2910
type gclhelpgclhelp89,3374
  | CAssignCAssign90,3389
  | CChoiceCChoice91,3418
  | CunchoiceCunchoice92,3502
  | CSeqCSeq93,3561
val gclhelp_of_astcfggclhelp_of_astcfg95,3587
val gclhelp_to_stringgclhelp_to_string97,3760
module UgclUgcl103,3967
  type stmtstmt106,4107
  tt110,4228
  val of_ssacfgof_ssacfg113,4316

gcl.ml,1302
Gcl1,0
module DD9,111
type varvar12,189
type expexp13,206
tt24,527
  | AssumeAssume25,536
  | AssignAssign26,554
  | AssertAssert27,578
  | ChoiceChoice28,596
  | SeqSeq29,616
  | SkipSkip30,633
let rec to_stringto_string32,644
let rec sizesize40,1009
let concatconcat44,1139
let rec of_rev_straightlineof_rev_straightline86,2389
let of_straightlineof_straightline116,3369
module CACA120,3449
module RevCFGRevCFG122,3470
  tt124,3493
  module VV125,3511
  let iter_vertexiter_vertex126,3531
  let iter_succiter_succ127,3568
  let in_degreein_degree128,3601
module RToposortRToposort131,3640
type gclhelpgclhelp134,3735
  | CAssignCAssign135,3750
  | CChoiceCChoice136,3774
  | CunchoiceCunchoice137,3858
  | CSeqCSeq138,3917
let rec gclhelp_to_stringgclhelp_to_string140,3943
let rec cgcl_sizecgcl_size150,4452
let rec string_of_cgclstring_of_cgcl156,4646
let gclhelp_of_astcfggclhelp_of_astcfg192,6009
let of_astcfgof_astcfg319,11234
let of_astof_ast354,12314
let rec remove_skipsremove_skips358,12405
module CC377,12815
let passified_of_ssapassified_of_ssa379,12835
let passified_of_astcfgpassified_of_astcfg409,13744
module UgclUgcl419,14094
  type stmtstmt421,14116
  tt422,14132
let of_ssacfgof_ssacfg424,14178

grammar_private_scope.ml,189
Grammar_private_scope1,0
let default_scopedefault_scope5,91
let cur_scopecur_scope6,153
let get_scopeget_scope8,207
let set_scopeset_scope9,237
let reset_scopereset_scope10,270

grammar_scope.ml,486
Grammar_scope1,0
let strip_numsstrip_nums8,201
let stripnumstripnum10,229
let errerr18,381
module ScopeScope23,473
  tt24,495
  let createcreate26,550
  let empty_scopeempty_scope31,693
  let add_varadd_var33,731
  let addadd37,797
  let add_pushadd_push41,883
  let poppop45,959
  let get_lval_if_definedget_lval_if_defined51,1111
  let get_lvalget_lval58,1404
let empty_scopeempty_scope69,1640
let create_scope_from_declscreate_scope_from_decls70,1676

graphDataflow.mli,715
GraphDataflow1,0
module type GG8,149
  tt10,169
  module VV11,178
  val predpred12,212
  val succsucc13,246
  val fold_vertexfold_vertex14,280
type directiondirection20,542
type direction = ForwardForward20,542
type direction = Forward | BackwardBackward20,542
module type BOUNDED_MEET_SEMILATTICEBOUNDED_MEET_SEMILATTICE27,717
  tt31,799
  val toptop34,836
  val meetmeet41,1030
  val equalequal45,1166
module type DATAFLOWDATAFLOW49,1264
    module LL52,1294
    module GG53,1334
    val transfer_functiontransfer_function57,1433
    val s0s060,1536
    val initinit64,1666
    val dirdir67,1728
module MakeMake71,1836
  val worklist_iterateworklist_iterate79,2166

graphDataflow.ml,715
GraphDataflow1,0
module type GG8,109
  tt10,129
  module VV11,138
  val predpred12,172
  val succsucc13,206
  val fold_vertexfold_vertex14,240
type directiondirection19,328
type direction = ForwardForward19,328
type direction = Forward | BackwardBackward19,328
module type BOUNDED_MEET_SEMILATTICEBOUNDED_MEET_SEMILATTICE22,366
  tt24,409
  val toptop25,418
  val meetmeet26,432
  val equalequal27,457
module type DATAFLOWDATAFLOW31,547
  module LL34,575
  module GG35,613
  val transfer_functiontransfer_function39,698
  val s0s042,800
  val initinit46,946
  val dirdir49,1003
module MakeMake54,1032
  module HH56,1067
 let worklist_iterateworklist_iterate60,1194

graphDataflowW.ml,1647
GraphDataflowW1,0
module ListList6,85
module DD8,117
module type SESE13,296
  tt15,317
  type labellabel17,327
  type vertexvertex18,354
  val srcsrc19,384
  val dstdst20,408
  val createcreate21,432
  val labellabel22,478
module type SVSV25,508
  tt27,529
  type labellabel28,554
  val comparecompare29,578
  val hashhash30,608
  val equalequal31,630
  val labellabel32,659
module type SSAGSSAG36,690
  tt40,754
  module VV42,765
  module EE43,781
  val predpred45,798
  val succsucc46,832
  val fold_vertexfold_vertex47,866
  val succ_esucc_e48,921
  val iter_vertexiter_vertex49,958
  val iter_succiter_succ50,1005
  val fold_succfold_succ51,1057
  val is_directedis_directed52,1117
type directiondirection57,1175
type direction = ForwardForward57,1175
type direction = Forward | BackwardBackward57,1175
type outset_cond_toutset_cond_t59,1212
type outset_cond_t = OutTrueOutTrue59,1212
type outset_cond_t = OutTrue|OutFalseOutFalse59,1212
type outset_cond_t = OutTrue|OutFalse|OutNoneOutNone59,1212
module type BOUNDED_MEET_SEMILATTICE_WIDENINGBOUNDED_MEET_SEMILATTICE_WIDENING61,1259
  tt63,1311
  val toptop64,1320
  val meetmeet65,1334
  val widenwiden66,1359
  val equalequal67,1385
module type DATAFLOW_WIDENINGDATAFLOW_WIDENING72,1476
  module LL75,1513
  module GG76,1560
  val transfer_functiontransfer_function80,1648
  val s0s083,1773
  val initinit87,1912
  val dirdir90,1962
module Make_wideningMake_widening93,1989
  module LHLH96,2043
  module HH98,2066
 let worklist_iterate_w_wideningworklist_iterate_w_widening102,2141

hacks.ml,965
Hacks1,0
module CC10,99
module DD11,118
let ra_finalra_final14,200
and ra0ra015,244
and (memmem16,282
and (mem,spsp16,282
and (mem,sp,r_ofr_of16,282
let function_endfunction_end23,465
and attrsattrs24,499
let save_ra0save_ra025,532
let ret_to_jmpret_to_jmp27,607
let attrsattrs47,1183
let assert_noofassert_noof48,1217
type colorcolor58,1407
type color = WhiteWhite58,1407
type color = White | GrayGray58,1407
type color = White | Gray | BlackBlack58,1407
let remove_cyclesremove_cycles60,1442
let repair_noderepair_node115,3321
let repair_cfgrepair_cfg145,4421
let uniqueify_labelsuniqueify_labels157,4823
module RmRm184,5513
  let remove_indirectremove_indirect185,5544
let ast_remove_indirectast_remove_indirect189,5628
let ssa_remove_indirectssa_remove_indirect193,5709
let replace_unknownsreplace_unknowns198,5844
let append_fileappend_file211,6138
let bberror_assume_falsebberror_assume_false229,6615

input.mli,268
Input1,0
val speclistspeclist12,256
val stream_specliststream_speclist15,341
val trace_speclisttrace_speclist18,429
val get_programget_program21,531
val get_stream_programget_stream_program23,580
val init_roinit_ro25,637
val streamratestreamrate28,692

input.ml,438
Input1,0
let init_roinit_ro3,18
let inputsinputs4,42
and streaminputsstreaminputs5,62
and streamratestreamrate6,90
and pintracepintrace7,173
let toint64toint649,199
let setint64setint6413,311
let stream_specliststream_speclist16,348
let addinputaddinput34,923
let trace_speclisttrace_speclist36,964
let speclistspeclist51,1328
let get_programget_program78,2340
let get_stream_programget_stream_program111,3746

llvm_codegen.mli,534
Llvm_codegen1,0
type memimplmemimpl15,576
    RealReal16,591
  | FuncFunc19,697
  | FuncMultiFuncMulti22,807
val string_to_memimplstring_to_memimpl27,999
class codegencodegen36,1399
  method convert_cfgconvert_cfg39,1449
  method convert_straightline_fconvert_straightline_f41,1563
  method convert_expconvert_exp43,1703
  method convert_typeconvert_type45,1816
  method convert_varconvert_var47,1948
  method dumpdump52,2221
  method output_bitcodeoutput_bitcode54,2298
  method eval_funeval_fun57,2485

llvm_codegen.ml,1881
Llvm_codegen1,0
module CACA11,235
module DD12,255
module VHVH20,432
type ctxctx23,497
  globalvarsglobalvars24,510
  varsvars25,538
  letvarsletvars26,560
  mutable allocbballocbb27,585
let new_ctxnew_ctx30,638
type varusevaruse36,818
type varuse = StoreStore36,818
type varuse = Store | LoadLoad36,818
type memimplmemimpl38,846
type memimpl = RealReal38,846
               | FuncFunc39,899
               | FuncMultiFuncMulti40,969
let addr_typeaddr_type42,1051
let string_to_memimplstring_to_memimpl44,1075
module ToposortToposort51,1254
class codegencodegen53,1302
  val ctxctx121,3960
  val memimplmemimpl123,3984
  method convert_typeconvert_type125,4009
  method private convert_global_varconvert_global_var130,4188
  method private convert_temp_varconvert_temp_var138,4445
  method private convert_let_varconvert_let_var147,4709
  method convert_varconvert_var151,4836
  method convert_expconvert_exp156,5027
  method private convert_straightline_stmtconvert_straightline_stmt271,10252
  method private convert_straightlineconvert_straightline325,13180
  method convert_straightline_fconvert_straightline_f328,13271
  method private convert_jump_statementconvert_jump_statement341,13756
  method private create_indirect_handlercreate_indirect_handler364,14814
  method convert_cfgconvert_cfg395,16032
  method private in_allocin_alloc508,19735
  method private anon_funanon_fun519,20101
  method dumpdump530,20525
  val set_value_hset_value_h533,20569
  method private set_valueset_value534,20604
  val get_value_hget_value_h563,21692
  method private get_valueget_value564,21727
  method private initialize_contextsinitialize_contexts591,22685
  method eval_funeval_fun594,22781
  method private bap_of_genericbap_of_generic609,23279
  method output_bitcodeoutput_bitcode616,23529

memory2array.mli,365
Memory2array1,0
val coerce_progcoerce_prog13,518
val coerce_expcoerce_exp16,611
type statestate35,1393
val create_statecreate_state39,1516
val coerce_prog_statecoerce_prog_state44,1730
val coerce_exp_statecoerce_exp_state49,1893
val coerce_rvar_statecoerce_rvar_state54,2056
val split_loadssplit_loads60,2189
val split_writessplit_writes61,2260

memory2array.ml,812
Memory2array1,0
module DD12,307
let bitwidthbitwidth25,543
let normtypenormtype26,560
let getwidthgetwidth28,590
let split_loadsplit_load34,802
let split_load_listsplit_load_list41,1144
let split_loadssplit_loads47,1439
let split_writesplit_write53,1731
let split_write_listsplit_write_list60,2079
let split_writessplit_writes70,2669
class memory2array_visitormemory2array_visitor77,3024
  method visit_avarvisit_avar127,4695
  method visit_rvarvisit_rvar134,4849
  method visit_expvisit_exp136,4888
type statestate169,6296
let create_statecreate_state171,6328
let coerce_progcoerce_prog173,6371
let coerce_prog_statecoerce_prog_state178,6515
let coerce_expcoerce_exp182,6652
let coerce_exp_statecoerce_exp_state187,6792
let coerce_rvar_statecoerce_rvar_state191,6925

parser.ml,283
Parser1,0
let handle_exceptionhandle_exception11,350
let program_from_lexbufprogram_from_lexbuf21,775
let program_from_fileprogram_from_file29,986
let exp_from_lexbufexp_from_lexbuf37,1240
let exp_from_stringexp_from_string45,1444
let exp_from_fileexp_from_file48,1543

piqi/ast_piqi.mli,88
Ast_piqi1,0
val to_pbto_pb8,203
val to_jsonto_json11,286
val to_xmlto_xml14,369

piqi/ast_piqi.ml,14
Ast_piqi1,0

piqi/stmt_piqi.ml,569635
Stmt_piqi1,0
    let rec parse_stringparse_string2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_intparse_int2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_intpacked_parse_int2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64parse_int642,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64packed_parse_int642,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64parse_uint642,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64packed_parse_uint642,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_boolparse_bool2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_boolpacked_parse_bool2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_programparse_program2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmtparse_stmt2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_moveparse_move2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmpparse_jmp2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmpparse_cjmp2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmtparse_label_stmt2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_haltparse_halt2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmtparse_assert_stmt2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assumeparse_assume2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_commentparse_comment2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_specialparse_special2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typparse_typ2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_regparse_reg2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_regpacked_parse_reg2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmemparse_tmem2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_arrayparse_array2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_labelparse_label2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_address x  in `addr res | _ -> Piqirun.error_variant x code  and parse_cast_typeparse_cast_type2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_address x  in `addr res | _ -> Piqirun.error_variant x code  and parse_cast_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and packed_parse_cast_typepacked_parse_cast_type2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_address x  in `addr res | _ -> Piqirun.error_variant x code  and parse_cast_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and packed_parse_cast_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and parse_binop_typeparse_binop_type2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_address x  in `addr res | _ -> Piqirun.error_variant x code  and parse_cast_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and packed_parse_cast_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and parse_binop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and packed_parse_binop_typepacked_parse_binop_type2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_address x  in `addr res | _ -> Piqirun.error_variant x code  and parse_cast_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and packed_parse_cast_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and parse_binop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and packed_parse_binop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and parse_unop_typeparse_unop_type2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_address x  in `addr res | _ -> Piqirun.error_variant x code  and parse_cast_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and packed_parse_cast_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and parse_binop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and packed_parse_binop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and parse_unop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and packed_parse_unop_typepacked_parse_unop_type2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_varparse_var2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_labparse_lab2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributeparse_attribute2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributesparse_attributes2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_address x  in `addr res | _ -> Piqirun.error_variant x code  and parse_cast_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and packed_parse_cast_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and parse_binop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and packed_parse_binop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and parse_unop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and packed_parse_unop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and parse_var x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in let _id, x = Piqirun.parse_required_field 2 parse_int   x  in let _typ, x = Piqirun.parse_required_field 3 parse_typ   x  in Piqirun.check_unparsed_fields x; {Var.name = _name ;Var.id = _id ;Var.typ = _typ ;}  and parse_lab x = parse_string x and parse_attribute x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_asmparse_asm2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_addressparse_address2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_address x  in `addr res | _ -> Piqirun.error_variant x code  and parse_cast_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and packed_parse_cast_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and parse_binop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and packed_parse_binop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and parse_unop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and packed_parse_unop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and parse_var x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in let _id, x = Piqirun.parse_required_field 2 parse_int   x  in let _typ, x = Piqirun.parse_required_field 3 parse_typ   x  in Piqirun.check_unparsed_fields x; {Var.name = _name ;Var.id = _id ;Var.typ = _typ ;}  and parse_lab x = parse_string x and parse_attribute x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_asm x  in `asm res | 2 -> let res =   parse_address x  in `address res | 3 -> let res =   parse_liveout x  in `liveout res | 4 -> let res =   parse_strattr x  in `strattr res | 5 -> let res =   parse_context x  in `context res | 6 -> let res =   parse_thread_id x  in `thread_id res | 7 -> let res =   parse_synthetic x  in `synthetic res | 8 -> let res =   parse_string x  in `other res | _ -> Piqirun.error_variant x code  and parse_attributes x = Piqirun.parse_list (parse_attribute) x and parse_asm x = parse_string x and parse_address x = parse_int64 x and packed_parse_addresspacked_parse_address2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_address x  in `addr res | _ -> Piqirun.error_variant x code  and parse_cast_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and packed_parse_cast_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and parse_binop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and packed_parse_binop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and parse_unop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and packed_parse_unop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and parse_var x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in let _id, x = Piqirun.parse_required_field 2 parse_int   x  in let _typ, x = Piqirun.parse_required_field 3 parse_typ   x  in Piqirun.check_unparsed_fields x; {Var.name = _name ;Var.id = _id ;Var.typ = _typ ;}  and parse_lab x = parse_string x and parse_attribute x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_asm x  in `asm res | 2 -> let res =   parse_address x  in `address res | 3 -> let res =   parse_liveoutparse_liveout2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_address x  in `addr res | _ -> Piqirun.error_variant x code  and parse_cast_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and packed_parse_cast_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and parse_binop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and packed_parse_binop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and parse_unop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and packed_parse_unop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and parse_var x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in let _id, x = Piqirun.parse_required_field 2 parse_int   x  in let _typ, x = Piqirun.parse_required_field 3 parse_typ   x  in Piqirun.check_unparsed_fields x; {Var.name = _name ;Var.id = _id ;Var.typ = _typ ;}  and parse_lab x = parse_string x and parse_attribute x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_asm x  in `asm res | 2 -> let res =   parse_address x  in `address res | 3 -> let res =   parse_liveout x  in `liveout res | 4 -> let res =   parse_strattr x  in `strattr res | 5 -> let res =   parse_context x  in `context res | 6 -> let res =   parse_thread_id x  in `thread_id res | 7 -> let res =   parse_syntheticparse_synthetic2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_address x  in `addr res | _ -> Piqirun.error_variant x code  and parse_cast_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and packed_parse_cast_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and parse_binop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and packed_parse_binop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and parse_unop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and packed_parse_unop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and parse_var x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in let _id, x = Piqirun.parse_required_field 2 parse_int   x  in let _typ, x = Piqirun.parse_required_field 3 parse_typ   x  in Piqirun.check_unparsed_fields x; {Var.name = _name ;Var.id = _id ;Var.typ = _typ ;}  and parse_lab x = parse_string x and parse_attribute x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_asm x  in `asm res | 2 -> let res =   parse_address x  in `address res | 3 -> let res =   parse_liveout x  in `liveout res | 4 -> let res =   parse_strattrparse_strattr2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_address x  in `addr res | _ -> Piqirun.error_variant x code  and parse_cast_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and packed_parse_cast_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and parse_binop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and packed_parse_binop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and parse_unop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and packed_parse_unop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and parse_var x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in let _id, x = Piqirun.parse_required_field 2 parse_int   x  in let _typ, x = Piqirun.parse_required_field 3 parse_typ   x  in Piqirun.check_unparsed_fields x; {Var.name = _name ;Var.id = _id ;Var.typ = _typ ;}  and parse_lab x = parse_string x and parse_attribute x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_asm x  in `asm res | 2 -> let res =   parse_address x  in `address res | 3 -> let res =   parse_liveout x  in `liveout res | 4 -> let res =   parse_strattr x  in `strattr res | 5 -> let res =   parse_context x  in `context res | 6 -> let res =   parse_thread_idparse_thread_id2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_address x  in `addr res | _ -> Piqirun.error_variant x code  and parse_cast_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and packed_parse_cast_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and parse_binop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and packed_parse_binop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and parse_unop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and packed_parse_unop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and parse_var x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in let _id, x = Piqirun.parse_required_field 2 parse_int   x  in let _typ, x = Piqirun.parse_required_field 3 parse_typ   x  in Piqirun.check_unparsed_fields x; {Var.name = _name ;Var.id = _id ;Var.typ = _typ ;}  and parse_lab x = parse_string x and parse_attribute x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_asm x  in `asm res | 2 -> let res =   parse_address x  in `address res | 3 -> let res =   parse_liveout x  in `liveout res | 4 -> let res =   parse_strattr x  in `strattr res | 5 -> let res =   parse_context x  in `context res | 6 -> let res =   parse_thread_id x  in `thread_id res | 7 -> let res =   parse_synthetic x  in `synthetic res | 8 -> let res =   parse_string x  in `other res | _ -> Piqirun.error_variant x code  and parse_attributes x = Piqirun.parse_list (parse_attribute) x and parse_asm x = parse_string x and parse_address x = parse_int64 x and packed_parse_address x = packed_parse_int64 x and parse_liveout x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Liveout._dummy = ()}  and parse_synthetic x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Synthetic._dummy = ()}  and parse_strattr x = parse_string x and parse_thread_id x = parse_uint64 x and packed_parse_thread_idpacked_parse_thread_id2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_address x  in `addr res | _ -> Piqirun.error_variant x code  and parse_cast_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and packed_parse_cast_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and parse_binop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and packed_parse_binop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and parse_unop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and packed_parse_unop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and parse_var x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in let _id, x = Piqirun.parse_required_field 2 parse_int   x  in let _typ, x = Piqirun.parse_required_field 3 parse_typ   x  in Piqirun.check_unparsed_fields x; {Var.name = _name ;Var.id = _id ;Var.typ = _typ ;}  and parse_lab x = parse_string x and parse_attribute x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_asm x  in `asm res | 2 -> let res =   parse_address x  in `address res | 3 -> let res =   parse_liveout x  in `liveout res | 4 -> let res =   parse_strattr x  in `strattr res | 5 -> let res =   parse_context x  in `context res | 6 -> let res =   parse_thread_id x  in `thread_id res | 7 -> let res =   parse_synthetic x  in `synthetic res | 8 -> let res =   parse_string x  in `other res | _ -> Piqirun.error_variant x code  and parse_attributes x = Piqirun.parse_list (parse_attribute) x and parse_asm x = parse_string x and parse_address x = parse_int64 x and packed_parse_address x = packed_parse_int64 x and parse_liveout x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Liveout._dummy = ()}  and parse_synthetic x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Synthetic._dummy = ()}  and parse_strattr x = parse_string x and parse_thread_id x = parse_uint64 x and packed_parse_thread_id x = packed_parse_uint64 x and parse_operand_info_specificparse_operand_info_specific2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_address x  in `addr res | _ -> Piqirun.error_variant x code  and parse_cast_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and packed_parse_cast_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and parse_binop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and packed_parse_binop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and parse_unop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and packed_parse_unop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and parse_var x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in let _id, x = Piqirun.parse_required_field 2 parse_int   x  in let _typ, x = Piqirun.parse_required_field 3 parse_typ   x  in Piqirun.check_unparsed_fields x; {Var.name = _name ;Var.id = _id ;Var.typ = _typ ;}  and parse_lab x = parse_string x and parse_attribute x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_asm x  in `asm res | 2 -> let res =   parse_address x  in `address res | 3 -> let res =   parse_liveout x  in `liveout res | 4 -> let res =   parse_strattr x  in `strattr res | 5 -> let res =   parse_context x  in `context res | 6 -> let res =   parse_thread_id x  in `thread_id res | 7 -> let res =   parse_synthetic x  in `synthetic res | 8 -> let res =   parse_string x  in `other res | _ -> Piqirun.error_variant x code  and parse_attributes x = Piqirun.parse_list (parse_attribute) x and parse_asm x = parse_string x and parse_address x = parse_int64 x and packed_parse_address x = packed_parse_int64 x and parse_liveout x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Liveout._dummy = ()}  and parse_synthetic x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Synthetic._dummy = ()}  and parse_strattr x = parse_string x and parse_thread_id x = parse_uint64 x and packed_parse_thread_id x = packed_parse_uint64 x and parse_operand_info_specific x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_mem_operand x  in `mem_operand res | 2 -> let res =   parse_reg_operandparse_reg_operand2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_address x  in `addr res | _ -> Piqirun.error_variant x code  and parse_cast_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and packed_parse_cast_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and parse_binop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and packed_parse_binop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and parse_unop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and packed_parse_unop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and parse_var x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in let _id, x = Piqirun.parse_required_field 2 parse_int   x  in let _typ, x = Piqirun.parse_required_field 3 parse_typ   x  in Piqirun.check_unparsed_fields x; {Var.name = _name ;Var.id = _id ;Var.typ = _typ ;}  and parse_lab x = parse_string x and parse_attribute x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_asm x  in `asm res | 2 -> let res =   parse_address x  in `address res | 3 -> let res =   parse_liveout x  in `liveout res | 4 -> let res =   parse_strattr x  in `strattr res | 5 -> let res =   parse_context x  in `context res | 6 -> let res =   parse_thread_id x  in `thread_id res | 7 -> let res =   parse_synthetic x  in `synthetic res | 8 -> let res =   parse_string x  in `other res | _ -> Piqirun.error_variant x code  and parse_attributes x = Piqirun.parse_list (parse_attribute) x and parse_asm x = parse_string x and parse_address x = parse_int64 x and packed_parse_address x = packed_parse_int64 x and parse_liveout x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Liveout._dummy = ()}  and parse_synthetic x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Synthetic._dummy = ()}  and parse_strattr x = parse_string x and parse_thread_id x = parse_uint64 x and packed_parse_thread_id x = packed_parse_uint64 x and parse_operand_info_specific x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_mem_operand x  in `mem_operand res | 2 -> let res =   parse_reg_operand x  in `reg_operand res | _ -> Piqirun.error_variant x code  and parse_reg_operand x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in Piqirun.check_unparsed_fields x; {Reg_operand.name = _name ;}  and parse_bit_lengthparse_bit_length2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_address x  in `addr res | _ -> Piqirun.error_variant x code  and parse_cast_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and packed_parse_cast_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and parse_binop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and packed_parse_binop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and parse_unop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and packed_parse_unop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and parse_var x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in let _id, x = Piqirun.parse_required_field 2 parse_int   x  in let _typ, x = Piqirun.parse_required_field 3 parse_typ   x  in Piqirun.check_unparsed_fields x; {Var.name = _name ;Var.id = _id ;Var.typ = _typ ;}  and parse_lab x = parse_string x and parse_attribute x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_asm x  in `asm res | 2 -> let res =   parse_address x  in `address res | 3 -> let res =   parse_liveout x  in `liveout res | 4 -> let res =   parse_strattr x  in `strattr res | 5 -> let res =   parse_context x  in `context res | 6 -> let res =   parse_thread_id x  in `thread_id res | 7 -> let res =   parse_synthetic x  in `synthetic res | 8 -> let res =   parse_string x  in `other res | _ -> Piqirun.error_variant x code  and parse_attributes x = Piqirun.parse_list (parse_attribute) x and parse_asm x = parse_string x and parse_address x = parse_int64 x and packed_parse_address x = packed_parse_int64 x and parse_liveout x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Liveout._dummy = ()}  and parse_synthetic x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Synthetic._dummy = ()}  and parse_strattr x = parse_string x and parse_thread_id x = parse_uint64 x and packed_parse_thread_id x = packed_parse_uint64 x and parse_operand_info_specific x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_mem_operand x  in `mem_operand res | 2 -> let res =   parse_reg_operand x  in `reg_operand res | _ -> Piqirun.error_variant x code  and parse_reg_operand x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in Piqirun.check_unparsed_fields x; {Reg_operand.name = _name ;}  and parse_bit_length x = parse_int x and packed_parse_bit_lengthpacked_parse_bit_length2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_address x  in `addr res | _ -> Piqirun.error_variant x code  and parse_cast_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and packed_parse_cast_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and parse_binop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and packed_parse_binop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and parse_unop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and packed_parse_unop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and parse_var x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in let _id, x = Piqirun.parse_required_field 2 parse_int   x  in let _typ, x = Piqirun.parse_required_field 3 parse_typ   x  in Piqirun.check_unparsed_fields x; {Var.name = _name ;Var.id = _id ;Var.typ = _typ ;}  and parse_lab x = parse_string x and parse_attribute x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_asm x  in `asm res | 2 -> let res =   parse_address x  in `address res | 3 -> let res =   parse_liveout x  in `liveout res | 4 -> let res =   parse_strattr x  in `strattr res | 5 -> let res =   parse_context x  in `context res | 6 -> let res =   parse_thread_id x  in `thread_id res | 7 -> let res =   parse_synthetic x  in `synthetic res | 8 -> let res =   parse_string x  in `other res | _ -> Piqirun.error_variant x code  and parse_attributes x = Piqirun.parse_list (parse_attribute) x and parse_asm x = parse_string x and parse_address x = parse_int64 x and packed_parse_address x = packed_parse_int64 x and parse_liveout x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Liveout._dummy = ()}  and parse_synthetic x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Synthetic._dummy = ()}  and parse_strattr x = parse_string x and parse_thread_id x = parse_uint64 x and packed_parse_thread_id x = packed_parse_uint64 x and parse_operand_info_specific x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_mem_operand x  in `mem_operand res | 2 -> let res =   parse_reg_operand x  in `reg_operand res | _ -> Piqirun.error_variant x code  and parse_reg_operand x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in Piqirun.check_unparsed_fields x; {Reg_operand.name = _name ;}  and parse_bit_length x = parse_int x and packed_parse_bit_length x = packed_parse_int x and parse_taint_idparse_taint_id2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_address x  in `addr res | _ -> Piqirun.error_variant x code  and parse_cast_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and packed_parse_cast_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and parse_binop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and packed_parse_binop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and parse_unop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and packed_parse_unop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and parse_var x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in let _id, x = Piqirun.parse_required_field 2 parse_int   x  in let _typ, x = Piqirun.parse_required_field 3 parse_typ   x  in Piqirun.check_unparsed_fields x; {Var.name = _name ;Var.id = _id ;Var.typ = _typ ;}  and parse_lab x = parse_string x and parse_attribute x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_asm x  in `asm res | 2 -> let res =   parse_address x  in `address res | 3 -> let res =   parse_liveout x  in `liveout res | 4 -> let res =   parse_strattr x  in `strattr res | 5 -> let res =   parse_context x  in `context res | 6 -> let res =   parse_thread_id x  in `thread_id res | 7 -> let res =   parse_synthetic x  in `synthetic res | 8 -> let res =   parse_string x  in `other res | _ -> Piqirun.error_variant x code  and parse_attributes x = Piqirun.parse_list (parse_attribute) x and parse_asm x = parse_string x and parse_address x = parse_int64 x and packed_parse_address x = packed_parse_int64 x and parse_liveout x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Liveout._dummy = ()}  and parse_synthetic x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Synthetic._dummy = ()}  and parse_strattr x = parse_string x and parse_thread_id x = parse_uint64 x and packed_parse_thread_id x = packed_parse_uint64 x and parse_operand_info_specific x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_mem_operand x  in `mem_operand res | 2 -> let res =   parse_reg_operand x  in `reg_operand res | _ -> Piqirun.error_variant x code  and parse_reg_operand x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in Piqirun.check_unparsed_fields x; {Reg_operand.name = _name ;}  and parse_bit_length x = parse_int x and packed_parse_bit_length x = packed_parse_int x and parse_taint_id x = parse_uint64 x and packed_parse_taint_idpacked_parse_taint_id2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_address x  in `addr res | _ -> Piqirun.error_variant x code  and parse_cast_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and packed_parse_cast_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and parse_binop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and packed_parse_binop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and parse_unop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and packed_parse_unop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and parse_var x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in let _id, x = Piqirun.parse_required_field 2 parse_int   x  in let _typ, x = Piqirun.parse_required_field 3 parse_typ   x  in Piqirun.check_unparsed_fields x; {Var.name = _name ;Var.id = _id ;Var.typ = _typ ;}  and parse_lab x = parse_string x and parse_attribute x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_asm x  in `asm res | 2 -> let res =   parse_address x  in `address res | 3 -> let res =   parse_liveout x  in `liveout res | 4 -> let res =   parse_strattr x  in `strattr res | 5 -> let res =   parse_context x  in `context res | 6 -> let res =   parse_thread_id x  in `thread_id res | 7 -> let res =   parse_synthetic x  in `synthetic res | 8 -> let res =   parse_string x  in `other res | _ -> Piqirun.error_variant x code  and parse_attributes x = Piqirun.parse_list (parse_attribute) x and parse_asm x = parse_string x and parse_address x = parse_int64 x and packed_parse_address x = packed_parse_int64 x and parse_liveout x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Liveout._dummy = ()}  and parse_synthetic x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Synthetic._dummy = ()}  and parse_strattr x = parse_string x and parse_thread_id x = parse_uint64 x and packed_parse_thread_id x = packed_parse_uint64 x and parse_operand_info_specific x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_mem_operand x  in `mem_operand res | 2 -> let res =   parse_reg_operand x  in `reg_operand res | _ -> Piqirun.error_variant x code  and parse_reg_operand x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in Piqirun.check_unparsed_fields x; {Reg_operand.name = _name ;}  and parse_bit_length x = parse_int x and packed_parse_bit_length x = packed_parse_int x and parse_taint_id x = parse_uint64 x and packed_parse_taint_id x = packed_parse_uint64 x and parse_operand_usageparse_operand_usage2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_address x  in `addr res | _ -> Piqirun.error_variant x code  and parse_cast_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and packed_parse_cast_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and parse_binop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and packed_parse_binop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and parse_unop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and packed_parse_unop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and parse_var x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in let _id, x = Piqirun.parse_required_field 2 parse_int   x  in let _typ, x = Piqirun.parse_required_field 3 parse_typ   x  in Piqirun.check_unparsed_fields x; {Var.name = _name ;Var.id = _id ;Var.typ = _typ ;}  and parse_lab x = parse_string x and parse_attribute x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_asm x  in `asm res | 2 -> let res =   parse_address x  in `address res | 3 -> let res =   parse_liveout x  in `liveout res | 4 -> let res =   parse_strattr x  in `strattr res | 5 -> let res =   parse_context x  in `context res | 6 -> let res =   parse_thread_id x  in `thread_id res | 7 -> let res =   parse_synthetic x  in `synthetic res | 8 -> let res =   parse_string x  in `other res | _ -> Piqirun.error_variant x code  and parse_attributes x = Piqirun.parse_list (parse_attribute) x and parse_asm x = parse_string x and parse_address x = parse_int64 x and packed_parse_address x = packed_parse_int64 x and parse_liveout x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Liveout._dummy = ()}  and parse_synthetic x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Synthetic._dummy = ()}  and parse_strattr x = parse_string x and parse_thread_id x = parse_uint64 x and packed_parse_thread_id x = packed_parse_uint64 x and parse_operand_info_specific x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_mem_operandparse_mem_operand2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_address x  in `addr res | _ -> Piqirun.error_variant x code  and parse_cast_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and packed_parse_cast_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and parse_binop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and packed_parse_binop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and parse_unop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and packed_parse_unop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and parse_var x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in let _id, x = Piqirun.parse_required_field 2 parse_int   x  in let _typ, x = Piqirun.parse_required_field 3 parse_typ   x  in Piqirun.check_unparsed_fields x; {Var.name = _name ;Var.id = _id ;Var.typ = _typ ;}  and parse_lab x = parse_string x and parse_attribute x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_asm x  in `asm res | 2 -> let res =   parse_address x  in `address res | 3 -> let res =   parse_liveout x  in `liveout res | 4 -> let res =   parse_strattr x  in `strattr res | 5 -> let res =   parse_context x  in `context res | 6 -> let res =   parse_thread_id x  in `thread_id res | 7 -> let res =   parse_synthetic x  in `synthetic res | 8 -> let res =   parse_string x  in `other res | _ -> Piqirun.error_variant x code  and parse_attributes x = Piqirun.parse_list (parse_attribute) x and parse_asm x = parse_string x and parse_address x = parse_int64 x and packed_parse_address x = packed_parse_int64 x and parse_liveout x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Liveout._dummy = ()}  and parse_synthetic x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Synthetic._dummy = ()}  and parse_strattr x = parse_string x and parse_thread_id x = parse_uint64 x and packed_parse_thread_id x = packed_parse_uint64 x and parse_operand_info_specific x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_mem_operand x  in `mem_operand res | 2 -> let res =   parse_reg_operand x  in `reg_operand res | _ -> Piqirun.error_variant x code  and parse_reg_operand x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in Piqirun.check_unparsed_fields x; {Reg_operand.name = _name ;}  and parse_bit_length x = parse_int x and packed_parse_bit_length x = packed_parse_int x and parse_taint_id x = parse_uint64 x and packed_parse_taint_id x = packed_parse_uint64 x and parse_operand_usage x = let x = Piqirun.parse_record x in  let _read, x = Piqirun.parse_required_field 1 parse_bool   x  in let _written, x = Piqirun.parse_required_field 2 parse_bool   x  in let _index, x = Piqirun.parse_required_field 3 parse_bool   x  in let _base, x = Piqirun.parse_required_field 4 parse_bool   x  in Piqirun.check_unparsed_fields x; {Operand_usage.read = _read ;Operand_usage.written = _written ;Operand_usage.index = _index ;Operand_usage.base = _base ;}  and parse_mem_operand x = let x = Piqirun.parse_record x in  let _address, x = Piqirun.parse_required_field 1 parse_address   x  in Piqirun.check_unparsed_fields x; {Mem_operand.address = _address ;}  and parse_taint_infoparse_taint_info2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_address x  in `addr res | _ -> Piqirun.error_variant x code  and parse_cast_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and packed_parse_cast_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and parse_binop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and packed_parse_binop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and parse_unop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and packed_parse_unop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and parse_var x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in let _id, x = Piqirun.parse_required_field 2 parse_int   x  in let _typ, x = Piqirun.parse_required_field 3 parse_typ   x  in Piqirun.check_unparsed_fields x; {Var.name = _name ;Var.id = _id ;Var.typ = _typ ;}  and parse_lab x = parse_string x and parse_attribute x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_asm x  in `asm res | 2 -> let res =   parse_address x  in `address res | 3 -> let res =   parse_liveout x  in `liveout res | 4 -> let res =   parse_strattr x  in `strattr res | 5 -> let res =   parse_contextparse_context2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_expparse_exp2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_address x  in `addr res | _ -> Piqirun.error_variant x code  and parse_cast_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and packed_parse_cast_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and parse_binop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and packed_parse_binop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and parse_unop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and packed_parse_unop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and parse_var x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in let _id, x = Piqirun.parse_required_field 2 parse_int   x  in let _typ, x = Piqirun.parse_required_field 3 parse_typ   x  in Piqirun.check_unparsed_fields x; {Var.name = _name ;Var.id = _id ;Var.typ = _typ ;}  and parse_lab x = parse_string x and parse_attribute x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_asm x  in `asm res | 2 -> let res =   parse_address x  in `address res | 3 -> let res =   parse_liveout x  in `liveout res | 4 -> let res =   parse_strattr x  in `strattr res | 5 -> let res =   parse_context x  in `context res | 6 -> let res =   parse_thread_id x  in `thread_id res | 7 -> let res =   parse_synthetic x  in `synthetic res | 8 -> let res =   parse_string x  in `other res | _ -> Piqirun.error_variant x code  and parse_attributes x = Piqirun.parse_list (parse_attribute) x and parse_asm x = parse_string x and parse_address x = parse_int64 x and packed_parse_address x = packed_parse_int64 x and parse_liveout x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Liveout._dummy = ()}  and parse_synthetic x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Synthetic._dummy = ()}  and parse_strattr x = parse_string x and parse_thread_id x = parse_uint64 x and packed_parse_thread_id x = packed_parse_uint64 x and parse_operand_info_specific x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_mem_operand x  in `mem_operand res | 2 -> let res =   parse_reg_operand x  in `reg_operand res | _ -> Piqirun.error_variant x code  and parse_reg_operand x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in Piqirun.check_unparsed_fields x; {Reg_operand.name = _name ;}  and parse_bit_length x = parse_int x and packed_parse_bit_length x = packed_parse_int x and parse_taint_id x = parse_uint64 x and packed_parse_taint_id x = packed_parse_uint64 x and parse_operand_usage x = let x = Piqirun.parse_record x in  let _read, x = Piqirun.parse_required_field 1 parse_bool   x  in let _written, x = Piqirun.parse_required_field 2 parse_bool   x  in let _index, x = Piqirun.parse_required_field 3 parse_bool   x  in let _base, x = Piqirun.parse_required_field 4 parse_bool   x  in Piqirun.check_unparsed_fields x; {Operand_usage.read = _read ;Operand_usage.written = _written ;Operand_usage.index = _index ;Operand_usage.base = _base ;}  and parse_mem_operand x = let x = Piqirun.parse_record x in  let _address, x = Piqirun.parse_required_field 1 parse_address   x  in Piqirun.check_unparsed_fields x; {Mem_operand.address = _address ;}  and parse_taint_info x = let code, x = Piqirun.parse_variant x in  match code with | 1 when x = Piqirun.Varint 1 ->  `no_taint | 2 -> let res =   parse_taint_id x  in `taint_id res | 3 when x = Piqirun.Varint 1 ->  `taint_multiple | _ -> Piqirun.error_variant x code  and parse_context x = let x = Piqirun.parse_record x in  let _operand_info_specific, x = Piqirun.parse_required_field 1 parse_operand_info_specific   x  in let _bit_length, x = Piqirun.parse_required_field 2 parse_bit_length   x  in let _operand_usage, x = Piqirun.parse_required_field 3 parse_operand_usage   x  in let _taint_info, x = Piqirun.parse_required_field 4 parse_taint_info   x  in let _value, x = Piqirun.parse_required_field 5 parse_string   x  in Piqirun.check_unparsed_fields x; {Context.operand_info_specific = _operand_info_specific ;Context.bit_length = _bit_length ;Context.operand_usage = _operand_usage ;Context.taint_info = _taint_info ;Context.value = _value ;}  and parse_exp x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_loadparse_load2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_address x  in `addr res | _ -> Piqirun.error_variant x code  and parse_cast_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and packed_parse_cast_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and parse_binop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and packed_parse_binop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and parse_unop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and packed_parse_unop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and parse_var x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in let _id, x = Piqirun.parse_required_field 2 parse_int   x  in let _typ, x = Piqirun.parse_required_field 3 parse_typ   x  in Piqirun.check_unparsed_fields x; {Var.name = _name ;Var.id = _id ;Var.typ = _typ ;}  and parse_lab x = parse_string x and parse_attribute x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_asm x  in `asm res | 2 -> let res =   parse_address x  in `address res | 3 -> let res =   parse_liveout x  in `liveout res | 4 -> let res =   parse_strattr x  in `strattr res | 5 -> let res =   parse_context x  in `context res | 6 -> let res =   parse_thread_id x  in `thread_id res | 7 -> let res =   parse_synthetic x  in `synthetic res | 8 -> let res =   parse_string x  in `other res | _ -> Piqirun.error_variant x code  and parse_attributes x = Piqirun.parse_list (parse_attribute) x and parse_asm x = parse_string x and parse_address x = parse_int64 x and packed_parse_address x = packed_parse_int64 x and parse_liveout x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Liveout._dummy = ()}  and parse_synthetic x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Synthetic._dummy = ()}  and parse_strattr x = parse_string x and parse_thread_id x = parse_uint64 x and packed_parse_thread_id x = packed_parse_uint64 x and parse_operand_info_specific x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_mem_operand x  in `mem_operand res | 2 -> let res =   parse_reg_operand x  in `reg_operand res | _ -> Piqirun.error_variant x code  and parse_reg_operand x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in Piqirun.check_unparsed_fields x; {Reg_operand.name = _name ;}  and parse_bit_length x = parse_int x and packed_parse_bit_length x = packed_parse_int x and parse_taint_id x = parse_uint64 x and packed_parse_taint_id x = packed_parse_uint64 x and parse_operand_usage x = let x = Piqirun.parse_record x in  let _read, x = Piqirun.parse_required_field 1 parse_bool   x  in let _written, x = Piqirun.parse_required_field 2 parse_bool   x  in let _index, x = Piqirun.parse_required_field 3 parse_bool   x  in let _base, x = Piqirun.parse_required_field 4 parse_bool   x  in Piqirun.check_unparsed_fields x; {Operand_usage.read = _read ;Operand_usage.written = _written ;Operand_usage.index = _index ;Operand_usage.base = _base ;}  and parse_mem_operand x = let x = Piqirun.parse_record x in  let _address, x = Piqirun.parse_required_field 1 parse_address   x  in Piqirun.check_unparsed_fields x; {Mem_operand.address = _address ;}  and parse_taint_info x = let code, x = Piqirun.parse_variant x in  match code with | 1 when x = Piqirun.Varint 1 ->  `no_taint | 2 -> let res =   parse_taint_id x  in `taint_id res | 3 when x = Piqirun.Varint 1 ->  `taint_multiple | _ -> Piqirun.error_variant x code  and parse_context x = let x = Piqirun.parse_record x in  let _operand_info_specific, x = Piqirun.parse_required_field 1 parse_operand_info_specific   x  in let _bit_length, x = Piqirun.parse_required_field 2 parse_bit_length   x  in let _operand_usage, x = Piqirun.parse_required_field 3 parse_operand_usage   x  in let _taint_info, x = Piqirun.parse_required_field 4 parse_taint_info   x  in let _value, x = Piqirun.parse_required_field 5 parse_string   x  in Piqirun.check_unparsed_fields x; {Context.operand_info_specific = _operand_info_specific ;Context.bit_length = _bit_length ;Context.operand_usage = _operand_usage ;Context.taint_info = _taint_info ;Context.value = _value ;}  and parse_exp x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_load x  in `load res | 2 -> let res =   parse_storeparse_store2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_address x  in `addr res | _ -> Piqirun.error_variant x code  and parse_cast_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and packed_parse_cast_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and parse_binopparse_binop2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_address x  in `addr res | _ -> Piqirun.error_variant x code  and parse_cast_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and packed_parse_cast_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and parse_binop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and packed_parse_binop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and parse_unopparse_unop2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_address x  in `addr res | _ -> Piqirun.error_variant x code  and parse_cast_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and packed_parse_cast_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and parse_binop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and packed_parse_binop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and parse_unop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and packed_parse_unop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and parse_var x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in let _id, x = Piqirun.parse_required_field 2 parse_int   x  in let _typ, x = Piqirun.parse_required_field 3 parse_typ   x  in Piqirun.check_unparsed_fields x; {Var.name = _name ;Var.id = _id ;Var.typ = _typ ;}  and parse_lab x = parse_string x and parse_attribute x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_asm x  in `asm res | 2 -> let res =   parse_address x  in `address res | 3 -> let res =   parse_liveout x  in `liveout res | 4 -> let res =   parse_strattr x  in `strattr res | 5 -> let res =   parse_context x  in `context res | 6 -> let res =   parse_thread_id x  in `thread_id res | 7 -> let res =   parse_synthetic x  in `synthetic res | 8 -> let res =   parse_string x  in `other res | _ -> Piqirun.error_variant x code  and parse_attributes x = Piqirun.parse_list (parse_attribute) x and parse_asm x = parse_string x and parse_address x = parse_int64 x and packed_parse_address x = packed_parse_int64 x and parse_liveout x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Liveout._dummy = ()}  and parse_synthetic x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Synthetic._dummy = ()}  and parse_strattr x = parse_string x and parse_thread_id x = parse_uint64 x and packed_parse_thread_id x = packed_parse_uint64 x and parse_operand_info_specific x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_mem_operand x  in `mem_operand res | 2 -> let res =   parse_reg_operand x  in `reg_operand res | _ -> Piqirun.error_variant x code  and parse_reg_operand x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in Piqirun.check_unparsed_fields x; {Reg_operand.name = _name ;}  and parse_bit_length x = parse_int x and packed_parse_bit_length x = packed_parse_int x and parse_taint_id x = parse_uint64 x and packed_parse_taint_id x = packed_parse_uint64 x and parse_operand_usage x = let x = Piqirun.parse_record x in  let _read, x = Piqirun.parse_required_field 1 parse_bool   x  in let _written, x = Piqirun.parse_required_field 2 parse_bool   x  in let _index, x = Piqirun.parse_required_field 3 parse_bool   x  in let _base, x = Piqirun.parse_required_field 4 parse_bool   x  in Piqirun.check_unparsed_fields x; {Operand_usage.read = _read ;Operand_usage.written = _written ;Operand_usage.index = _index ;Operand_usage.base = _base ;}  and parse_mem_operand x = let x = Piqirun.parse_record x in  let _address, x = Piqirun.parse_required_field 1 parse_address   x  in Piqirun.check_unparsed_fields x; {Mem_operand.address = _address ;}  and parse_taint_info x = let code, x = Piqirun.parse_variant x in  match code with | 1 when x = Piqirun.Varint 1 ->  `no_taint | 2 -> let res =   parse_taint_id x  in `taint_id res | 3 when x = Piqirun.Varint 1 ->  `taint_multiple | _ -> Piqirun.error_variant x code  and parse_context x = let x = Piqirun.parse_record x in  let _operand_info_specific, x = Piqirun.parse_required_field 1 parse_operand_info_specific   x  in let _bit_length, x = Piqirun.parse_required_field 2 parse_bit_length   x  in let _operand_usage, x = Piqirun.parse_required_field 3 parse_operand_usage   x  in let _taint_info, x = Piqirun.parse_required_field 4 parse_taint_info   x  in let _value, x = Piqirun.parse_required_field 5 parse_string   x  in Piqirun.check_unparsed_fields x; {Context.operand_info_specific = _operand_info_specific ;Context.bit_length = _bit_length ;Context.operand_usage = _operand_usage ;Context.taint_info = _taint_info ;Context.value = _value ;}  and parse_exp x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_load x  in `load res | 2 -> let res =   parse_store x  in `store res | 3 -> let res =   parse_binop x  in `binop res | 4 -> let res =   parse_unop x  in `unop res | 5 -> let res =   parse_var x  in `var res | 6 -> let res =   parse_lab x  in `lab res | 7 -> let res =   parse_inteparse_inte2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_address x  in `addr res | _ -> Piqirun.error_variant x code  and parse_castparse_cast2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_address x  in `addr res | _ -> Piqirun.error_variant x code  and parse_cast_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and packed_parse_cast_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and parse_binop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and packed_parse_binop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and parse_unop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and packed_parse_unop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and parse_var x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in let _id, x = Piqirun.parse_required_field 2 parse_int   x  in let _typ, x = Piqirun.parse_required_field 3 parse_typ   x  in Piqirun.check_unparsed_fields x; {Var.name = _name ;Var.id = _id ;Var.typ = _typ ;}  and parse_lab x = parse_string x and parse_attribute x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_asm x  in `asm res | 2 -> let res =   parse_address x  in `address res | 3 -> let res =   parse_liveout x  in `liveout res | 4 -> let res =   parse_strattr x  in `strattr res | 5 -> let res =   parse_context x  in `context res | 6 -> let res =   parse_thread_id x  in `thread_id res | 7 -> let res =   parse_synthetic x  in `synthetic res | 8 -> let res =   parse_string x  in `other res | _ -> Piqirun.error_variant x code  and parse_attributes x = Piqirun.parse_list (parse_attribute) x and parse_asm x = parse_string x and parse_address x = parse_int64 x and packed_parse_address x = packed_parse_int64 x and parse_liveout x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Liveout._dummy = ()}  and parse_synthetic x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Synthetic._dummy = ()}  and parse_strattr x = parse_string x and parse_thread_id x = parse_uint64 x and packed_parse_thread_id x = packed_parse_uint64 x and parse_operand_info_specific x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_mem_operand x  in `mem_operand res | 2 -> let res =   parse_reg_operand x  in `reg_operand res | _ -> Piqirun.error_variant x code  and parse_reg_operand x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in Piqirun.check_unparsed_fields x; {Reg_operand.name = _name ;}  and parse_bit_length x = parse_int x and packed_parse_bit_length x = packed_parse_int x and parse_taint_id x = parse_uint64 x and packed_parse_taint_id x = packed_parse_uint64 x and parse_operand_usage x = let x = Piqirun.parse_record x in  let _read, x = Piqirun.parse_required_field 1 parse_bool   x  in let _written, x = Piqirun.parse_required_field 2 parse_bool   x  in let _index, x = Piqirun.parse_required_field 3 parse_bool   x  in let _base, x = Piqirun.parse_required_field 4 parse_bool   x  in Piqirun.check_unparsed_fields x; {Operand_usage.read = _read ;Operand_usage.written = _written ;Operand_usage.index = _index ;Operand_usage.base = _base ;}  and parse_mem_operand x = let x = Piqirun.parse_record x in  let _address, x = Piqirun.parse_required_field 1 parse_address   x  in Piqirun.check_unparsed_fields x; {Mem_operand.address = _address ;}  and parse_taint_info x = let code, x = Piqirun.parse_variant x in  match code with | 1 when x = Piqirun.Varint 1 ->  `no_taint | 2 -> let res =   parse_taint_id x  in `taint_id res | 3 when x = Piqirun.Varint 1 ->  `taint_multiple | _ -> Piqirun.error_variant x code  and parse_context x = let x = Piqirun.parse_record x in  let _operand_info_specific, x = Piqirun.parse_required_field 1 parse_operand_info_specific   x  in let _bit_length, x = Piqirun.parse_required_field 2 parse_bit_length   x  in let _operand_usage, x = Piqirun.parse_required_field 3 parse_operand_usage   x  in let _taint_info, x = Piqirun.parse_required_field 4 parse_taint_info   x  in let _value, x = Piqirun.parse_required_field 5 parse_string   x  in Piqirun.check_unparsed_fields x; {Context.operand_info_specific = _operand_info_specific ;Context.bit_length = _bit_length ;Context.operand_usage = _operand_usage ;Context.taint_info = _taint_info ;Context.value = _value ;}  and parse_exp x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_load x  in `load res | 2 -> let res =   parse_store x  in `store res | 3 -> let res =   parse_binop x  in `binop res | 4 -> let res =   parse_unop x  in `unop res | 5 -> let res =   parse_var x  in `var res | 6 -> let res =   parse_lab x  in `lab res | 7 -> let res =   parse_inte x  in `inte res | 8 -> let res =   parse_cast x  in `cast res | 9 -> let res =   parse_let_expparse_let_exp2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_address x  in `addr res | _ -> Piqirun.error_variant x code  and parse_cast_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and packed_parse_cast_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and parse_binop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and packed_parse_binop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and parse_unop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and packed_parse_unop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and parse_var x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in let _id, x = Piqirun.parse_required_field 2 parse_int   x  in let _typ, x = Piqirun.parse_required_field 3 parse_typ   x  in Piqirun.check_unparsed_fields x; {Var.name = _name ;Var.id = _id ;Var.typ = _typ ;}  and parse_lab x = parse_string x and parse_attribute x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_asm x  in `asm res | 2 -> let res =   parse_address x  in `address res | 3 -> let res =   parse_liveout x  in `liveout res | 4 -> let res =   parse_strattr x  in `strattr res | 5 -> let res =   parse_context x  in `context res | 6 -> let res =   parse_thread_id x  in `thread_id res | 7 -> let res =   parse_synthetic x  in `synthetic res | 8 -> let res =   parse_string x  in `other res | _ -> Piqirun.error_variant x code  and parse_attributes x = Piqirun.parse_list (parse_attribute) x and parse_asm x = parse_string x and parse_address x = parse_int64 x and packed_parse_address x = packed_parse_int64 x and parse_liveout x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Liveout._dummy = ()}  and parse_synthetic x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Synthetic._dummy = ()}  and parse_strattr x = parse_string x and parse_thread_id x = parse_uint64 x and packed_parse_thread_id x = packed_parse_uint64 x and parse_operand_info_specific x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_mem_operand x  in `mem_operand res | 2 -> let res =   parse_reg_operand x  in `reg_operand res | _ -> Piqirun.error_variant x code  and parse_reg_operand x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in Piqirun.check_unparsed_fields x; {Reg_operand.name = _name ;}  and parse_bit_length x = parse_int x and packed_parse_bit_length x = packed_parse_int x and parse_taint_id x = parse_uint64 x and packed_parse_taint_id x = packed_parse_uint64 x and parse_operand_usage x = let x = Piqirun.parse_record x in  let _read, x = Piqirun.parse_required_field 1 parse_bool   x  in let _written, x = Piqirun.parse_required_field 2 parse_bool   x  in let _index, x = Piqirun.parse_required_field 3 parse_bool   x  in let _base, x = Piqirun.parse_required_field 4 parse_bool   x  in Piqirun.check_unparsed_fields x; {Operand_usage.read = _read ;Operand_usage.written = _written ;Operand_usage.index = _index ;Operand_usage.base = _base ;}  and parse_mem_operand x = let x = Piqirun.parse_record x in  let _address, x = Piqirun.parse_required_field 1 parse_address   x  in Piqirun.check_unparsed_fields x; {Mem_operand.address = _address ;}  and parse_taint_info x = let code, x = Piqirun.parse_variant x in  match code with | 1 when x = Piqirun.Varint 1 ->  `no_taint | 2 -> let res =   parse_taint_id x  in `taint_id res | 3 when x = Piqirun.Varint 1 ->  `taint_multiple | _ -> Piqirun.error_variant x code  and parse_context x = let x = Piqirun.parse_record x in  let _operand_info_specific, x = Piqirun.parse_required_field 1 parse_operand_info_specific   x  in let _bit_length, x = Piqirun.parse_required_field 2 parse_bit_length   x  in let _operand_usage, x = Piqirun.parse_required_field 3 parse_operand_usage   x  in let _taint_info, x = Piqirun.parse_required_field 4 parse_taint_info   x  in let _value, x = Piqirun.parse_required_field 5 parse_string   x  in Piqirun.check_unparsed_fields x; {Context.operand_info_specific = _operand_info_specific ;Context.bit_length = _bit_length ;Context.operand_usage = _operand_usage ;Context.taint_info = _taint_info ;Context.value = _value ;}  and parse_exp x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_load x  in `load res | 2 -> let res =   parse_store x  in `store res | 3 -> let res =   parse_binop x  in `binop res | 4 -> let res =   parse_unop x  in `unop res | 5 -> let res =   parse_var x  in `var res | 6 -> let res =   parse_lab x  in `lab res | 7 -> let res =   parse_inte x  in `inte res | 8 -> let res =   parse_cast x  in `cast res | 9 -> let res =   parse_let_exp x  in `let_exp res | 10 -> let res =   parse_unknownparse_unknown2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_address x  in `addr res | _ -> Piqirun.error_variant x code  and parse_cast_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and packed_parse_cast_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and parse_binop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and packed_parse_binop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and parse_unop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and packed_parse_unop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and parse_var x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in let _id, x = Piqirun.parse_required_field 2 parse_int   x  in let _typ, x = Piqirun.parse_required_field 3 parse_typ   x  in Piqirun.check_unparsed_fields x; {Var.name = _name ;Var.id = _id ;Var.typ = _typ ;}  and parse_lab x = parse_string x and parse_attribute x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_asm x  in `asm res | 2 -> let res =   parse_address x  in `address res | 3 -> let res =   parse_liveout x  in `liveout res | 4 -> let res =   parse_strattr x  in `strattr res | 5 -> let res =   parse_context x  in `context res | 6 -> let res =   parse_thread_id x  in `thread_id res | 7 -> let res =   parse_synthetic x  in `synthetic res | 8 -> let res =   parse_string x  in `other res | _ -> Piqirun.error_variant x code  and parse_attributes x = Piqirun.parse_list (parse_attribute) x and parse_asm x = parse_string x and parse_address x = parse_int64 x and packed_parse_address x = packed_parse_int64 x and parse_liveout x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Liveout._dummy = ()}  and parse_synthetic x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Synthetic._dummy = ()}  and parse_strattr x = parse_string x and parse_thread_id x = parse_uint64 x and packed_parse_thread_id x = packed_parse_uint64 x and parse_operand_info_specific x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_mem_operand x  in `mem_operand res | 2 -> let res =   parse_reg_operand x  in `reg_operand res | _ -> Piqirun.error_variant x code  and parse_reg_operand x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in Piqirun.check_unparsed_fields x; {Reg_operand.name = _name ;}  and parse_bit_length x = parse_int x and packed_parse_bit_length x = packed_parse_int x and parse_taint_id x = parse_uint64 x and packed_parse_taint_id x = packed_parse_uint64 x and parse_operand_usage x = let x = Piqirun.parse_record x in  let _read, x = Piqirun.parse_required_field 1 parse_bool   x  in let _written, x = Piqirun.parse_required_field 2 parse_bool   x  in let _index, x = Piqirun.parse_required_field 3 parse_bool   x  in let _base, x = Piqirun.parse_required_field 4 parse_bool   x  in Piqirun.check_unparsed_fields x; {Operand_usage.read = _read ;Operand_usage.written = _written ;Operand_usage.index = _index ;Operand_usage.base = _base ;}  and parse_mem_operand x = let x = Piqirun.parse_record x in  let _address, x = Piqirun.parse_required_field 1 parse_address   x  in Piqirun.check_unparsed_fields x; {Mem_operand.address = _address ;}  and parse_taint_info x = let code, x = Piqirun.parse_variant x in  match code with | 1 when x = Piqirun.Varint 1 ->  `no_taint | 2 -> let res =   parse_taint_id x  in `taint_id res | 3 when x = Piqirun.Varint 1 ->  `taint_multiple | _ -> Piqirun.error_variant x code  and parse_context x = let x = Piqirun.parse_record x in  let _operand_info_specific, x = Piqirun.parse_required_field 1 parse_operand_info_specific   x  in let _bit_length, x = Piqirun.parse_required_field 2 parse_bit_length   x  in let _operand_usage, x = Piqirun.parse_required_field 3 parse_operand_usage   x  in let _taint_info, x = Piqirun.parse_required_field 4 parse_taint_info   x  in let _value, x = Piqirun.parse_required_field 5 parse_string   x  in Piqirun.check_unparsed_fields x; {Context.operand_info_specific = _operand_info_specific ;Context.bit_length = _bit_length ;Context.operand_usage = _operand_usage ;Context.taint_info = _taint_info ;Context.value = _value ;}  and parse_exp x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_load x  in `load res | 2 -> let res =   parse_store x  in `store res | 3 -> let res =   parse_binop x  in `binop res | 4 -> let res =   parse_unop x  in `unop res | 5 -> let res =   parse_var x  in `var res | 6 -> let res =   parse_lab x  in `lab res | 7 -> let res =   parse_inte x  in `inte res | 8 -> let res =   parse_cast x  in `cast res | 9 -> let res =   parse_let_exp x  in `let_exp res | 10 -> let res =   parse_unknown x  in `unknown res | 11 -> let res =   parse_iteparse_ite2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_address x  in `addr res | _ -> Piqirun.error_variant x code  and parse_cast_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and packed_parse_cast_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and parse_binop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and packed_parse_binop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and parse_unop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and packed_parse_unop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and parse_var x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in let _id, x = Piqirun.parse_required_field 2 parse_int   x  in let _typ, x = Piqirun.parse_required_field 3 parse_typ   x  in Piqirun.check_unparsed_fields x; {Var.name = _name ;Var.id = _id ;Var.typ = _typ ;}  and parse_lab x = parse_string x and parse_attribute x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_asm x  in `asm res | 2 -> let res =   parse_address x  in `address res | 3 -> let res =   parse_liveout x  in `liveout res | 4 -> let res =   parse_strattr x  in `strattr res | 5 -> let res =   parse_context x  in `context res | 6 -> let res =   parse_thread_id x  in `thread_id res | 7 -> let res =   parse_synthetic x  in `synthetic res | 8 -> let res =   parse_string x  in `other res | _ -> Piqirun.error_variant x code  and parse_attributes x = Piqirun.parse_list (parse_attribute) x and parse_asm x = parse_string x and parse_address x = parse_int64 x and packed_parse_address x = packed_parse_int64 x and parse_liveout x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Liveout._dummy = ()}  and parse_synthetic x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Synthetic._dummy = ()}  and parse_strattr x = parse_string x and parse_thread_id x = parse_uint64 x and packed_parse_thread_id x = packed_parse_uint64 x and parse_operand_info_specific x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_mem_operand x  in `mem_operand res | 2 -> let res =   parse_reg_operand x  in `reg_operand res | _ -> Piqirun.error_variant x code  and parse_reg_operand x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in Piqirun.check_unparsed_fields x; {Reg_operand.name = _name ;}  and parse_bit_length x = parse_int x and packed_parse_bit_length x = packed_parse_int x and parse_taint_id x = parse_uint64 x and packed_parse_taint_id x = packed_parse_uint64 x and parse_operand_usage x = let x = Piqirun.parse_record x in  let _read, x = Piqirun.parse_required_field 1 parse_bool   x  in let _written, x = Piqirun.parse_required_field 2 parse_bool   x  in let _index, x = Piqirun.parse_required_field 3 parse_bool   x  in let _base, x = Piqirun.parse_required_field 4 parse_bool   x  in Piqirun.check_unparsed_fields x; {Operand_usage.read = _read ;Operand_usage.written = _written ;Operand_usage.index = _index ;Operand_usage.base = _base ;}  and parse_mem_operand x = let x = Piqirun.parse_record x in  let _address, x = Piqirun.parse_required_field 1 parse_address   x  in Piqirun.check_unparsed_fields x; {Mem_operand.address = _address ;}  and parse_taint_info x = let code, x = Piqirun.parse_variant x in  match code with | 1 when x = Piqirun.Varint 1 ->  `no_taint | 2 -> let res =   parse_taint_id x  in `taint_id res | 3 when x = Piqirun.Varint 1 ->  `taint_multiple | _ -> Piqirun.error_variant x code  and parse_context x = let x = Piqirun.parse_record x in  let _operand_info_specific, x = Piqirun.parse_required_field 1 parse_operand_info_specific   x  in let _bit_length, x = Piqirun.parse_required_field 2 parse_bit_length   x  in let _operand_usage, x = Piqirun.parse_required_field 3 parse_operand_usage   x  in let _taint_info, x = Piqirun.parse_required_field 4 parse_taint_info   x  in let _value, x = Piqirun.parse_required_field 5 parse_string   x  in Piqirun.check_unparsed_fields x; {Context.operand_info_specific = _operand_info_specific ;Context.bit_length = _bit_length ;Context.operand_usage = _operand_usage ;Context.taint_info = _taint_info ;Context.value = _value ;}  and parse_exp x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_load x  in `load res | 2 -> let res =   parse_store x  in `store res | 3 -> let res =   parse_binop x  in `binop res | 4 -> let res =   parse_unop x  in `unop res | 5 -> let res =   parse_var x  in `var res | 6 -> let res =   parse_lab x  in `lab res | 7 -> let res =   parse_inte x  in `inte res | 8 -> let res =   parse_cast x  in `cast res | 9 -> let res =   parse_let_exp x  in `let_exp res | 10 -> let res =   parse_unknown x  in `unknown res | 11 -> let res =   parse_ite x  in `ite res | 12 -> let res =   parse_extractparse_extract2,5978
    let rec parse_string x = Piqirun.string_of_block x and parse_int x = Piqirun.int_of_zigzag_varint x and packed_parse_int x = Piqirun.int_of_packed_zigzag_varint x and parse_int64 x = Piqirun.int64_of_zigzag_varint x and packed_parse_int64 x = Piqirun.int64_of_packed_zigzag_varint x and parse_uint64 x = Piqirun.int64_of_varint x and packed_parse_uint64 x = Piqirun.int64_of_packed_varint x and parse_bool x = Piqirun.bool_of_varint x and packed_parse_bool x = Piqirun.bool_of_packed_varint x and parse_program x = Piqirun.parse_list (parse_stmt) x and parse_stmt x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_move x  in `move res | 2 -> let res =   parse_jmp x  in `jmp res | 3 -> let res =   parse_cjmp x  in `cjmp res | 4 -> let res =   parse_label_stmt x  in `label_stmt res | 5 -> let res =   parse_halt x  in `halt res | 6 -> let res =   parse_assert_stmt x  in `assert_stmt res | 7 -> let res =   parse_assume x  in `assume res | 8 -> let res =   parse_comment x  in `comment res | 9 -> let res =   parse_special x  in `special res | _ -> Piqirun.error_variant x code  and parse_move x = let x = Piqirun.parse_record x in  let _var, x = Piqirun.parse_required_field 1 parse_var   x  in let _exp, x = Piqirun.parse_required_field 2 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 3 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Move.var = _var ;Move.exp = _exp ;Move.attributes = _attributes ;}  and parse_jmp x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Jmp.exp = _exp ;Jmp.attributes = _attributes ;}  and parse_cjmp x = let x = Piqirun.parse_record x in  let _cond, x = Piqirun.parse_required_field 1 parse_exp   x  in let _iftrue, x = Piqirun.parse_required_field 2 parse_exp   x  in let _iffalse, x = Piqirun.parse_required_field 3 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 4 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Cjmp.cond = _cond ;Cjmp.iftrue = _iftrue ;Cjmp.iffalse = _iffalse ;Cjmp.attributes = _attributes ;}  and parse_label_stmt x = let x = Piqirun.parse_record x in  let _label, x = Piqirun.parse_required_field 1 parse_label   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Label_stmt.label = _label ;Label_stmt.attributes = _attributes ;}  and parse_halt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Halt.exp = _exp ;Halt.attributes = _attributes ;}  and parse_assert_stmt x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assert_stmt.exp = _exp ;Assert_stmt.attributes = _attributes ;}  and parse_assume x = let x = Piqirun.parse_record x in  let _exp, x = Piqirun.parse_required_field 1 parse_exp   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Assume.exp = _exp ;Assume.attributes = _attributes ;}  and parse_comment x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Comment.string = _string ;Comment.attributes = _attributes ;}  and parse_special x = let x = Piqirun.parse_record x in  let _string, x = Piqirun.parse_required_field 1 parse_string   x  in let _attributes, x = Piqirun.parse_required_field 2 parse_attributes   x  in Piqirun.check_unparsed_fields x; {Special.string = _string ;Special.attributes = _attributes ;}  and parse_typ x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_reg x  in `reg res | 2 -> let res =   parse_tmem x  in `tmem res | 3 -> let res =   parse_array x  in `array res | _ -> Piqirun.error_variant x code  and parse_reg x = parse_int x and packed_parse_reg x = packed_parse_int x and parse_tmem x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in Piqirun.check_unparsed_fields x; {Tmem.index_type = _index_type ;}  and parse_array x = let x = Piqirun.parse_record x in  let _index_type, x = Piqirun.parse_required_field 1 parse_typ   x  in let _element_type, x = Piqirun.parse_required_field 2 parse_typ   x  in Piqirun.check_unparsed_fields x; {Array.index_type = _index_type ;Array.element_type = _element_type ;}  and parse_label x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_string x  in `name res | 2 -> let res =   parse_address x  in `addr res | _ -> Piqirun.error_variant x code  and parse_cast_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and packed_parse_cast_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `cast_unsigned| 2l -> `cast_signed| 3l -> `cast_high| 4l -> `cast_low| x -> Piqirun.error_enum_const x and parse_binop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and packed_parse_binop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `plus| 2l -> `minus| 3l -> `times| 4l -> `divide| 5l -> `sdivide| 6l -> `modbop| 7l -> `smod| 8l -> `lshift| 9l -> `rshift| 10l -> `arshift| 11l -> `andbop| 12l -> `orbop| 13l -> `xor| 14l -> `eq| 15l -> `neq| 16l -> `lt| 17l -> `le| 18l -> `slt| 19l -> `sle| x -> Piqirun.error_enum_const x and parse_unop_type x = match Piqirun.int32_of_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and packed_parse_unop_type x = match Piqirun.int32_of_packed_signed_varint x with | 1l -> `neg| 2l -> `not| x -> Piqirun.error_enum_const x and parse_var x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in let _id, x = Piqirun.parse_required_field 2 parse_int   x  in let _typ, x = Piqirun.parse_required_field 3 parse_typ   x  in Piqirun.check_unparsed_fields x; {Var.name = _name ;Var.id = _id ;Var.typ = _typ ;}  and parse_lab x = parse_string x and parse_attribute x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_asm x  in `asm res | 2 -> let res =   parse_address x  in `address res | 3 -> let res =   parse_liveout x  in `liveout res | 4 -> let res =   parse_strattr x  in `strattr res | 5 -> let res =   parse_context x  in `context res | 6 -> let res =   parse_thread_id x  in `thread_id res | 7 -> let res =   parse_synthetic x  in `synthetic res | 8 -> let res =   parse_string x  in `other res | _ -> Piqirun.error_variant x code  and parse_attributes x = Piqirun.parse_list (parse_attribute) x and parse_asm x = parse_string x and parse_address x = parse_int64 x and packed_parse_address x = packed_parse_int64 x and parse_liveout x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Liveout._dummy = ()}  and parse_synthetic x = let x = Piqirun.parse_record x in  Piqirun.check_unparsed_fields x; {Synthetic._dummy = ()}  and parse_strattr x = parse_string x and parse_thread_id x = parse_uint64 x and packed_parse_thread_id x = packed_parse_uint64 x and parse_operand_info_specific x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_mem_operand x  in `mem_operand res | 2 -> let res =   parse_reg_operand x  in `reg_operand res | _ -> Piqirun.error_variant x code  and parse_reg_operand x = let x = Piqirun.parse_record x in  let _name, x = Piqirun.parse_required_field 1 parse_string   x  in Piqirun.check_unparsed_fields x; {Reg_operand.name = _name ;}  and parse_bit_length x = parse_int x and packed_parse_bit_length x = packed_parse_int x and parse_taint_id x = parse_uint64 x and packed_parse_taint_id x = packed_parse_uint64 x and parse_operand_usage x = let x = Piqirun.parse_record x in  let _read, x = Piqirun.parse_required_field 1 parse_bool   x  in let _written, x = Piqirun.parse_required_field 2 parse_bool   x  in let _index, x = Piqirun.parse_required_field 3 parse_bool   x  in let _base, x = Piqirun.parse_required_field 4 parse_bool   x  in Piqirun.check_unparsed_fields x; {Operand_usage.read = _read ;Operand_usage.written = _written ;Operand_usage.index = _index ;Operand_usage.base = _base ;}  and parse_mem_operand x = let x = Piqirun.parse_record x in  let _address, x = Piqirun.parse_required_field 1 parse_address   x  in Piqirun.check_unparsed_fields x; {Mem_operand.address = _address ;}  and parse_taint_info x = let code, x = Piqirun.parse_variant x in  match code with | 1 when x = Piqirun.Varint 1 ->  `no_taint | 2 -> let res =   parse_taint_id x  in `taint_id res | 3 when x = Piqirun.Varint 1 ->  `taint_multiple | _ -> Piqirun.error_variant x code  and parse_context x = let x = Piqirun.parse_record x in  let _operand_info_specific, x = Piqirun.parse_required_field 1 parse_operand_info_specific   x  in let _bit_length, x = Piqirun.parse_required_field 2 parse_bit_length   x  in let _operand_usage, x = Piqirun.parse_required_field 3 parse_operand_usage   x  in let _taint_info, x = Piqirun.parse_required_field 4 parse_taint_info   x  in let _value, x = Piqirun.parse_required_field 5 parse_string   x  in Piqirun.check_unparsed_fields x; {Context.operand_info_specific = _operand_info_specific ;Context.bit_length = _bit_length ;Context.operand_usage = _operand_usage ;Context.taint_info = _taint_info ;Context.value = _value ;}  and parse_exp x = let code, x = Piqirun.parse_variant x in  match code with | 1 -> let res =   parse_load x  in `load res | 2 -> let res =   parse_store x  in `store res | 3 -> let res =   parse_binop x  in `binop res | 4 -> let res =   parse_unop x  in `unop res | 5 -> let res =   parse_var x  in `var res | 6 -> let res =   parse_lab x  in `lab res | 7 -> let res =   parse_inte x  in `inte res | 8 -> let res =   parse_cast x  in `cast res | 9 -> let res =   parse_let_exp x  in `let_exp res | 10 -> let res =   parse_unknown x  in `unknown res | 11 -> let res =   parse_ite x  in `ite res | 12 -> let res =   parse_extract x  in `extract res | 13 -> let res =   parse_concatparse_concat2,5978
     let rec gen__stringgen__string3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__intgen__int3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__intpacked_gen__int3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64gen__int643,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64packed_gen__int643,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64gen__uint643,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64packed_gen__uint643,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__boolgen__bool3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__boolpacked_gen__bool3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__programgen__program3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmtgen__stmt3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__movegen__move3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmpgen__jmp3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmpgen__cjmp3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmtgen__label_stmt3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__haltgen__halt3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmtgen__assert_stmt3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assumegen__assume3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__commentgen__comment3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__specialgen__special3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typgen__typ3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reggen__reg3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__regpacked_gen__reg3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmemgen__tmem3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__arraygen__array3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__labelgen__label3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__address 2 x )] and gen__cast_typegen__cast_type3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__address 2 x )] and gen__cast_type code x = Piqirun.int32_to_signed_varint code (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and packed_gen__cast_typepacked_gen__cast_type3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__address 2 x )] and gen__cast_type code x = Piqirun.int32_to_signed_varint code (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and packed_gen__cast_type x = Piqirun.int32_to_packed_signed_varint (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and gen__binop_typegen__binop_type3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__address 2 x )] and gen__cast_type code x = Piqirun.int32_to_signed_varint code (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and packed_gen__cast_type x = Piqirun.int32_to_packed_signed_varint (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and gen__binop_type code x = Piqirun.int32_to_signed_varint code (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and packed_gen__binop_typepacked_gen__binop_type3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__address 2 x )] and gen__cast_type code x = Piqirun.int32_to_signed_varint code (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and packed_gen__cast_type x = Piqirun.int32_to_packed_signed_varint (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and gen__binop_type code x = Piqirun.int32_to_signed_varint code (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and packed_gen__binop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and gen__unop_typegen__unop_type3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__address 2 x )] and gen__cast_type code x = Piqirun.int32_to_signed_varint code (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and packed_gen__cast_type x = Piqirun.int32_to_packed_signed_varint (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and gen__binop_type code x = Piqirun.int32_to_signed_varint code (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and packed_gen__binop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and gen__unop_type code x = Piqirun.int32_to_signed_varint code (match x with | `neg -> 1l| `not -> 2l) and packed_gen__unop_typepacked_gen__unop_type3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__vargen__var3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__labgen__lab3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributegen__attribute3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributesgen__attributes3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__address 2 x )] and gen__cast_type code x = Piqirun.int32_to_signed_varint code (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and packed_gen__cast_type x = Piqirun.int32_to_packed_signed_varint (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and gen__binop_type code x = Piqirun.int32_to_signed_varint code (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and packed_gen__binop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and gen__unop_type code x = Piqirun.int32_to_signed_varint code (match x with | `neg -> 1l| `not -> 2l) and packed_gen__unop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `neg -> 1l| `not -> 2l) and gen__var code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Var.name in let _id = Piqirun.gen_required_field 2 gen__int x.Var.id in let _typ = Piqirun.gen_required_field 3 gen__typ x.Var.typ in  Piqirun.gen_record code [ _name;_id;_typ ] and gen__lab code x = gen__string code x and gen__attribute code (x:Stmt_piqi.attribute) =  Piqirun.gen_record code [(match x with | `asm x -> gen__asmgen__asm3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__addressgen__address3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__address 2 x )] and gen__cast_type code x = Piqirun.int32_to_signed_varint code (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and packed_gen__cast_type x = Piqirun.int32_to_packed_signed_varint (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and gen__binop_type code x = Piqirun.int32_to_signed_varint code (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and packed_gen__binop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and gen__unop_type code x = Piqirun.int32_to_signed_varint code (match x with | `neg -> 1l| `not -> 2l) and packed_gen__unop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `neg -> 1l| `not -> 2l) and gen__var code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Var.name in let _id = Piqirun.gen_required_field 2 gen__int x.Var.id in let _typ = Piqirun.gen_required_field 3 gen__typ x.Var.typ in  Piqirun.gen_record code [ _name;_id;_typ ] and gen__lab code x = gen__string code x and gen__attribute code (x:Stmt_piqi.attribute) =  Piqirun.gen_record code [(match x with | `asm x -> gen__asm 1 x| `address x -> gen__address 2 x| `liveout x -> gen__liveout 3 x| `strattr x -> gen__strattr 4 x| `context x -> gen__context 5 x| `thread_id x -> gen__thread_id 6 x| `synthetic x -> gen__synthetic 7 x| `other x -> gen__string 8 x )] and gen__attributes code x = (Piqirun.gen_list (gen__attribute)) code x and gen__asm code x = gen__string code x and gen__address code x = gen__int64 code x and packed_gen__addresspacked_gen__address3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__address 2 x )] and gen__cast_type code x = Piqirun.int32_to_signed_varint code (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and packed_gen__cast_type x = Piqirun.int32_to_packed_signed_varint (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and gen__binop_type code x = Piqirun.int32_to_signed_varint code (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and packed_gen__binop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and gen__unop_type code x = Piqirun.int32_to_signed_varint code (match x with | `neg -> 1l| `not -> 2l) and packed_gen__unop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `neg -> 1l| `not -> 2l) and gen__var code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Var.name in let _id = Piqirun.gen_required_field 2 gen__int x.Var.id in let _typ = Piqirun.gen_required_field 3 gen__typ x.Var.typ in  Piqirun.gen_record code [ _name;_id;_typ ] and gen__lab code x = gen__string code x and gen__attribute code (x:Stmt_piqi.attribute) =  Piqirun.gen_record code [(match x with | `asm x -> gen__asm 1 x| `address x -> gen__address 2 x| `liveout x -> gen__liveoutgen__liveout3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__address 2 x )] and gen__cast_type code x = Piqirun.int32_to_signed_varint code (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and packed_gen__cast_type x = Piqirun.int32_to_packed_signed_varint (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and gen__binop_type code x = Piqirun.int32_to_signed_varint code (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and packed_gen__binop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and gen__unop_type code x = Piqirun.int32_to_signed_varint code (match x with | `neg -> 1l| `not -> 2l) and packed_gen__unop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `neg -> 1l| `not -> 2l) and gen__var code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Var.name in let _id = Piqirun.gen_required_field 2 gen__int x.Var.id in let _typ = Piqirun.gen_required_field 3 gen__typ x.Var.typ in  Piqirun.gen_record code [ _name;_id;_typ ] and gen__lab code x = gen__string code x and gen__attribute code (x:Stmt_piqi.attribute) =  Piqirun.gen_record code [(match x with | `asm x -> gen__asm 1 x| `address x -> gen__address 2 x| `liveout x -> gen__liveout 3 x| `strattr x -> gen__strattr 4 x| `context x -> gen__context 5 x| `thread_id x -> gen__thread_id 6 x| `synthetic x -> gen__syntheticgen__synthetic3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__address 2 x )] and gen__cast_type code x = Piqirun.int32_to_signed_varint code (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and packed_gen__cast_type x = Piqirun.int32_to_packed_signed_varint (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and gen__binop_type code x = Piqirun.int32_to_signed_varint code (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and packed_gen__binop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and gen__unop_type code x = Piqirun.int32_to_signed_varint code (match x with | `neg -> 1l| `not -> 2l) and packed_gen__unop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `neg -> 1l| `not -> 2l) and gen__var code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Var.name in let _id = Piqirun.gen_required_field 2 gen__int x.Var.id in let _typ = Piqirun.gen_required_field 3 gen__typ x.Var.typ in  Piqirun.gen_record code [ _name;_id;_typ ] and gen__lab code x = gen__string code x and gen__attribute code (x:Stmt_piqi.attribute) =  Piqirun.gen_record code [(match x with | `asm x -> gen__asm 1 x| `address x -> gen__address 2 x| `liveout x -> gen__liveout 3 x| `strattr x -> gen__strattrgen__strattr3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__address 2 x )] and gen__cast_type code x = Piqirun.int32_to_signed_varint code (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and packed_gen__cast_type x = Piqirun.int32_to_packed_signed_varint (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and gen__binop_type code x = Piqirun.int32_to_signed_varint code (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and packed_gen__binop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and gen__unop_type code x = Piqirun.int32_to_signed_varint code (match x with | `neg -> 1l| `not -> 2l) and packed_gen__unop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `neg -> 1l| `not -> 2l) and gen__var code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Var.name in let _id = Piqirun.gen_required_field 2 gen__int x.Var.id in let _typ = Piqirun.gen_required_field 3 gen__typ x.Var.typ in  Piqirun.gen_record code [ _name;_id;_typ ] and gen__lab code x = gen__string code x and gen__attribute code (x:Stmt_piqi.attribute) =  Piqirun.gen_record code [(match x with | `asm x -> gen__asm 1 x| `address x -> gen__address 2 x| `liveout x -> gen__liveout 3 x| `strattr x -> gen__strattr 4 x| `context x -> gen__context 5 x| `thread_id x -> gen__thread_idgen__thread_id3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__address 2 x )] and gen__cast_type code x = Piqirun.int32_to_signed_varint code (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and packed_gen__cast_type x = Piqirun.int32_to_packed_signed_varint (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and gen__binop_type code x = Piqirun.int32_to_signed_varint code (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and packed_gen__binop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and gen__unop_type code x = Piqirun.int32_to_signed_varint code (match x with | `neg -> 1l| `not -> 2l) and packed_gen__unop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `neg -> 1l| `not -> 2l) and gen__var code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Var.name in let _id = Piqirun.gen_required_field 2 gen__int x.Var.id in let _typ = Piqirun.gen_required_field 3 gen__typ x.Var.typ in  Piqirun.gen_record code [ _name;_id;_typ ] and gen__lab code x = gen__string code x and gen__attribute code (x:Stmt_piqi.attribute) =  Piqirun.gen_record code [(match x with | `asm x -> gen__asm 1 x| `address x -> gen__address 2 x| `liveout x -> gen__liveout 3 x| `strattr x -> gen__strattr 4 x| `context x -> gen__context 5 x| `thread_id x -> gen__thread_id 6 x| `synthetic x -> gen__synthetic 7 x| `other x -> gen__string 8 x )] and gen__attributes code x = (Piqirun.gen_list (gen__attribute)) code x and gen__asm code x = gen__string code x and gen__address code x = gen__int64 code x and packed_gen__address x = packed_gen__int64 x and gen__liveout code x =   Piqirun.gen_record code [  ] and gen__synthetic code x =   Piqirun.gen_record code [  ] and gen__strattr code x = gen__string code x and gen__thread_id code x = gen__uint64 code x and packed_gen__thread_idpacked_gen__thread_id3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__address 2 x )] and gen__cast_type code x = Piqirun.int32_to_signed_varint code (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and packed_gen__cast_type x = Piqirun.int32_to_packed_signed_varint (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and gen__binop_type code x = Piqirun.int32_to_signed_varint code (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and packed_gen__binop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and gen__unop_type code x = Piqirun.int32_to_signed_varint code (match x with | `neg -> 1l| `not -> 2l) and packed_gen__unop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `neg -> 1l| `not -> 2l) and gen__var code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Var.name in let _id = Piqirun.gen_required_field 2 gen__int x.Var.id in let _typ = Piqirun.gen_required_field 3 gen__typ x.Var.typ in  Piqirun.gen_record code [ _name;_id;_typ ] and gen__lab code x = gen__string code x and gen__attribute code (x:Stmt_piqi.attribute) =  Piqirun.gen_record code [(match x with | `asm x -> gen__asm 1 x| `address x -> gen__address 2 x| `liveout x -> gen__liveout 3 x| `strattr x -> gen__strattr 4 x| `context x -> gen__context 5 x| `thread_id x -> gen__thread_id 6 x| `synthetic x -> gen__synthetic 7 x| `other x -> gen__string 8 x )] and gen__attributes code x = (Piqirun.gen_list (gen__attribute)) code x and gen__asm code x = gen__string code x and gen__address code x = gen__int64 code x and packed_gen__address x = packed_gen__int64 x and gen__liveout code x =   Piqirun.gen_record code [  ] and gen__synthetic code x =   Piqirun.gen_record code [  ] and gen__strattr code x = gen__string code x and gen__thread_id code x = gen__uint64 code x and packed_gen__thread_id x = packed_gen__uint64 x and gen__operand_info_specificgen__operand_info_specific3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__address 2 x )] and gen__cast_type code x = Piqirun.int32_to_signed_varint code (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and packed_gen__cast_type x = Piqirun.int32_to_packed_signed_varint (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and gen__binop_type code x = Piqirun.int32_to_signed_varint code (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and packed_gen__binop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and gen__unop_type code x = Piqirun.int32_to_signed_varint code (match x with | `neg -> 1l| `not -> 2l) and packed_gen__unop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `neg -> 1l| `not -> 2l) and gen__var code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Var.name in let _id = Piqirun.gen_required_field 2 gen__int x.Var.id in let _typ = Piqirun.gen_required_field 3 gen__typ x.Var.typ in  Piqirun.gen_record code [ _name;_id;_typ ] and gen__lab code x = gen__string code x and gen__attribute code (x:Stmt_piqi.attribute) =  Piqirun.gen_record code [(match x with | `asm x -> gen__asm 1 x| `address x -> gen__address 2 x| `liveout x -> gen__liveout 3 x| `strattr x -> gen__strattr 4 x| `context x -> gen__context 5 x| `thread_id x -> gen__thread_id 6 x| `synthetic x -> gen__synthetic 7 x| `other x -> gen__string 8 x )] and gen__attributes code x = (Piqirun.gen_list (gen__attribute)) code x and gen__asm code x = gen__string code x and gen__address code x = gen__int64 code x and packed_gen__address x = packed_gen__int64 x and gen__liveout code x =   Piqirun.gen_record code [  ] and gen__synthetic code x =   Piqirun.gen_record code [  ] and gen__strattr code x = gen__string code x and gen__thread_id code x = gen__uint64 code x and packed_gen__thread_id x = packed_gen__uint64 x and gen__operand_info_specific code (x:Stmt_piqi.operand_info_specific) =  Piqirun.gen_record code [(match x with | `mem_operand x -> gen__mem_operand 1 x| `reg_operand x -> gen__reg_operandgen__reg_operand3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__address 2 x )] and gen__cast_type code x = Piqirun.int32_to_signed_varint code (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and packed_gen__cast_type x = Piqirun.int32_to_packed_signed_varint (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and gen__binop_type code x = Piqirun.int32_to_signed_varint code (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and packed_gen__binop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and gen__unop_type code x = Piqirun.int32_to_signed_varint code (match x with | `neg -> 1l| `not -> 2l) and packed_gen__unop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `neg -> 1l| `not -> 2l) and gen__var code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Var.name in let _id = Piqirun.gen_required_field 2 gen__int x.Var.id in let _typ = Piqirun.gen_required_field 3 gen__typ x.Var.typ in  Piqirun.gen_record code [ _name;_id;_typ ] and gen__lab code x = gen__string code x and gen__attribute code (x:Stmt_piqi.attribute) =  Piqirun.gen_record code [(match x with | `asm x -> gen__asm 1 x| `address x -> gen__address 2 x| `liveout x -> gen__liveout 3 x| `strattr x -> gen__strattr 4 x| `context x -> gen__context 5 x| `thread_id x -> gen__thread_id 6 x| `synthetic x -> gen__synthetic 7 x| `other x -> gen__string 8 x )] and gen__attributes code x = (Piqirun.gen_list (gen__attribute)) code x and gen__asm code x = gen__string code x and gen__address code x = gen__int64 code x and packed_gen__address x = packed_gen__int64 x and gen__liveout code x =   Piqirun.gen_record code [  ] and gen__synthetic code x =   Piqirun.gen_record code [  ] and gen__strattr code x = gen__string code x and gen__thread_id code x = gen__uint64 code x and packed_gen__thread_id x = packed_gen__uint64 x and gen__operand_info_specific code (x:Stmt_piqi.operand_info_specific) =  Piqirun.gen_record code [(match x with | `mem_operand x -> gen__mem_operand 1 x| `reg_operand x -> gen__reg_operand 2 x )] and gen__reg_operand code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Reg_operand.name in  Piqirun.gen_record code [ _name ] and gen__bit_lengthgen__bit_length3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__address 2 x )] and gen__cast_type code x = Piqirun.int32_to_signed_varint code (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and packed_gen__cast_type x = Piqirun.int32_to_packed_signed_varint (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and gen__binop_type code x = Piqirun.int32_to_signed_varint code (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and packed_gen__binop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and gen__unop_type code x = Piqirun.int32_to_signed_varint code (match x with | `neg -> 1l| `not -> 2l) and packed_gen__unop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `neg -> 1l| `not -> 2l) and gen__var code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Var.name in let _id = Piqirun.gen_required_field 2 gen__int x.Var.id in let _typ = Piqirun.gen_required_field 3 gen__typ x.Var.typ in  Piqirun.gen_record code [ _name;_id;_typ ] and gen__lab code x = gen__string code x and gen__attribute code (x:Stmt_piqi.attribute) =  Piqirun.gen_record code [(match x with | `asm x -> gen__asm 1 x| `address x -> gen__address 2 x| `liveout x -> gen__liveout 3 x| `strattr x -> gen__strattr 4 x| `context x -> gen__context 5 x| `thread_id x -> gen__thread_id 6 x| `synthetic x -> gen__synthetic 7 x| `other x -> gen__string 8 x )] and gen__attributes code x = (Piqirun.gen_list (gen__attribute)) code x and gen__asm code x = gen__string code x and gen__address code x = gen__int64 code x and packed_gen__address x = packed_gen__int64 x and gen__liveout code x =   Piqirun.gen_record code [  ] and gen__synthetic code x =   Piqirun.gen_record code [  ] and gen__strattr code x = gen__string code x and gen__thread_id code x = gen__uint64 code x and packed_gen__thread_id x = packed_gen__uint64 x and gen__operand_info_specific code (x:Stmt_piqi.operand_info_specific) =  Piqirun.gen_record code [(match x with | `mem_operand x -> gen__mem_operand 1 x| `reg_operand x -> gen__reg_operand 2 x )] and gen__reg_operand code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Reg_operand.name in  Piqirun.gen_record code [ _name ] and gen__bit_length code x = gen__int code x and packed_gen__bit_lengthpacked_gen__bit_length3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__address 2 x )] and gen__cast_type code x = Piqirun.int32_to_signed_varint code (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and packed_gen__cast_type x = Piqirun.int32_to_packed_signed_varint (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and gen__binop_type code x = Piqirun.int32_to_signed_varint code (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and packed_gen__binop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and gen__unop_type code x = Piqirun.int32_to_signed_varint code (match x with | `neg -> 1l| `not -> 2l) and packed_gen__unop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `neg -> 1l| `not -> 2l) and gen__var code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Var.name in let _id = Piqirun.gen_required_field 2 gen__int x.Var.id in let _typ = Piqirun.gen_required_field 3 gen__typ x.Var.typ in  Piqirun.gen_record code [ _name;_id;_typ ] and gen__lab code x = gen__string code x and gen__attribute code (x:Stmt_piqi.attribute) =  Piqirun.gen_record code [(match x with | `asm x -> gen__asm 1 x| `address x -> gen__address 2 x| `liveout x -> gen__liveout 3 x| `strattr x -> gen__strattr 4 x| `context x -> gen__context 5 x| `thread_id x -> gen__thread_id 6 x| `synthetic x -> gen__synthetic 7 x| `other x -> gen__string 8 x )] and gen__attributes code x = (Piqirun.gen_list (gen__attribute)) code x and gen__asm code x = gen__string code x and gen__address code x = gen__int64 code x and packed_gen__address x = packed_gen__int64 x and gen__liveout code x =   Piqirun.gen_record code [  ] and gen__synthetic code x =   Piqirun.gen_record code [  ] and gen__strattr code x = gen__string code x and gen__thread_id code x = gen__uint64 code x and packed_gen__thread_id x = packed_gen__uint64 x and gen__operand_info_specific code (x:Stmt_piqi.operand_info_specific) =  Piqirun.gen_record code [(match x with | `mem_operand x -> gen__mem_operand 1 x| `reg_operand x -> gen__reg_operand 2 x )] and gen__reg_operand code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Reg_operand.name in  Piqirun.gen_record code [ _name ] and gen__bit_length code x = gen__int code x and packed_gen__bit_length x = packed_gen__int x and gen__taint_idgen__taint_id3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__address 2 x )] and gen__cast_type code x = Piqirun.int32_to_signed_varint code (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and packed_gen__cast_type x = Piqirun.int32_to_packed_signed_varint (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and gen__binop_type code x = Piqirun.int32_to_signed_varint code (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and packed_gen__binop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and gen__unop_type code x = Piqirun.int32_to_signed_varint code (match x with | `neg -> 1l| `not -> 2l) and packed_gen__unop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `neg -> 1l| `not -> 2l) and gen__var code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Var.name in let _id = Piqirun.gen_required_field 2 gen__int x.Var.id in let _typ = Piqirun.gen_required_field 3 gen__typ x.Var.typ in  Piqirun.gen_record code [ _name;_id;_typ ] and gen__lab code x = gen__string code x and gen__attribute code (x:Stmt_piqi.attribute) =  Piqirun.gen_record code [(match x with | `asm x -> gen__asm 1 x| `address x -> gen__address 2 x| `liveout x -> gen__liveout 3 x| `strattr x -> gen__strattr 4 x| `context x -> gen__context 5 x| `thread_id x -> gen__thread_id 6 x| `synthetic x -> gen__synthetic 7 x| `other x -> gen__string 8 x )] and gen__attributes code x = (Piqirun.gen_list (gen__attribute)) code x and gen__asm code x = gen__string code x and gen__address code x = gen__int64 code x and packed_gen__address x = packed_gen__int64 x and gen__liveout code x =   Piqirun.gen_record code [  ] and gen__synthetic code x =   Piqirun.gen_record code [  ] and gen__strattr code x = gen__string code x and gen__thread_id code x = gen__uint64 code x and packed_gen__thread_id x = packed_gen__uint64 x and gen__operand_info_specific code (x:Stmt_piqi.operand_info_specific) =  Piqirun.gen_record code [(match x with | `mem_operand x -> gen__mem_operand 1 x| `reg_operand x -> gen__reg_operand 2 x )] and gen__reg_operand code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Reg_operand.name in  Piqirun.gen_record code [ _name ] and gen__bit_length code x = gen__int code x and packed_gen__bit_length x = packed_gen__int x and gen__taint_id code x = gen__uint64 code x and packed_gen__taint_idpacked_gen__taint_id3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__address 2 x )] and gen__cast_type code x = Piqirun.int32_to_signed_varint code (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and packed_gen__cast_type x = Piqirun.int32_to_packed_signed_varint (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and gen__binop_type code x = Piqirun.int32_to_signed_varint code (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and packed_gen__binop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and gen__unop_type code x = Piqirun.int32_to_signed_varint code (match x with | `neg -> 1l| `not -> 2l) and packed_gen__unop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `neg -> 1l| `not -> 2l) and gen__var code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Var.name in let _id = Piqirun.gen_required_field 2 gen__int x.Var.id in let _typ = Piqirun.gen_required_field 3 gen__typ x.Var.typ in  Piqirun.gen_record code [ _name;_id;_typ ] and gen__lab code x = gen__string code x and gen__attribute code (x:Stmt_piqi.attribute) =  Piqirun.gen_record code [(match x with | `asm x -> gen__asm 1 x| `address x -> gen__address 2 x| `liveout x -> gen__liveout 3 x| `strattr x -> gen__strattr 4 x| `context x -> gen__context 5 x| `thread_id x -> gen__thread_id 6 x| `synthetic x -> gen__synthetic 7 x| `other x -> gen__string 8 x )] and gen__attributes code x = (Piqirun.gen_list (gen__attribute)) code x and gen__asm code x = gen__string code x and gen__address code x = gen__int64 code x and packed_gen__address x = packed_gen__int64 x and gen__liveout code x =   Piqirun.gen_record code [  ] and gen__synthetic code x =   Piqirun.gen_record code [  ] and gen__strattr code x = gen__string code x and gen__thread_id code x = gen__uint64 code x and packed_gen__thread_id x = packed_gen__uint64 x and gen__operand_info_specific code (x:Stmt_piqi.operand_info_specific) =  Piqirun.gen_record code [(match x with | `mem_operand x -> gen__mem_operand 1 x| `reg_operand x -> gen__reg_operand 2 x )] and gen__reg_operand code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Reg_operand.name in  Piqirun.gen_record code [ _name ] and gen__bit_length code x = gen__int code x and packed_gen__bit_length x = packed_gen__int x and gen__taint_id code x = gen__uint64 code x and packed_gen__taint_id x = packed_gen__uint64 x and gen__operand_usagegen__operand_usage3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__address 2 x )] and gen__cast_type code x = Piqirun.int32_to_signed_varint code (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and packed_gen__cast_type x = Piqirun.int32_to_packed_signed_varint (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and gen__binop_type code x = Piqirun.int32_to_signed_varint code (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and packed_gen__binop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and gen__unop_type code x = Piqirun.int32_to_signed_varint code (match x with | `neg -> 1l| `not -> 2l) and packed_gen__unop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `neg -> 1l| `not -> 2l) and gen__var code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Var.name in let _id = Piqirun.gen_required_field 2 gen__int x.Var.id in let _typ = Piqirun.gen_required_field 3 gen__typ x.Var.typ in  Piqirun.gen_record code [ _name;_id;_typ ] and gen__lab code x = gen__string code x and gen__attribute code (x:Stmt_piqi.attribute) =  Piqirun.gen_record code [(match x with | `asm x -> gen__asm 1 x| `address x -> gen__address 2 x| `liveout x -> gen__liveout 3 x| `strattr x -> gen__strattr 4 x| `context x -> gen__context 5 x| `thread_id x -> gen__thread_id 6 x| `synthetic x -> gen__synthetic 7 x| `other x -> gen__string 8 x )] and gen__attributes code x = (Piqirun.gen_list (gen__attribute)) code x and gen__asm code x = gen__string code x and gen__address code x = gen__int64 code x and packed_gen__address x = packed_gen__int64 x and gen__liveout code x =   Piqirun.gen_record code [  ] and gen__synthetic code x =   Piqirun.gen_record code [  ] and gen__strattr code x = gen__string code x and gen__thread_id code x = gen__uint64 code x and packed_gen__thread_id x = packed_gen__uint64 x and gen__operand_info_specific code (x:Stmt_piqi.operand_info_specific) =  Piqirun.gen_record code [(match x with | `mem_operand x -> gen__mem_operandgen__mem_operand3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__address 2 x )] and gen__cast_type code x = Piqirun.int32_to_signed_varint code (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and packed_gen__cast_type x = Piqirun.int32_to_packed_signed_varint (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and gen__binop_type code x = Piqirun.int32_to_signed_varint code (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and packed_gen__binop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and gen__unop_type code x = Piqirun.int32_to_signed_varint code (match x with | `neg -> 1l| `not -> 2l) and packed_gen__unop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `neg -> 1l| `not -> 2l) and gen__var code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Var.name in let _id = Piqirun.gen_required_field 2 gen__int x.Var.id in let _typ = Piqirun.gen_required_field 3 gen__typ x.Var.typ in  Piqirun.gen_record code [ _name;_id;_typ ] and gen__lab code x = gen__string code x and gen__attribute code (x:Stmt_piqi.attribute) =  Piqirun.gen_record code [(match x with | `asm x -> gen__asm 1 x| `address x -> gen__address 2 x| `liveout x -> gen__liveout 3 x| `strattr x -> gen__strattr 4 x| `context x -> gen__context 5 x| `thread_id x -> gen__thread_id 6 x| `synthetic x -> gen__synthetic 7 x| `other x -> gen__string 8 x )] and gen__attributes code x = (Piqirun.gen_list (gen__attribute)) code x and gen__asm code x = gen__string code x and gen__address code x = gen__int64 code x and packed_gen__address x = packed_gen__int64 x and gen__liveout code x =   Piqirun.gen_record code [  ] and gen__synthetic code x =   Piqirun.gen_record code [  ] and gen__strattr code x = gen__string code x and gen__thread_id code x = gen__uint64 code x and packed_gen__thread_id x = packed_gen__uint64 x and gen__operand_info_specific code (x:Stmt_piqi.operand_info_specific) =  Piqirun.gen_record code [(match x with | `mem_operand x -> gen__mem_operand 1 x| `reg_operand x -> gen__reg_operand 2 x )] and gen__reg_operand code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Reg_operand.name in  Piqirun.gen_record code [ _name ] and gen__bit_length code x = gen__int code x and packed_gen__bit_length x = packed_gen__int x and gen__taint_id code x = gen__uint64 code x and packed_gen__taint_id x = packed_gen__uint64 x and gen__operand_usage code x =  let _read = Piqirun.gen_required_field 1 gen__bool x.Operand_usage.read in let _written = Piqirun.gen_required_field 2 gen__bool x.Operand_usage.written in let _index = Piqirun.gen_required_field 3 gen__bool x.Operand_usage.index in let _base = Piqirun.gen_required_field 4 gen__bool x.Operand_usage.base in  Piqirun.gen_record code [ _read;_written;_index;_base ] and gen__mem_operand code x =  let _address = Piqirun.gen_required_field 1 gen__address x.Mem_operand.address in  Piqirun.gen_record code [ _address ] and gen__taint_infogen__taint_info3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__address 2 x )] and gen__cast_type code x = Piqirun.int32_to_signed_varint code (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and packed_gen__cast_type x = Piqirun.int32_to_packed_signed_varint (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and gen__binop_type code x = Piqirun.int32_to_signed_varint code (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and packed_gen__binop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and gen__unop_type code x = Piqirun.int32_to_signed_varint code (match x with | `neg -> 1l| `not -> 2l) and packed_gen__unop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `neg -> 1l| `not -> 2l) and gen__var code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Var.name in let _id = Piqirun.gen_required_field 2 gen__int x.Var.id in let _typ = Piqirun.gen_required_field 3 gen__typ x.Var.typ in  Piqirun.gen_record code [ _name;_id;_typ ] and gen__lab code x = gen__string code x and gen__attribute code (x:Stmt_piqi.attribute) =  Piqirun.gen_record code [(match x with | `asm x -> gen__asm 1 x| `address x -> gen__address 2 x| `liveout x -> gen__liveout 3 x| `strattr x -> gen__strattr 4 x| `context x -> gen__contextgen__context3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__expgen__exp3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__address 2 x )] and gen__cast_type code x = Piqirun.int32_to_signed_varint code (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and packed_gen__cast_type x = Piqirun.int32_to_packed_signed_varint (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and gen__binop_type code x = Piqirun.int32_to_signed_varint code (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and packed_gen__binop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and gen__unop_type code x = Piqirun.int32_to_signed_varint code (match x with | `neg -> 1l| `not -> 2l) and packed_gen__unop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `neg -> 1l| `not -> 2l) and gen__var code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Var.name in let _id = Piqirun.gen_required_field 2 gen__int x.Var.id in let _typ = Piqirun.gen_required_field 3 gen__typ x.Var.typ in  Piqirun.gen_record code [ _name;_id;_typ ] and gen__lab code x = gen__string code x and gen__attribute code (x:Stmt_piqi.attribute) =  Piqirun.gen_record code [(match x with | `asm x -> gen__asm 1 x| `address x -> gen__address 2 x| `liveout x -> gen__liveout 3 x| `strattr x -> gen__strattr 4 x| `context x -> gen__context 5 x| `thread_id x -> gen__thread_id 6 x| `synthetic x -> gen__synthetic 7 x| `other x -> gen__string 8 x )] and gen__attributes code x = (Piqirun.gen_list (gen__attribute)) code x and gen__asm code x = gen__string code x and gen__address code x = gen__int64 code x and packed_gen__address x = packed_gen__int64 x and gen__liveout code x =   Piqirun.gen_record code [  ] and gen__synthetic code x =   Piqirun.gen_record code [  ] and gen__strattr code x = gen__string code x and gen__thread_id code x = gen__uint64 code x and packed_gen__thread_id x = packed_gen__uint64 x and gen__operand_info_specific code (x:Stmt_piqi.operand_info_specific) =  Piqirun.gen_record code [(match x with | `mem_operand x -> gen__mem_operand 1 x| `reg_operand x -> gen__reg_operand 2 x )] and gen__reg_operand code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Reg_operand.name in  Piqirun.gen_record code [ _name ] and gen__bit_length code x = gen__int code x and packed_gen__bit_length x = packed_gen__int x and gen__taint_id code x = gen__uint64 code x and packed_gen__taint_id x = packed_gen__uint64 x and gen__operand_usage code x =  let _read = Piqirun.gen_required_field 1 gen__bool x.Operand_usage.read in let _written = Piqirun.gen_required_field 2 gen__bool x.Operand_usage.written in let _index = Piqirun.gen_required_field 3 gen__bool x.Operand_usage.index in let _base = Piqirun.gen_required_field 4 gen__bool x.Operand_usage.base in  Piqirun.gen_record code [ _read;_written;_index;_base ] and gen__mem_operand code x =  let _address = Piqirun.gen_required_field 1 gen__address x.Mem_operand.address in  Piqirun.gen_record code [ _address ] and gen__taint_info code (x:Stmt_piqi.taint_info) =  Piqirun.gen_record code [(match x with | `no_taint ->  Piqirun.gen_bool_field 1 true| `taint_id x -> gen__taint_id 2 x| `taint_multiple ->  Piqirun.gen_bool_field 3 true )] and gen__context code x =  let _operand_info_specific = Piqirun.gen_required_field 1 gen__operand_info_specific x.Context.operand_info_specific in let _bit_length = Piqirun.gen_required_field 2 gen__bit_length x.Context.bit_length in let _operand_usage = Piqirun.gen_required_field 3 gen__operand_usage x.Context.operand_usage in let _taint_info = Piqirun.gen_required_field 4 gen__taint_info x.Context.taint_info in let _value = Piqirun.gen_required_field 5 gen__string x.Context.value in  Piqirun.gen_record code [ _operand_info_specific;_bit_length;_operand_usage;_taint_info;_value ] and gen__exp code (x:Stmt_piqi.exp) =  Piqirun.gen_record code [(match x with | `load x -> gen__loadgen__load3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__address 2 x )] and gen__cast_type code x = Piqirun.int32_to_signed_varint code (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and packed_gen__cast_type x = Piqirun.int32_to_packed_signed_varint (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and gen__binop_type code x = Piqirun.int32_to_signed_varint code (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and packed_gen__binop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and gen__unop_type code x = Piqirun.int32_to_signed_varint code (match x with | `neg -> 1l| `not -> 2l) and packed_gen__unop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `neg -> 1l| `not -> 2l) and gen__var code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Var.name in let _id = Piqirun.gen_required_field 2 gen__int x.Var.id in let _typ = Piqirun.gen_required_field 3 gen__typ x.Var.typ in  Piqirun.gen_record code [ _name;_id;_typ ] and gen__lab code x = gen__string code x and gen__attribute code (x:Stmt_piqi.attribute) =  Piqirun.gen_record code [(match x with | `asm x -> gen__asm 1 x| `address x -> gen__address 2 x| `liveout x -> gen__liveout 3 x| `strattr x -> gen__strattr 4 x| `context x -> gen__context 5 x| `thread_id x -> gen__thread_id 6 x| `synthetic x -> gen__synthetic 7 x| `other x -> gen__string 8 x )] and gen__attributes code x = (Piqirun.gen_list (gen__attribute)) code x and gen__asm code x = gen__string code x and gen__address code x = gen__int64 code x and packed_gen__address x = packed_gen__int64 x and gen__liveout code x =   Piqirun.gen_record code [  ] and gen__synthetic code x =   Piqirun.gen_record code [  ] and gen__strattr code x = gen__string code x and gen__thread_id code x = gen__uint64 code x and packed_gen__thread_id x = packed_gen__uint64 x and gen__operand_info_specific code (x:Stmt_piqi.operand_info_specific) =  Piqirun.gen_record code [(match x with | `mem_operand x -> gen__mem_operand 1 x| `reg_operand x -> gen__reg_operand 2 x )] and gen__reg_operand code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Reg_operand.name in  Piqirun.gen_record code [ _name ] and gen__bit_length code x = gen__int code x and packed_gen__bit_length x = packed_gen__int x and gen__taint_id code x = gen__uint64 code x and packed_gen__taint_id x = packed_gen__uint64 x and gen__operand_usage code x =  let _read = Piqirun.gen_required_field 1 gen__bool x.Operand_usage.read in let _written = Piqirun.gen_required_field 2 gen__bool x.Operand_usage.written in let _index = Piqirun.gen_required_field 3 gen__bool x.Operand_usage.index in let _base = Piqirun.gen_required_field 4 gen__bool x.Operand_usage.base in  Piqirun.gen_record code [ _read;_written;_index;_base ] and gen__mem_operand code x =  let _address = Piqirun.gen_required_field 1 gen__address x.Mem_operand.address in  Piqirun.gen_record code [ _address ] and gen__taint_info code (x:Stmt_piqi.taint_info) =  Piqirun.gen_record code [(match x with | `no_taint ->  Piqirun.gen_bool_field 1 true| `taint_id x -> gen__taint_id 2 x| `taint_multiple ->  Piqirun.gen_bool_field 3 true )] and gen__context code x =  let _operand_info_specific = Piqirun.gen_required_field 1 gen__operand_info_specific x.Context.operand_info_specific in let _bit_length = Piqirun.gen_required_field 2 gen__bit_length x.Context.bit_length in let _operand_usage = Piqirun.gen_required_field 3 gen__operand_usage x.Context.operand_usage in let _taint_info = Piqirun.gen_required_field 4 gen__taint_info x.Context.taint_info in let _value = Piqirun.gen_required_field 5 gen__string x.Context.value in  Piqirun.gen_record code [ _operand_info_specific;_bit_length;_operand_usage;_taint_info;_value ] and gen__exp code (x:Stmt_piqi.exp) =  Piqirun.gen_record code [(match x with | `load x -> gen__load 1 x| `store x -> gen__storegen__store3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__address 2 x )] and gen__cast_type code x = Piqirun.int32_to_signed_varint code (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and packed_gen__cast_type x = Piqirun.int32_to_packed_signed_varint (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and gen__binopgen__binop3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__address 2 x )] and gen__cast_type code x = Piqirun.int32_to_signed_varint code (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and packed_gen__cast_type x = Piqirun.int32_to_packed_signed_varint (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and gen__binop_type code x = Piqirun.int32_to_signed_varint code (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and packed_gen__binop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and gen__unopgen__unop3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__address 2 x )] and gen__cast_type code x = Piqirun.int32_to_signed_varint code (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and packed_gen__cast_type x = Piqirun.int32_to_packed_signed_varint (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and gen__binop_type code x = Piqirun.int32_to_signed_varint code (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and packed_gen__binop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and gen__unop_type code x = Piqirun.int32_to_signed_varint code (match x with | `neg -> 1l| `not -> 2l) and packed_gen__unop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `neg -> 1l| `not -> 2l) and gen__var code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Var.name in let _id = Piqirun.gen_required_field 2 gen__int x.Var.id in let _typ = Piqirun.gen_required_field 3 gen__typ x.Var.typ in  Piqirun.gen_record code [ _name;_id;_typ ] and gen__lab code x = gen__string code x and gen__attribute code (x:Stmt_piqi.attribute) =  Piqirun.gen_record code [(match x with | `asm x -> gen__asm 1 x| `address x -> gen__address 2 x| `liveout x -> gen__liveout 3 x| `strattr x -> gen__strattr 4 x| `context x -> gen__context 5 x| `thread_id x -> gen__thread_id 6 x| `synthetic x -> gen__synthetic 7 x| `other x -> gen__string 8 x )] and gen__attributes code x = (Piqirun.gen_list (gen__attribute)) code x and gen__asm code x = gen__string code x and gen__address code x = gen__int64 code x and packed_gen__address x = packed_gen__int64 x and gen__liveout code x =   Piqirun.gen_record code [  ] and gen__synthetic code x =   Piqirun.gen_record code [  ] and gen__strattr code x = gen__string code x and gen__thread_id code x = gen__uint64 code x and packed_gen__thread_id x = packed_gen__uint64 x and gen__operand_info_specific code (x:Stmt_piqi.operand_info_specific) =  Piqirun.gen_record code [(match x with | `mem_operand x -> gen__mem_operand 1 x| `reg_operand x -> gen__reg_operand 2 x )] and gen__reg_operand code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Reg_operand.name in  Piqirun.gen_record code [ _name ] and gen__bit_length code x = gen__int code x and packed_gen__bit_length x = packed_gen__int x and gen__taint_id code x = gen__uint64 code x and packed_gen__taint_id x = packed_gen__uint64 x and gen__operand_usage code x =  let _read = Piqirun.gen_required_field 1 gen__bool x.Operand_usage.read in let _written = Piqirun.gen_required_field 2 gen__bool x.Operand_usage.written in let _index = Piqirun.gen_required_field 3 gen__bool x.Operand_usage.index in let _base = Piqirun.gen_required_field 4 gen__bool x.Operand_usage.base in  Piqirun.gen_record code [ _read;_written;_index;_base ] and gen__mem_operand code x =  let _address = Piqirun.gen_required_field 1 gen__address x.Mem_operand.address in  Piqirun.gen_record code [ _address ] and gen__taint_info code (x:Stmt_piqi.taint_info) =  Piqirun.gen_record code [(match x with | `no_taint ->  Piqirun.gen_bool_field 1 true| `taint_id x -> gen__taint_id 2 x| `taint_multiple ->  Piqirun.gen_bool_field 3 true )] and gen__context code x =  let _operand_info_specific = Piqirun.gen_required_field 1 gen__operand_info_specific x.Context.operand_info_specific in let _bit_length = Piqirun.gen_required_field 2 gen__bit_length x.Context.bit_length in let _operand_usage = Piqirun.gen_required_field 3 gen__operand_usage x.Context.operand_usage in let _taint_info = Piqirun.gen_required_field 4 gen__taint_info x.Context.taint_info in let _value = Piqirun.gen_required_field 5 gen__string x.Context.value in  Piqirun.gen_record code [ _operand_info_specific;_bit_length;_operand_usage;_taint_info;_value ] and gen__exp code (x:Stmt_piqi.exp) =  Piqirun.gen_record code [(match x with | `load x -> gen__load 1 x| `store x -> gen__store 2 x| `binop x -> gen__binop 3 x| `unop x -> gen__unop 4 x| `var x -> gen__var 5 x| `lab x -> gen__lab 6 x| `inte x -> gen__integen__inte3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__address 2 x )] and gen__castgen__cast3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__address 2 x )] and gen__cast_type code x = Piqirun.int32_to_signed_varint code (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and packed_gen__cast_type x = Piqirun.int32_to_packed_signed_varint (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and gen__binop_type code x = Piqirun.int32_to_signed_varint code (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and packed_gen__binop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and gen__unop_type code x = Piqirun.int32_to_signed_varint code (match x with | `neg -> 1l| `not -> 2l) and packed_gen__unop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `neg -> 1l| `not -> 2l) and gen__var code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Var.name in let _id = Piqirun.gen_required_field 2 gen__int x.Var.id in let _typ = Piqirun.gen_required_field 3 gen__typ x.Var.typ in  Piqirun.gen_record code [ _name;_id;_typ ] and gen__lab code x = gen__string code x and gen__attribute code (x:Stmt_piqi.attribute) =  Piqirun.gen_record code [(match x with | `asm x -> gen__asm 1 x| `address x -> gen__address 2 x| `liveout x -> gen__liveout 3 x| `strattr x -> gen__strattr 4 x| `context x -> gen__context 5 x| `thread_id x -> gen__thread_id 6 x| `synthetic x -> gen__synthetic 7 x| `other x -> gen__string 8 x )] and gen__attributes code x = (Piqirun.gen_list (gen__attribute)) code x and gen__asm code x = gen__string code x and gen__address code x = gen__int64 code x and packed_gen__address x = packed_gen__int64 x and gen__liveout code x =   Piqirun.gen_record code [  ] and gen__synthetic code x =   Piqirun.gen_record code [  ] and gen__strattr code x = gen__string code x and gen__thread_id code x = gen__uint64 code x and packed_gen__thread_id x = packed_gen__uint64 x and gen__operand_info_specific code (x:Stmt_piqi.operand_info_specific) =  Piqirun.gen_record code [(match x with | `mem_operand x -> gen__mem_operand 1 x| `reg_operand x -> gen__reg_operand 2 x )] and gen__reg_operand code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Reg_operand.name in  Piqirun.gen_record code [ _name ] and gen__bit_length code x = gen__int code x and packed_gen__bit_length x = packed_gen__int x and gen__taint_id code x = gen__uint64 code x and packed_gen__taint_id x = packed_gen__uint64 x and gen__operand_usage code x =  let _read = Piqirun.gen_required_field 1 gen__bool x.Operand_usage.read in let _written = Piqirun.gen_required_field 2 gen__bool x.Operand_usage.written in let _index = Piqirun.gen_required_field 3 gen__bool x.Operand_usage.index in let _base = Piqirun.gen_required_field 4 gen__bool x.Operand_usage.base in  Piqirun.gen_record code [ _read;_written;_index;_base ] and gen__mem_operand code x =  let _address = Piqirun.gen_required_field 1 gen__address x.Mem_operand.address in  Piqirun.gen_record code [ _address ] and gen__taint_info code (x:Stmt_piqi.taint_info) =  Piqirun.gen_record code [(match x with | `no_taint ->  Piqirun.gen_bool_field 1 true| `taint_id x -> gen__taint_id 2 x| `taint_multiple ->  Piqirun.gen_bool_field 3 true )] and gen__context code x =  let _operand_info_specific = Piqirun.gen_required_field 1 gen__operand_info_specific x.Context.operand_info_specific in let _bit_length = Piqirun.gen_required_field 2 gen__bit_length x.Context.bit_length in let _operand_usage = Piqirun.gen_required_field 3 gen__operand_usage x.Context.operand_usage in let _taint_info = Piqirun.gen_required_field 4 gen__taint_info x.Context.taint_info in let _value = Piqirun.gen_required_field 5 gen__string x.Context.value in  Piqirun.gen_record code [ _operand_info_specific;_bit_length;_operand_usage;_taint_info;_value ] and gen__exp code (x:Stmt_piqi.exp) =  Piqirun.gen_record code [(match x with | `load x -> gen__load 1 x| `store x -> gen__store 2 x| `binop x -> gen__binop 3 x| `unop x -> gen__unop 4 x| `var x -> gen__var 5 x| `lab x -> gen__lab 6 x| `inte x -> gen__inte 7 x| `cast x -> gen__cast 8 x| `let_exp x -> gen__let_expgen__let_exp3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__address 2 x )] and gen__cast_type code x = Piqirun.int32_to_signed_varint code (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and packed_gen__cast_type x = Piqirun.int32_to_packed_signed_varint (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and gen__binop_type code x = Piqirun.int32_to_signed_varint code (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and packed_gen__binop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and gen__unop_type code x = Piqirun.int32_to_signed_varint code (match x with | `neg -> 1l| `not -> 2l) and packed_gen__unop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `neg -> 1l| `not -> 2l) and gen__var code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Var.name in let _id = Piqirun.gen_required_field 2 gen__int x.Var.id in let _typ = Piqirun.gen_required_field 3 gen__typ x.Var.typ in  Piqirun.gen_record code [ _name;_id;_typ ] and gen__lab code x = gen__string code x and gen__attribute code (x:Stmt_piqi.attribute) =  Piqirun.gen_record code [(match x with | `asm x -> gen__asm 1 x| `address x -> gen__address 2 x| `liveout x -> gen__liveout 3 x| `strattr x -> gen__strattr 4 x| `context x -> gen__context 5 x| `thread_id x -> gen__thread_id 6 x| `synthetic x -> gen__synthetic 7 x| `other x -> gen__string 8 x )] and gen__attributes code x = (Piqirun.gen_list (gen__attribute)) code x and gen__asm code x = gen__string code x and gen__address code x = gen__int64 code x and packed_gen__address x = packed_gen__int64 x and gen__liveout code x =   Piqirun.gen_record code [  ] and gen__synthetic code x =   Piqirun.gen_record code [  ] and gen__strattr code x = gen__string code x and gen__thread_id code x = gen__uint64 code x and packed_gen__thread_id x = packed_gen__uint64 x and gen__operand_info_specific code (x:Stmt_piqi.operand_info_specific) =  Piqirun.gen_record code [(match x with | `mem_operand x -> gen__mem_operand 1 x| `reg_operand x -> gen__reg_operand 2 x )] and gen__reg_operand code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Reg_operand.name in  Piqirun.gen_record code [ _name ] and gen__bit_length code x = gen__int code x and packed_gen__bit_length x = packed_gen__int x and gen__taint_id code x = gen__uint64 code x and packed_gen__taint_id x = packed_gen__uint64 x and gen__operand_usage code x =  let _read = Piqirun.gen_required_field 1 gen__bool x.Operand_usage.read in let _written = Piqirun.gen_required_field 2 gen__bool x.Operand_usage.written in let _index = Piqirun.gen_required_field 3 gen__bool x.Operand_usage.index in let _base = Piqirun.gen_required_field 4 gen__bool x.Operand_usage.base in  Piqirun.gen_record code [ _read;_written;_index;_base ] and gen__mem_operand code x =  let _address = Piqirun.gen_required_field 1 gen__address x.Mem_operand.address in  Piqirun.gen_record code [ _address ] and gen__taint_info code (x:Stmt_piqi.taint_info) =  Piqirun.gen_record code [(match x with | `no_taint ->  Piqirun.gen_bool_field 1 true| `taint_id x -> gen__taint_id 2 x| `taint_multiple ->  Piqirun.gen_bool_field 3 true )] and gen__context code x =  let _operand_info_specific = Piqirun.gen_required_field 1 gen__operand_info_specific x.Context.operand_info_specific in let _bit_length = Piqirun.gen_required_field 2 gen__bit_length x.Context.bit_length in let _operand_usage = Piqirun.gen_required_field 3 gen__operand_usage x.Context.operand_usage in let _taint_info = Piqirun.gen_required_field 4 gen__taint_info x.Context.taint_info in let _value = Piqirun.gen_required_field 5 gen__string x.Context.value in  Piqirun.gen_record code [ _operand_info_specific;_bit_length;_operand_usage;_taint_info;_value ] and gen__exp code (x:Stmt_piqi.exp) =  Piqirun.gen_record code [(match x with | `load x -> gen__load 1 x| `store x -> gen__store 2 x| `binop x -> gen__binop 3 x| `unop x -> gen__unop 4 x| `var x -> gen__var 5 x| `lab x -> gen__lab 6 x| `inte x -> gen__inte 7 x| `cast x -> gen__cast 8 x| `let_exp x -> gen__let_exp 9 x| `unknown x -> gen__unknowngen__unknown3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__address 2 x )] and gen__cast_type code x = Piqirun.int32_to_signed_varint code (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and packed_gen__cast_type x = Piqirun.int32_to_packed_signed_varint (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and gen__binop_type code x = Piqirun.int32_to_signed_varint code (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and packed_gen__binop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and gen__unop_type code x = Piqirun.int32_to_signed_varint code (match x with | `neg -> 1l| `not -> 2l) and packed_gen__unop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `neg -> 1l| `not -> 2l) and gen__var code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Var.name in let _id = Piqirun.gen_required_field 2 gen__int x.Var.id in let _typ = Piqirun.gen_required_field 3 gen__typ x.Var.typ in  Piqirun.gen_record code [ _name;_id;_typ ] and gen__lab code x = gen__string code x and gen__attribute code (x:Stmt_piqi.attribute) =  Piqirun.gen_record code [(match x with | `asm x -> gen__asm 1 x| `address x -> gen__address 2 x| `liveout x -> gen__liveout 3 x| `strattr x -> gen__strattr 4 x| `context x -> gen__context 5 x| `thread_id x -> gen__thread_id 6 x| `synthetic x -> gen__synthetic 7 x| `other x -> gen__string 8 x )] and gen__attributes code x = (Piqirun.gen_list (gen__attribute)) code x and gen__asm code x = gen__string code x and gen__address code x = gen__int64 code x and packed_gen__address x = packed_gen__int64 x and gen__liveout code x =   Piqirun.gen_record code [  ] and gen__synthetic code x =   Piqirun.gen_record code [  ] and gen__strattr code x = gen__string code x and gen__thread_id code x = gen__uint64 code x and packed_gen__thread_id x = packed_gen__uint64 x and gen__operand_info_specific code (x:Stmt_piqi.operand_info_specific) =  Piqirun.gen_record code [(match x with | `mem_operand x -> gen__mem_operand 1 x| `reg_operand x -> gen__reg_operand 2 x )] and gen__reg_operand code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Reg_operand.name in  Piqirun.gen_record code [ _name ] and gen__bit_length code x = gen__int code x and packed_gen__bit_length x = packed_gen__int x and gen__taint_id code x = gen__uint64 code x and packed_gen__taint_id x = packed_gen__uint64 x and gen__operand_usage code x =  let _read = Piqirun.gen_required_field 1 gen__bool x.Operand_usage.read in let _written = Piqirun.gen_required_field 2 gen__bool x.Operand_usage.written in let _index = Piqirun.gen_required_field 3 gen__bool x.Operand_usage.index in let _base = Piqirun.gen_required_field 4 gen__bool x.Operand_usage.base in  Piqirun.gen_record code [ _read;_written;_index;_base ] and gen__mem_operand code x =  let _address = Piqirun.gen_required_field 1 gen__address x.Mem_operand.address in  Piqirun.gen_record code [ _address ] and gen__taint_info code (x:Stmt_piqi.taint_info) =  Piqirun.gen_record code [(match x with | `no_taint ->  Piqirun.gen_bool_field 1 true| `taint_id x -> gen__taint_id 2 x| `taint_multiple ->  Piqirun.gen_bool_field 3 true )] and gen__context code x =  let _operand_info_specific = Piqirun.gen_required_field 1 gen__operand_info_specific x.Context.operand_info_specific in let _bit_length = Piqirun.gen_required_field 2 gen__bit_length x.Context.bit_length in let _operand_usage = Piqirun.gen_required_field 3 gen__operand_usage x.Context.operand_usage in let _taint_info = Piqirun.gen_required_field 4 gen__taint_info x.Context.taint_info in let _value = Piqirun.gen_required_field 5 gen__string x.Context.value in  Piqirun.gen_record code [ _operand_info_specific;_bit_length;_operand_usage;_taint_info;_value ] and gen__exp code (x:Stmt_piqi.exp) =  Piqirun.gen_record code [(match x with | `load x -> gen__load 1 x| `store x -> gen__store 2 x| `binop x -> gen__binop 3 x| `unop x -> gen__unop 4 x| `var x -> gen__var 5 x| `lab x -> gen__lab 6 x| `inte x -> gen__inte 7 x| `cast x -> gen__cast 8 x| `let_exp x -> gen__let_exp 9 x| `unknown x -> gen__unknown 10 x| `ite x -> gen__itegen__ite3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__address 2 x )] and gen__cast_type code x = Piqirun.int32_to_signed_varint code (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and packed_gen__cast_type x = Piqirun.int32_to_packed_signed_varint (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and gen__binop_type code x = Piqirun.int32_to_signed_varint code (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and packed_gen__binop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and gen__unop_type code x = Piqirun.int32_to_signed_varint code (match x with | `neg -> 1l| `not -> 2l) and packed_gen__unop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `neg -> 1l| `not -> 2l) and gen__var code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Var.name in let _id = Piqirun.gen_required_field 2 gen__int x.Var.id in let _typ = Piqirun.gen_required_field 3 gen__typ x.Var.typ in  Piqirun.gen_record code [ _name;_id;_typ ] and gen__lab code x = gen__string code x and gen__attribute code (x:Stmt_piqi.attribute) =  Piqirun.gen_record code [(match x with | `asm x -> gen__asm 1 x| `address x -> gen__address 2 x| `liveout x -> gen__liveout 3 x| `strattr x -> gen__strattr 4 x| `context x -> gen__context 5 x| `thread_id x -> gen__thread_id 6 x| `synthetic x -> gen__synthetic 7 x| `other x -> gen__string 8 x )] and gen__attributes code x = (Piqirun.gen_list (gen__attribute)) code x and gen__asm code x = gen__string code x and gen__address code x = gen__int64 code x and packed_gen__address x = packed_gen__int64 x and gen__liveout code x =   Piqirun.gen_record code [  ] and gen__synthetic code x =   Piqirun.gen_record code [  ] and gen__strattr code x = gen__string code x and gen__thread_id code x = gen__uint64 code x and packed_gen__thread_id x = packed_gen__uint64 x and gen__operand_info_specific code (x:Stmt_piqi.operand_info_specific) =  Piqirun.gen_record code [(match x with | `mem_operand x -> gen__mem_operand 1 x| `reg_operand x -> gen__reg_operand 2 x )] and gen__reg_operand code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Reg_operand.name in  Piqirun.gen_record code [ _name ] and gen__bit_length code x = gen__int code x and packed_gen__bit_length x = packed_gen__int x and gen__taint_id code x = gen__uint64 code x and packed_gen__taint_id x = packed_gen__uint64 x and gen__operand_usage code x =  let _read = Piqirun.gen_required_field 1 gen__bool x.Operand_usage.read in let _written = Piqirun.gen_required_field 2 gen__bool x.Operand_usage.written in let _index = Piqirun.gen_required_field 3 gen__bool x.Operand_usage.index in let _base = Piqirun.gen_required_field 4 gen__bool x.Operand_usage.base in  Piqirun.gen_record code [ _read;_written;_index;_base ] and gen__mem_operand code x =  let _address = Piqirun.gen_required_field 1 gen__address x.Mem_operand.address in  Piqirun.gen_record code [ _address ] and gen__taint_info code (x:Stmt_piqi.taint_info) =  Piqirun.gen_record code [(match x with | `no_taint ->  Piqirun.gen_bool_field 1 true| `taint_id x -> gen__taint_id 2 x| `taint_multiple ->  Piqirun.gen_bool_field 3 true )] and gen__context code x =  let _operand_info_specific = Piqirun.gen_required_field 1 gen__operand_info_specific x.Context.operand_info_specific in let _bit_length = Piqirun.gen_required_field 2 gen__bit_length x.Context.bit_length in let _operand_usage = Piqirun.gen_required_field 3 gen__operand_usage x.Context.operand_usage in let _taint_info = Piqirun.gen_required_field 4 gen__taint_info x.Context.taint_info in let _value = Piqirun.gen_required_field 5 gen__string x.Context.value in  Piqirun.gen_record code [ _operand_info_specific;_bit_length;_operand_usage;_taint_info;_value ] and gen__exp code (x:Stmt_piqi.exp) =  Piqirun.gen_record code [(match x with | `load x -> gen__load 1 x| `store x -> gen__store 2 x| `binop x -> gen__binop 3 x| `unop x -> gen__unop 4 x| `var x -> gen__var 5 x| `lab x -> gen__lab 6 x| `inte x -> gen__inte 7 x| `cast x -> gen__cast 8 x| `let_exp x -> gen__let_exp 9 x| `unknown x -> gen__unknown 10 x| `ite x -> gen__ite 11 x| `extract x -> gen__extractgen__extract3,20636
     let rec gen__string code x = Piqirun.string_to_block code x and gen__int code x = Piqirun.int_to_zigzag_varint code x and packed_gen__int x = Piqirun.int_to_packed_zigzag_varint x and gen__int64 code x = Piqirun.int64_to_zigzag_varint code x and packed_gen__int64 x = Piqirun.int64_to_packed_zigzag_varint x and gen__uint64 code x = Piqirun.int64_to_varint code x and packed_gen__uint64 x = Piqirun.int64_to_packed_varint x and gen__bool code x = Piqirun.bool_to_varint code x and packed_gen__bool x = Piqirun.bool_to_packed_varint x and gen__program code x = (Piqirun.gen_list (gen__stmt)) code x and gen__stmt code (x:Stmt_piqi.stmt) =  Piqirun.gen_record code [(match x with | `move x -> gen__move 1 x| `jmp x -> gen__jmp 2 x| `cjmp x -> gen__cjmp 3 x| `label_stmt x -> gen__label_stmt 4 x| `halt x -> gen__halt 5 x| `assert_stmt x -> gen__assert_stmt 6 x| `assume x -> gen__assume 7 x| `comment x -> gen__comment 8 x| `special x -> gen__special 9 x )] and gen__move code x =  let _var = Piqirun.gen_required_field 1 gen__var x.Move.var in let _exp = Piqirun.gen_required_field 2 gen__exp x.Move.exp in let _attributes = Piqirun.gen_required_field 3 gen__attributes x.Move.attributes in  Piqirun.gen_record code [ _var;_exp;_attributes ] and gen__jmp code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Jmp.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Jmp.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__cjmp code x =  let _cond = Piqirun.gen_required_field 1 gen__exp x.Cjmp.cond in let _iftrue = Piqirun.gen_required_field 2 gen__exp x.Cjmp.iftrue in let _iffalse = Piqirun.gen_required_field 3 gen__exp x.Cjmp.iffalse in let _attributes = Piqirun.gen_required_field 4 gen__attributes x.Cjmp.attributes in  Piqirun.gen_record code [ _cond;_iftrue;_iffalse;_attributes ] and gen__label_stmt code x =  let _label = Piqirun.gen_required_field 1 gen__label x.Label_stmt.label in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Label_stmt.attributes in  Piqirun.gen_record code [ _label;_attributes ] and gen__halt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Halt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Halt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assert_stmt code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assert_stmt.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assert_stmt.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__assume code x =  let _exp = Piqirun.gen_required_field 1 gen__exp x.Assume.exp in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Assume.attributes in  Piqirun.gen_record code [ _exp;_attributes ] and gen__comment code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Comment.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Comment.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__special code x =  let _string = Piqirun.gen_required_field 1 gen__string x.Special.string in let _attributes = Piqirun.gen_required_field 2 gen__attributes x.Special.attributes in  Piqirun.gen_record code [ _string;_attributes ] and gen__typ code (x:Stmt_piqi.typ) =  Piqirun.gen_record code [(match x with | `reg x -> gen__reg 1 x| `tmem x -> gen__tmem 2 x| `array x -> gen__array 3 x )] and gen__reg code x = gen__int code x and packed_gen__reg x = packed_gen__int x and gen__tmem code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Tmem.index_type in  Piqirun.gen_record code [ _index_type ] and gen__array code x =  let _index_type = Piqirun.gen_required_field 1 gen__typ x.Array.index_type in let _element_type = Piqirun.gen_required_field 2 gen__typ x.Array.element_type in  Piqirun.gen_record code [ _index_type;_element_type ] and gen__label code (x:Stmt_piqi.label) =  Piqirun.gen_record code [(match x with | `name x -> gen__string 1 x| `addr x -> gen__address 2 x )] and gen__cast_type code x = Piqirun.int32_to_signed_varint code (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and packed_gen__cast_type x = Piqirun.int32_to_packed_signed_varint (match x with | `cast_unsigned -> 1l| `cast_signed -> 2l| `cast_high -> 3l| `cast_low -> 4l) and gen__binop_type code x = Piqirun.int32_to_signed_varint code (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and packed_gen__binop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `plus -> 1l| `minus -> 2l| `times -> 3l| `divide -> 4l| `sdivide -> 5l| `modbop -> 6l| `smod -> 7l| `lshift -> 8l| `rshift -> 9l| `arshift -> 10l| `andbop -> 11l| `orbop -> 12l| `xor -> 13l| `eq -> 14l| `neq -> 15l| `lt -> 16l| `le -> 17l| `slt -> 18l| `sle -> 19l) and gen__unop_type code x = Piqirun.int32_to_signed_varint code (match x with | `neg -> 1l| `not -> 2l) and packed_gen__unop_type x = Piqirun.int32_to_packed_signed_varint (match x with | `neg -> 1l| `not -> 2l) and gen__var code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Var.name in let _id = Piqirun.gen_required_field 2 gen__int x.Var.id in let _typ = Piqirun.gen_required_field 3 gen__typ x.Var.typ in  Piqirun.gen_record code [ _name;_id;_typ ] and gen__lab code x = gen__string code x and gen__attribute code (x:Stmt_piqi.attribute) =  Piqirun.gen_record code [(match x with | `asm x -> gen__asm 1 x| `address x -> gen__address 2 x| `liveout x -> gen__liveout 3 x| `strattr x -> gen__strattr 4 x| `context x -> gen__context 5 x| `thread_id x -> gen__thread_id 6 x| `synthetic x -> gen__synthetic 7 x| `other x -> gen__string 8 x )] and gen__attributes code x = (Piqirun.gen_list (gen__attribute)) code x and gen__asm code x = gen__string code x and gen__address code x = gen__int64 code x and packed_gen__address x = packed_gen__int64 x and gen__liveout code x =   Piqirun.gen_record code [  ] and gen__synthetic code x =   Piqirun.gen_record code [  ] and gen__strattr code x = gen__string code x and gen__thread_id code x = gen__uint64 code x and packed_gen__thread_id x = packed_gen__uint64 x and gen__operand_info_specific code (x:Stmt_piqi.operand_info_specific) =  Piqirun.gen_record code [(match x with | `mem_operand x -> gen__mem_operand 1 x| `reg_operand x -> gen__reg_operand 2 x )] and gen__reg_operand code x =  let _name = Piqirun.gen_required_field 1 gen__string x.Reg_operand.name in  Piqirun.gen_record code [ _name ] and gen__bit_length code x = gen__int code x and packed_gen__bit_length x = packed_gen__int x and gen__taint_id code x = gen__uint64 code x and packed_gen__taint_id x = packed_gen__uint64 x and gen__operand_usage code x =  let _read = Piqirun.gen_required_field 1 gen__bool x.Operand_usage.read in let _written = Piqirun.gen_required_field 2 gen__bool x.Operand_usage.written in let _index = Piqirun.gen_required_field 3 gen__bool x.Operand_usage.index in let _base = Piqirun.gen_required_field 4 gen__bool x.Operand_usage.base in  Piqirun.gen_record code [ _read;_written;_index;_base ] and gen__mem_operand code x =  let _address = Piqirun.gen_required_field 1 gen__address x.Mem_operand.address in  Piqirun.gen_record code [ _address ] and gen__taint_info code (x:Stmt_piqi.taint_info) =  Piqirun.gen_record code [(match x with | `no_taint ->  Piqirun.gen_bool_field 1 true| `taint_id x -> gen__taint_id 2 x| `taint_multiple ->  Piqirun.gen_bool_field 3 true )] and gen__context code x =  let _operand_info_specific = Piqirun.gen_required_field 1 gen__operand_info_specific x.Context.operand_info_specific in let _bit_length = Piqirun.gen_required_field 2 gen__bit_length x.Context.bit_length in let _operand_usage = Piqirun.gen_required_field 3 gen__operand_usage x.Context.operand_usage in let _taint_info = Piqirun.gen_required_field 4 gen__taint_info x.Context.taint_info in let _value = Piqirun.gen_required_field 5 gen__string x.Context.value in  Piqirun.gen_record code [ _operand_info_specific;_bit_length;_operand_usage;_taint_info;_value ] and gen__exp code (x:Stmt_piqi.exp) =  Piqirun.gen_record code [(match x with | `load x -> gen__load 1 x| `store x -> gen__store 2 x| `binop x -> gen__binop 3 x| `unop x -> gen__unop 4 x| `var x -> gen__var 5 x| `lab x -> gen__lab 6 x| `inte x -> gen__inte 7 x| `cast x -> gen__cast 8 x| `let_exp x -> gen__let_exp 9 x| `unknown x -> gen__unknown 10 x| `ite x -> gen__ite 11 x| `extract x -> gen__extract 12 x| `concat x -> gen__concatgen__concat3,20636
 let gen_stringgen_string5,32324
let gen_intgen_int6,32363
let gen_int64gen_int647,32395
let gen_uint64gen_uint648,32431
let gen_boolgen_bool9,32469
let gen_programgen_program10,32503
let gen_stmtgen_stmt11,32543
let gen_movegen_move12,32577
let gen_jmpgen_jmp13,32611
let gen_cjmpgen_cjmp14,32643
let gen_label_stmtgen_label_stmt15,32677
let gen_haltgen_halt16,32723
let gen_assert_stmtgen_assert_stmt17,32757
let gen_assumegen_assume18,32805
let gen_commentgen_comment19,32843
let gen_specialgen_special20,32883
let gen_typgen_typ21,32923
let gen_reggen_reg22,32955
let gen_tmemgen_tmem23,32987
let gen_arraygen_array24,33021
let gen_labelgen_label25,33057
let gen_cast_typegen_cast_type26,33093
let gen_binop_typegen_binop_type27,33137
let gen_unop_typegen_unop_type28,33183
let gen_vargen_var29,33227
let gen_labgen_lab30,33259
let gen_attributegen_attribute31,33291
let gen_attributesgen_attributes32,33335
let gen_asmgen_asm33,33381
let gen_addressgen_address34,33413
let gen_liveoutgen_liveout35,33453
let gen_syntheticgen_synthetic36,33493
let gen_strattrgen_strattr37,33537
let gen_thread_idgen_thread_id38,33577
let gen_operand_info_specificgen_operand_info_specific39,33621
let gen_reg_operandgen_reg_operand40,33689
let gen_bit_lengthgen_bit_length41,33737
let gen_taint_idgen_taint_id42,33783
let gen_operand_usagegen_operand_usage43,33825
let gen_mem_operandgen_mem_operand44,33877
let gen_taint_infogen_taint_info45,33925
let gen_contextgen_context46,33971
let gen_expgen_exp47,34011
let gen_loadgen_load48,34043
let gen_storegen_store49,34077
let gen_binopgen_binop50,34113
let gen_unopgen_unop51,34149
let gen_integen_inte52,34183
let gen_castgen_cast53,34217
let gen_let_expgen_let_exp54,34251
let gen_unknowngen_unknown55,34291
let gen_itegen_ite56,34331
let gen_extractgen_extract57,34363
let gen_concatgen_concat58,34403
let piqipiqi60,34443

piqi/stmt_piqi_ext.ml,11121
Stmt_piqi_ext1,0
let piqipiqi1,0
let _string_piqtype_string_piqtype7,65
let _int_piqtype_int_piqtype8,121
let _int64_piqtype_int64_piqtype9,171
let _uint64_piqtype_uint64_piqtype10,225
let _bool_piqtype_bool_piqtype11,281
let _program_piqtype_program_piqtype12,333
let _stmt_piqtype_stmt_piqtype13,396
let _move_piqtype_move_piqtype14,453
let _jmp_piqtype_jmp_piqtype15,510
let _cjmp_piqtype_cjmp_piqtype16,565
let _label_stmt_piqtype_label_stmt_piqtype17,622
let _halt_piqtype_halt_piqtype18,691
let _assert_stmt_piqtype_assert_stmt_piqtype19,748
let _assume_piqtype_assume_piqtype20,819
let _comment_piqtype_comment_piqtype21,880
let _special_piqtype_special_piqtype22,943
let _typ_piqtype_typ_piqtype23,1006
let _reg_piqtype_reg_piqtype24,1061
let _tmem_piqtype_tmem_piqtype25,1116
let _array_piqtype_array_piqtype26,1173
let _label_piqtype_label_piqtype27,1232
let _cast_type_piqtype_cast_type_piqtype28,1291
let _binop_type_piqtype_binop_type_piqtype29,1358
let _unop_type_piqtype_unop_type_piqtype30,1427
let _var_piqtype_var_piqtype31,1494
let _lab_piqtype_lab_piqtype32,1549
let _attribute_piqtype_attribute_piqtype33,1604
let _attributes_piqtype_attributes_piqtype34,1671
let _asm_piqtype_asm_piqtype35,1740
let _address_piqtype_address_piqtype36,1795
let _liveout_piqtype_liveout_piqtype37,1858
let _synthetic_piqtype_synthetic_piqtype38,1921
let _strattr_piqtype_strattr_piqtype39,1988
let _thread_id_piqtype_thread_id_piqtype40,2051
let _operand_info_specific_piqtype_operand_info_specific_piqtype41,2118
let _reg_operand_piqtype_reg_operand_piqtype42,2209
let _bit_length_piqtype_bit_length_piqtype43,2280
let _taint_id_piqtype_taint_id_piqtype44,2349
let _operand_usage_piqtype_operand_usage_piqtype45,2414
let _mem_operand_piqtype_mem_operand_piqtype46,2489
let _taint_info_piqtype_taint_info_piqtype47,2560
let _context_piqtype_context_piqtype48,2629
let _exp_piqtype_exp_piqtype49,2692
let _load_piqtype_load_piqtype50,2747
let _store_piqtype_store_piqtype51,2804
let _binop_piqtype_binop_piqtype52,2863
let _unop_piqtype_unop_piqtype53,2922
let _inte_piqtype_inte_piqtype54,2979
let _cast_piqtype_cast_piqtype55,3036
let _let_exp_piqtype_let_exp_piqtype56,3093
let _unknown_piqtype_unknown_piqtype57,3156
let _ite_piqtype_ite_piqtype58,3219
let _extract_piqtype_extract_piqtype59,3274
let _concat_piqtype_concat_piqtype60,3337
let parse_stringparse_string63,3400
let parse_intparse_int64,3601
let parse_int64parse_int6465,3793
let parse_uint64parse_uint6466,3991
let parse_boolparse_bool67,4192
let parse_programparse_program68,4387
let parse_stmtparse_stmt69,4591
let parse_moveparse_move70,4786
let parse_jmpparse_jmp71,4981
let parse_cjmpparse_cjmp72,5173
let parse_label_stmtparse_label_stmt73,5368
let parse_haltparse_halt74,5581
let parse_assert_stmtparse_assert_stmt75,5776
let parse_assumeparse_assume76,5992
let parse_commentparse_comment77,6193
let parse_specialparse_special78,6397
let parse_typparse_typ79,6601
let parse_regparse_reg80,6793
let parse_tmemparse_tmem81,6985
let parse_arrayparse_array82,7180
let parse_labelparse_label83,7378
let parse_cast_typeparse_cast_type84,7576
let parse_binop_typeparse_binop_type85,7786
let parse_unop_typeparse_unop_type86,7999
let parse_varparse_var87,8209
let parse_labparse_lab88,8401
let parse_attributeparse_attribute89,8593
let parse_attributesparse_attributes90,8803
let parse_asmparse_asm91,9016
let parse_addressparse_address92,9208
let parse_liveoutparse_liveout93,9412
let parse_syntheticparse_synthetic94,9616
let parse_strattrparse_strattr95,9826
let parse_thread_idparse_thread_id96,10030
let parse_operand_info_specificparse_operand_info_specific97,10240
let parse_reg_operandparse_reg_operand98,10486
let parse_bit_lengthparse_bit_length99,10702
let parse_taint_idparse_taint_id100,10915
let parse_operand_usageparse_operand_usage101,11122
let parse_mem_operandparse_mem_operand102,11344
let parse_taint_infoparse_taint_info103,11560
let parse_contextparse_context104,11773
let parse_expparse_exp105,11977
let parse_loadparse_load106,12169
let parse_storeparse_store107,12364
let parse_binopparse_binop108,12562
let parse_unopparse_unop109,12760
let parse_inteparse_inte110,12955
let parse_castparse_cast111,13150
let parse_let_expparse_let_exp112,13345
let parse_unknownparse_unknown113,13549
let parse_iteparse_ite114,13753
let parse_extractparse_extract115,13945
let parse_concatparse_concat116,14149
let gen_stringgen_string119,14352
let gen_intgen_int120,14544
let gen_int64gen_int64121,14727
let gen_uint64gen_uint64122,14916
let gen_boolgen_bool123,15108
let gen_programgen_program124,15294
let gen_stmtgen_stmt125,15489
let gen_movegen_move126,15675
let gen_jmpgen_jmp127,15861
let gen_cjmpgen_cjmp128,16044
let gen_label_stmtgen_label_stmt129,16230
let gen_haltgen_halt130,16434
let gen_assert_stmtgen_assert_stmt131,16620
let gen_assumegen_assume132,16827
let gen_commentgen_comment133,17019
let gen_specialgen_special134,17214
let gen_typgen_typ135,17409
let gen_reggen_reg136,17592
let gen_tmemgen_tmem137,17775
let gen_arraygen_array138,17961
let gen_labelgen_label139,18150
let gen_cast_typegen_cast_type140,18339
let gen_binop_typegen_binop_type141,18540
let gen_unop_typegen_unop_type142,18744
let gen_vargen_var143,18945
let gen_labgen_lab144,19128
let gen_attributegen_attribute145,19311
let gen_attributesgen_attributes146,19512
let gen_asmgen_asm147,19716
let gen_addressgen_address148,19899
let gen_liveoutgen_liveout149,20094
let gen_syntheticgen_synthetic150,20289
let gen_strattrgen_strattr151,20490
let gen_thread_idgen_thread_id152,20685
let gen_operand_info_specificgen_operand_info_specific153,20886
let gen_reg_operandgen_reg_operand154,21123
let gen_bit_lengthgen_bit_length155,21330
let gen_taint_idgen_taint_id156,21534
let gen_operand_usagegen_operand_usage157,21732
let gen_mem_operandgen_mem_operand158,21945
let gen_taint_infogen_taint_info159,22152
let gen_contextgen_context160,22356
let gen_expgen_exp161,22551
let gen_loadgen_load162,22734
let gen_storegen_store163,22920
let gen_binopgen_binop164,23109
let gen_unopgen_unop165,23298
let gen_integen_inte166,23484
let gen_castgen_cast167,23670
let gen_let_expgen_let_exp168,23856
let gen_unknowngen_unknown169,24051
let gen_itegen_ite170,24246
let gen_extractgen_extract171,24429
let gen_concatgen_concat172,24624
let print_stringprint_string175,24818
 let prerr_stringprerr_string176,24884
let print_intprint_int177,24951
 let prerr_intprerr_int178,25011
let print_int64print_int64179,25072
 let prerr_int64prerr_int64180,25136
let print_uint64print_uint64181,25201
 let prerr_uint64prerr_uint64182,25267
let print_boolprint_bool183,25334
 let prerr_boolprerr_bool184,25396
let print_programprint_program185,25459
 let prerr_programprerr_program186,25527
let print_stmtprint_stmt187,25596
 let prerr_stmtprerr_stmt188,25658
let print_moveprint_move189,25721
 let prerr_moveprerr_move190,25783
let print_jmpprint_jmp191,25846
 let prerr_jmpprerr_jmp192,25906
let print_cjmpprint_cjmp193,25967
 let prerr_cjmpprerr_cjmp194,26029
let print_label_stmtprint_label_stmt195,26092
 let prerr_label_stmtprerr_label_stmt196,26166
let print_haltprint_halt197,26241
 let prerr_haltprerr_halt198,26303
let print_assert_stmtprint_assert_stmt199,26366
 let prerr_assert_stmtprerr_assert_stmt200,26442
let print_assumeprint_assume201,26519
 let prerr_assumeprerr_assume202,26585
let print_commentprint_comment203,26652
 let prerr_commentprerr_comment204,26720
let print_specialprint_special205,26789
 let prerr_specialprerr_special206,26857
let print_typprint_typ207,26926
 let prerr_typprerr_typ208,26986
let print_regprint_reg209,27047
 let prerr_regprerr_reg210,27107
let print_tmemprint_tmem211,27168
 let prerr_tmemprerr_tmem212,27230
let print_arrayprint_array213,27293
 let prerr_arrayprerr_array214,27357
let print_labelprint_label215,27422
 let prerr_labelprerr_label216,27486
let print_cast_typeprint_cast_type217,27551
 let prerr_cast_typeprerr_cast_type218,27623
let print_binop_typeprint_binop_type219,27696
 let prerr_binop_typeprerr_binop_type220,27770
let print_unop_typeprint_unop_type221,27845
 let prerr_unop_typeprerr_unop_type222,27917
let print_varprint_var223,27990
 let prerr_varprerr_var224,28050
let print_labprint_lab225,28111
 let prerr_labprerr_lab226,28171
let print_attributeprint_attribute227,28232
 let prerr_attributeprerr_attribute228,28304
let print_attributesprint_attributes229,28377
 let prerr_attributesprerr_attributes230,28451
let print_asmprint_asm231,28526
 let prerr_asmprerr_asm232,28586
let print_addressprint_address233,28647
 let prerr_addressprerr_address234,28715
let print_liveoutprint_liveout235,28784
 let prerr_liveoutprerr_liveout236,28852
let print_syntheticprint_synthetic237,28921
 let prerr_syntheticprerr_synthetic238,28993
let print_strattrprint_strattr239,29066
 let prerr_strattrprerr_strattr240,29134
let print_thread_idprint_thread_id241,29203
 let prerr_thread_idprerr_thread_id242,29275
let print_operand_info_specificprint_operand_info_specific243,29348
 let prerr_operand_info_specificprerr_operand_info_specific244,29444
let print_reg_operandprint_reg_operand245,29541
 let prerr_reg_operandprerr_reg_operand246,29617
let print_bit_lengthprint_bit_length247,29694
 let prerr_bit_lengthprerr_bit_length248,29768
let print_taint_idprint_taint_id249,29843
 let prerr_taint_idprerr_taint_id250,29913
let print_operand_usageprint_operand_usage251,29984
 let prerr_operand_usageprerr_operand_usage252,30064
let print_mem_operandprint_mem_operand253,30145
 let prerr_mem_operandprerr_mem_operand254,30221
let print_taint_infoprint_taint_info255,30298
 let prerr_taint_infoprerr_taint_info256,30372
let print_contextprint_context257,30447
 let prerr_contextprerr_context258,30515
let print_expprint_exp259,30584
 let prerr_expprerr_exp260,30644
let print_loadprint_load261,30705
 let prerr_loadprerr_load262,30767
let print_storeprint_store263,30830
 let prerr_storeprerr_store264,30894
let print_binopprint_binop265,30959
 let prerr_binopprerr_binop266,31023
let print_unopprint_unop267,31088
 let prerr_unopprerr_unop268,31150
let print_inteprint_inte269,31213
 let prerr_inteprerr_inte270,31275
let print_castprint_cast271,31338
 let prerr_castprerr_cast272,31400
let print_let_expprint_let_exp273,31463
 let prerr_let_expprerr_let_exp274,31531
let print_unknownprint_unknown275,31600
 let prerr_unknownprerr_unknown276,31668
let print_iteprint_ite277,31737
 let prerr_iteprerr_ite278,31797
let print_extractprint_extract279,31858
 let prerr_extractprerr_extract280,31926
let print_concatprint_concat281,31995
 let prerr_concatprerr_concat282,32061

pp.ml,2024
Pp1,0
module VHVH11,114
module FF12,138
module DD14,157
let output_varnumsoutput_varnums17,234
let many_parensmany_parens19,266
let rec typ_to_stringtyp_to_string21,295
let ct_to_stringct_to_string32,562
let binop_to_stringbinop_to_string38,693
let unop_to_stringunop_to_string59,1041
let reasonable_size_varctxreasonable_size_varctx64,1103
let printed_varctx_warningprinted_varctx_warning65,1138
type varctxvarctx66,1177
let var_to_stringvar_to_string68,1230
class pppp94,2033
  method varvar106,2348
  method typtyp112,2468
  method attrsattrs115,2508
  method attrattr117,2571
  method labellabel142,3772
  method intint146,3871
  method ast_expast_exp180,4936
  method ast_endianast_endian278,7173
  method ast_stmtast_stmt285,7352
  method ast_programast_program330,8108
  method ssa_valuessa_value337,8265
  method ssa_endianssa_endian345,8415
  method ssa_expssa_exp350,8594
  method ssa_stmtssa_stmt416,10056
  method ssa_stmtsssa_stmts460,10845
  method closeclose465,10971
class pp_ocpp_oc470,11030
  method closeclose474,11128
let bufbuf484,11320
let ftft485,11347
let pp2string_with_pppp2string_with_pp492,11583
let pp2stringpp2string500,11740
let make_varctxmake_varctx505,11888
let value_to_stringvalue_to_string510,12008
let attr_to_stringattr_to_string511,12063
let label_to_stringlabel_to_string512,12112
let ssa_exp_to_stringssa_exp_to_string513,12163
let ssa_stmt_to_stringssa_stmt_to_string514,12218
let ast_exp_to_stringast_exp_to_string515,12275
let ast_stmt_to_stringast_stmt_to_string516,12338
let value_to_string_in_varctxvalue_to_string_in_varctx523,12576
let label_to_string_in_varctxlabel_to_string_in_varctx524,12657
let ssa_exp_to_string_in_varctxssa_exp_to_string_in_varctx525,12734
let ssa_stmt_to_string_in_varctxssa_stmt_to_string_in_varctx526,12815
let ast_exp_to_string_in_varctxast_exp_to_string_in_varctx527,12898
let ast_stmt_to_string_in_varctxast_stmt_to_string_in_varctx528,12987

prune_unreachable.mli,131
Prune_unreachable1,0
val prune_unreachable_astprune_unreachable_ast5,164
val prune_unreachable_ssaprune_unreachable_ssa8,277

prune_unreachable.ml,162
Prune_unreachable1,0
module DD1,0
module RR2,84
let prune_unreachable_astprune_unreachable_ast4,106
let prune_unreachable_ssaprune_unreachable_ssa7,200

reachable.mli,653
Reachable1,0
module type GG4,86
  val remove_vertexremove_vertex7,132
  val copy_mapcopy_map8,174
  val v2sv2s9,202
module type ReachReach13,284
    type gtgt17,334
    type vtvt20,371
    val iter_reachableiter_reachable23,483
    val iter_unreachableiter_unreachable26,645
    val fold_reachablefold_reachable29,747
    val fold_unreachablefold_unreachable32,857
    val reachablereachable35,974
    val unreachableunreachable37,1064
    val remove_unreachableremove_unreachable40,1169
    val remove_unreachable_copyremove_unreachable_copy46,1440
module MakeMake50,1545
module ASTAST57,1737
module SSASSA60,1856

reachable.ml,1142
Reachable1,0
module DD3,68
module type GG6,215
  val remove_vertexremove_vertex10,262
  val copy_mapcopy_map11,304
  val v2sv2s12,332
module type ReachReach15,365
  type gtgt18,390
  type vtvt19,400
  val iter_reachableiter_reachable21,415
  val iter_unreachableiter_unreachable22,471
  val fold_reachablefold_reachable24,534
  val fold_unreachablefold_unreachable25,598
  val reachablereachable27,669
  val unreachableunreachable28,707
  val remove_unreachableremove_unreachable30,752
  val remove_unreachable_copyremove_unreachable_copy31,800
module MakeMake36,969
  type gtgt39,998
  type vtvt40,1017
  module VSVS42,1039
 let iter_reachableiter_reachable44,1071
 let fold_reachablefold_reachable48,1174
 let fold_unreachablefold_unreachable53,1277
 let iter_unreachableiter_unreachable58,1469
 let reachablereachable61,1545
 let unreachableunreachable64,1612
 let remove_unreachable_removeremove_unreachable_remove68,1756
 let remove_unreachable_copyremove_unreachable_copy77,2142
 let remove_unreachableremove_unreachable98,2765
module SSASSA104,2825
module ASTAST105,2852

sccvn.mli,62
Sccvn1,0
val replacerreplacer1,0
val aliasedaliased2,62

sccvn.ml,1277
Sccvn1,0
module VHVH42,1301
module CC43,1325
module GG44,1344
module DD46,1360
module DomDom49,1442
type vnvn51,1474
type vn = TopTop51,1474
type vn = Top | HashHash51,1474
type vn = Top | Hash of Ssa.var | HIntHInt51,1474
let toptop52,1532
type expidexpid53,1546
  | ConstConst54,1559
  | ItIt55,1599
  | ExEx56,1622
  | ConCon57,1655
  | BinBin58,1674
  | UnUn59,1706
  | CstCst60,1731
  | UniqueUnique61,1763
  | LdLd62,1819
  | StSt63,1848
  | PhPh64,1882
let vn_comparevn_compare66,1901
let vn_eqvn_eq79,2253
let (==!==!81,2299
let (<=!<=!82,2317
let (<>!<>!83,2361
let expid_eqexpid_eq85,2398
module EHEH137,4362
type rpoinforpoinfo144,4528
  vn_hvn_h145,4579
  eid2vneid2vn146,4630
  vn2eidvn2eid147,4685
let vn2eidvn2eid152,4872
let hash_to_stringhash_to_string157,4996
let meetmeet162,5145
let pos_sdompos_sdom182,5683
let defsitedefsite190,5869
let add_constadd_const208,6305
let get_expidget_expid224,6696
let opt_expidopt_expid257,7818
let lookuplookup342,10399
module DfsDfs361,10872
let fold_postfix_componentfold_postfix_component363,10908
let rporpo369,11034
let hash_replacementhash_replacement454,13555
let replacerreplacer509,15327
let aliasedaliased573,17394

smtexec.mli,1011
Smtexec1,0
type modelmodel10,158
type resultresult13,251
type result = ValidValid13,251
              | InvalidInvalid14,318
              | SmtErrorSmtError15,398
              | TimeoutTimeout16,566
val result_to_stringresult_to_string17,644
class type smtexecsmtexec22,845
  method in_pathin_path24,873
  method printerprinter25,905
  method solve_formula_filesolve_formula_file26,938
  method solvernamesolvername27,1035
  method streaming_printerstreaming_printer28,1064
module type SOLVERSOLVER31,1119
  val solvernamesolvername33,1144
  val in_pathin_path35,1190
  val solve_formula_filesolve_formula_file38,1319
  val check_exp_validitycheck_exp_validity45,1688
  val create_cfg_formulacreate_cfg_formula53,2197
  val sisi67,2714
module STPSTP72,2810
module STPSMTLIBSTPSMTLIB73,2830
module CVC3CVC374,2856
module CVC3SMTLIBCVC3SMTLIB75,2877
module YICESYICES76,2904
module Z3Z377,2926
module BOOLECTORBOOLECTOR78,2945
val solverssolvers81,3051

smtexec.ml,4436
Smtexec1,0
exception Alarm_signal_internalAlarm_signal_internal5,51
exception Alarm_signalAlarm_signal6,85
module DD9,143
type modelmodel13,237
type resultresult15,290
type result = ValidValid15,290
type result = Valid | InvalidInvalid15,290
type result = Valid | Invalid of model | SmtErrorSmtError15,290
type result = Valid | Invalid of model | SmtError of string | TimeoutTimeout15,290
class type smtexecsmtexec19,482
  method in_pathin_path21,510
  method printerprinter22,542
  method solve_formula_filesolve_formula_file23,575
  method solvernamesolvername24,672
  method streaming_printerstreaming_printer25,701
module type SOLVER_INFOSOLVER_INFO29,787
  val solvernamesolvername31,817
  val prognameprogname32,862
  val cmdstrcmdstr33,938
  val parse_resultparse_result34,1037
  val printerprinter35,1165
  val streaming_printerstreaming_printer36,1195
module type SOLVERSOLVER40,1265
  val solvernamesolvername42,1290
  val in_pathin_path43,1316
  val solve_formula_filesolve_formula_file44,1345
  val check_exp_validitycheck_exp_validity45,1472
  val create_cfg_formulacreate_cfg_formula46,1634
  val sisi49,1757
let select_timeoutselect_timeout52,1781
let alarm_handleralarm_handler54,1821
let compute_wp_boringcompute_wp_boring57,1874
let split_cmdstrsplit_cmdstr66,2216
let syscallsyscall73,2395
let result_to_stringresult_to_string136,4211
module MakeMake143,4370
  let solvernamesolvername146,4420
    let write_formulawrite_formula149,4529
    let create_cfg_formulacreate_cfg_formula165,5130
    let in_pathin_path175,5624
    let solve_formula_filesolve_formula_file178,5720
    let check_exp_validitycheck_exp_validity204,6464
    cc208,6653
      method in_pathin_path209,6680
      method printerprinter210,6711
      method solve_formula_filesolve_formula_file211,6744
      method solvernamesolvername212,6797
      method streaming_printerstreaming_printer213,6836
    let sisi216,6898
let parse_modelparse_model220,6927
let print_modelprint_model235,7425
module STP_INFOSTP_INFO239,7602
  let solvernamesolvername241,7627
  let prognameprogname242,7652
  let cmdstrcmdstr243,7675
  let parse_result_builderparse_result_builder244,7702
  let parse_resultparse_result269,8496
  let printerprinter270,8549
  let streaming_printerstreaming_printer271,8600
module STPSTP274,8673
module STPSMTLIB_INFOSTPSMTLIB_INFO276,8702
  let solvernamesolvername278,8733
  let prognameprogname279,8765
  let cmdstrcmdstr280,8788
  let parse_result_builderparse_result_builder281,8825
  let parse_resultparse_result305,9619
  let printerprinter306,9672
  let streaming_printerstreaming_printer307,9736
module STPSMTLIBSTPSMTLIB310,9822
module CVC3_INFOCVC3_INFO312,9863
  let solvernamesolvername314,9889
  let prognameprogname315,9915
  let cmdstrcmdstr316,9939
  let parse_resultparse_result361,11492
  let printerprinter362,11554
  let streaming_printerstreaming_printer363,11605
module CVC3CVC3366,11678
module CVC3SMTLIB_INFOCVC3SMTLIB_INFO368,11709
  let solvernamesolvername370,11741
  let prognameprogname371,11774
  let cmdstrcmdstr372,11798
  let parse_resultparse_result373,11835
  let printerprinter374,11903
  let streaming_printerstreaming_printer375,11958
module CVC3SMTLIBCVC3SMTLIB378,12035
module YICES_INFOYICES_INFO380,12078
  let solvernamesolvername382,12105
  let prognameprogname383,12132
  let cmdstrcmdstr384,12161
  let parse_resultparse_result385,12180
  let printerprinter386,12248
  let streaming_printerstreaming_printer387,12303
module YICESYICES390,12380
module Z3_INFOZ3_INFO392,12413
  let solvernamesolvername394,12437
  let prognameprogname395,12461
  let cmdstrcmdstr396,12483
  let parse_resultparse_result397,12513
  let printerprinter398,12581
  let streaming_printerstreaming_printer399,12680
module Z3Z3402,12801
module BOOLECTOR_INFOBOOLECTOR_INFO404,12828
  let solvernamesolvername406,12859
  let prognameprogname407,12890
  let cmdstrcmdstr408,12919
  let parse_result_builderparse_result_builder409,12950
  let parse_resultparse_result434,13820
  let printerprinter435,13873
  let streaming_printerstreaming_printer436,13937
module BOOLECTORBOOLECTOR439,14023
let solverssolvers441,14064
let runstprunstp454,14288
let query_formulaquery_formula455,14324

smtlib1.ml,2363
Smtlib11,0
module DD9,128
exception No_ruleNo_rule12,212
module VHVH14,231
type sortsort16,256
type sort = BitVecBitVec16,256
type sort = BitVec | BoolBool16,256
let use_booleansuse_booleans18,283
class pppp41,1450
  val used_varsused_vars72,2265
  val ctxctx73,2328
  val mutable unknown_counterunknown_counter75,2379
  val mutable let_counterlet_counter77,2415
  method bool_to_bvbool_to_bv79,2447
  method bv_to_boolbv_to_bool96,2862
  method flushflush111,3166
  method extendextend114,3197
  method unextendunextend119,3320
  method varvar122,3363
  method and_startand_start126,3430
  method and_constraintand_constraint128,3455
  method and_close_constraintand_close_constraint134,3551
  method and_endand_end137,3595
  method let_beginlet_begin141,3734
  method let_endlet_end163,4433
  method let_middlelet_middle168,4499
  method letmeletme175,4709
  method varnamevarname182,4832
  method varsortvarsort186,4898
  method declare_given_freevarsdeclare_given_freevars190,4966
  method declare_new_freevarsdeclare_new_freevars197,5190
  method typtyp201,5299
  method decl_no_printdecl_no_print207,5575
  method predeclare_free_varpredeclare_free_var214,5790
  method print_free_varprint_free_var216,5841
  method decldecl224,5996
  method tryittryit230,6179
  method ast_exp_baseast_exp_base244,6747
  method ast_expast_exp480,13610
  method ast_exp_bvast_exp_bv494,14015
  method ast_exp_bool_baseast_exp_bool_base502,14260
  method ast_exp_boolast_exp_bool702,19806
  method forallforall717,20158
  method existsexists731,20449
  method open_benchmark_with_logicopen_benchmark_with_logic745,20742
  method open_stream_benchmarkopen_stream_benchmark761,21118
  method open_benchmarkopen_benchmark764,21198
  method close_benchmarkclose_benchmark788,21828
  method assert_ast_exp_beginassert_ast_exp_begin791,21874
  method assert_ast_exp_endassert_ast_exp_end799,22052
  method assert_ast_expassert_ast_exp805,22147
  method valid_ast_exp_beginvalid_ast_exp_begin815,22476
  method valid_ast_exp_endvalid_ast_exp_end822,22645
  method valid_ast_expvalid_ast_exp824,22682
  method formulaformula832,22925
  method counterexamplecounterexample836,22993
  method closeclose838,23023
class pp_ocpp_oc844,23082
  method closeclose851,23240

smtlib2.ml,2457
Smtlib21,0
module DD12,146
exception No_ruleNo_rule15,230
module VHVH17,249
type sortsort19,274
type sort = BitVecBitVec19,274
type sort = BitVec | BoolBool19,274
type optionoption21,301
  | SetOptionProduceAssignmentsSetOptionProduceAssignments22,315
let use_booleansuse_booleans24,363
class pppp47,1530
  val used_varsused_vars78,2389
  val ctxctx79,2452
  val mutable unknown_counterunknown_counter81,2499
  val mutable let_counterlet_counter83,2535
  method bool_to_bvbool_to_bv85,2567
  method bv_to_boolbv_to_bool102,2982
  method flushflush117,3286
  method extendextend120,3317
  method unextendunextend125,3440
  method varvar128,3483
  method and_startand_start132,3550
  method and_constraintand_constraint134,3575
  method and_close_constraintand_close_constraint140,3672
  method and_endand_end143,3716
  method let_beginlet_begin147,3855
  method let_endlet_end170,4591
  method let_middlelet_middle175,4663
  method letmeletme182,4872
  method varnamevarname189,4995
  method varsortvarsort193,5061
  method declare_given_freevarsdeclare_given_freevars197,5129
  method declare_new_freevarsdeclare_new_freevars204,5354
  method typtyp208,5470
 method decl_no_printdecl_no_print220,5835
  method predeclare_free_varpredeclare_free_var227,6049
  method print_free_varprint_free_var229,6100
  method decldecl240,6289
  method tryittryit246,6472
  method ast_exp_baseast_exp_base260,7040
  method ast_expast_exp486,13541
  method ast_exp_bvast_exp_bv500,13946
  method ast_exp_bool_baseast_exp_bool_base508,14191
  method ast_exp_boolast_exp_bool708,19736
  method forallforall723,20088
  method existsexists737,20379
  method open_benchmark_with_logicopen_benchmark_with_logic751,20672
  method open_stream_benchmarkopen_stream_benchmark761,20941
  method open_benchmarkopen_benchmark764,21019
  method close_benchmarkclose_benchmark787,21629
  method assert_ast_exp_beginassert_ast_exp_begin790,21664
  method assert_ast_exp_endassert_ast_exp_end798,21838
  method assert_ast_expassert_ast_exp805,21942
  method valid_ast_exp_beginvalid_ast_exp_begin815,22271
  method valid_ast_exp_endvalid_ast_exp_end820,22411
  method valid_ast_expvalid_ast_exp824,22481
  method formulaformula850,23264
  method counterexamplecounterexample856,23375
  method closeclose858,23405
class pp_ocpp_oc864,23464
  method closeclose871,23634

solver.mli,836
Solver1,0
exception Solver_errorSolver_error8,156
module type Solver_OutSolver_Out11,227
  type setset12,256
  val is_satisfiableis_satisfiable13,289
  val is_validis_valid14,381
  class solversolver16,520
    val ss18,546
    method add_bindingadd_binding19,562
    method add_constraintadd_constraint20,656
    method del_bindingdel_binding21,741
    method is_satis_sat22,828
    method is_validis_valid23,892
    method model_expmodel_exp24,963
    method poppop25,1061
    method pushpush26,1128
    method pp_solpp_sol27,1205
  val newsolvernewsolver29,1238
module Z3Z345,1666
module STPExecSTPExec46,1724
module STPSMTLIBExecSTPSMTLIBExec47,1786
module CVC3ExecCVC3Exec48,1869
module CVC3SMTLIBExecCVC3SMTLIBExec49,1933
module YICESExecYICESExec50,2018
val solverssolvers54,2183

solver.ml,4672
Solver1,0
module DD15,241
exception Solver_errorSolver_error18,324
let serrorserror20,360
let byte_array_to_stringbyte_array_to_string23,422
let get_bitsget_bits30,647
let timeouttimeout32,687
module type Solver_InSolver_In35,755
    type setset37,785
    type expexp38,820
    type modelmodel39,858
    val namename40,893
    val mk_setmk_set41,937
    val del_setdel_set42,1007
    val convertconvert43,1076
    val add_bindingadd_binding44,1179
    val del_bindingdel_binding45,1274
    val add_constraintadd_constraint46,1363
    val is_satis_sat47,1449
    val get_modelget_model48,1536
    val model_expmodel_exp49,1623
    val pushpush50,1774
    val poppop51,1875
    val pp_solpp_sol52,1972
    val pp_exppp_exp53,2023
module type Solver_OutSolver_Out56,2114
  type setset57,2143
  val is_satisfiableis_satisfiable58,2154
  val is_validis_valid59,2193
  class solversolver60,2226
    val ss62,2252
    method add_bindingadd_binding63,2268
    method add_constraintadd_constraint64,2320
    method del_bindingdel_binding65,2364
    method is_satis_sat66,2405
    method is_validis_valid67,2430
    method model_expmodel_exp68,2468
    method poppop69,2510
    method pp_solpp_sol70,2532
    method pushpush71,2559
  val newsolvernewsolver73,2588
module NullSolverNullSolver77,2627
  type setset78,2654
  type expexp79,2672
  type modelmodel80,2690
  let namename82,2711
  let abortabort83,2738
  let mk_setmk_set84,2786
  and del_setdel_set85,2807
  and convertconvert86,2829
  and add_bindingadd_binding87,2851
  and del_bindingdel_binding88,2877
  and add_constraintadd_constraint89,2903
  and is_satis_sat90,2932
  and get_modelget_model91,2953
  and model_expmodel_exp92,2977
  and pushpush93,3001
  and poppop94,3020
  and pp_solpp_sol95,3038
  and pp_exppp_exp96,3059
module MakeMake168,4762
  type setset171,4798
  let is_satisfiableis_satisfiable180,5040
  let is_validis_valid190,5374
  class solversolver204,5869
    val ss206,5926
    method pushpush219,6318
    method poppop223,6403
    method add_constraintadd_constraint227,6463
    method add_bindingadd_binding231,6560
    method del_bindingdel_binding235,6658
    method is_satis_sat239,6775
    method is_validis_valid247,6986
    method model_expmodel_exp256,7254
    method pp_solpp_sol259,7318
  let newsolvernewsolver263,7362
module ZIFZIF270,7457
  type expexp275,7489
  type varmapvarmap277,7507
  type modelmodel279,7538
  type setset281,7563
    ctxctx282,7578
    mutable varsvars283,7597
    vars_stackvars_stack284,7624
  let namename287,7662
  let mk_setmk_set289,7681
  let del_setdel_set297,7995
  let bool_to_bvbool_to_bv302,8123
  let convert_binopconvert_binop310,8401
  let convert_unopconvert_unop332,9285
  let convert_castconvert_cast337,9390
  let rec convert_typeconvert_type346,9842
  let rec convertconvert353,10134
  let add_bindingadd_binding406,12221
  let del_bindingdel_binding410,12339
  let add_constraintadd_constraint432,12921
  let pushpush439,13171
  let poppop443,13279
  let get_concrete_modelget_concrete_model459,13732
  let get_concrete_valueget_concrete_value471,14061
  let get_valuesget_values501,15337
  let is_satis_sat520,15856
  let get_modelget_model523,15905
  let model_expmodel_exp526,15947
  let pp_solpp_sol533,16242
  let pp_exppp_exp547,16589
module Z3Z3551,16659
module Z3Z3554,16689
module MakeFromExecMakeFromExec558,16778
  let namename560,16825
  type varmapvarmap562,16852
  type setset564,16887
    mutable formsforms565,16902
    forms_stackforms_stack566,16938
    mutable varsvars567,16980
    vars_stackvars_stack568,17007
  type expexp570,17044
  type modelmodel571,17065
  let mk_setmk_set573,17086
  let del_setdel_set576,17208
  let rec convertconvert578,17230
  let add_bindingadd_binding592,17607
  let del_bindingdel_binding596,17725
  let add_constraintadd_constraint599,17786
  let is_satis_sat602,17848
  let get_modelget_model614,18148
  let model_expmodel_exp615,18193
  let pushpush617,18239
  let poppop621,18392
  let pp_solpp_sol625,18505
  let pp_exppp_exp627,18542
module STPExecSTPExec630,18585
module STPSMTLIBExecSTPSMTLIBExec631,18634
module CVC3ExecCVC3Exec632,18695
module CVC3SMTLIBExecCVC3SMTLIBExec633,18746
module YICESExecYICESExec634,18809
let solverssolvers638,18891
let memtestmemtest652,19250
let stupidteststupidtest659,19564
let test1test1663,19649
let timetime844,27608
let z3_testcasesz3_testcases890,28724

ssa.ml,1114
Ssa1,0
type varvar13,215
type valuevalue15,233
  | IntInt16,246
  | VarVar17,271
  | LabLab18,286
type expexp21,306
  | LoadLoad22,318
  | StoreStore23,390
  | IteIte24,477
  | ExtractExtract25,510
  | ConcatConcat26,551
  | BinOpBinOp27,579
  | UnOpUnOp28,619
  | ValVal29,649
  | CastCast30,666
  | UnknownUnknown31,729
  | PhiPhi32,757
type attrsattrs35,847
type stmtstmt37,877
  | MoveMove38,889
  | JmpJmp40,990
  | CJmpCJmp41,1046
  | LabelLabel43,1169
  | HaltHalt44,1226
  | AssertAssert45,1252
  | AssumeAssume46,1280
  | CommentComment47,1308
let val_falseval_false50,1449
let val_trueval_true51,1494
let val_of_expval_of_exp55,1626
let full_value_eqfull_value_eq65,2019
let quick_value_eqquick_value_eq70,2181
let num_expnum_exp72,2217
let getargs_expgetargs_exp86,2502
let quick_exp_eqquick_exp_eq102,3293
let rec full_exp_eqfull_exp_eq119,3969
let num_stmtnum_stmt141,5013
let getargs_stmtgetargs_stmt152,5198
let quick_stmt_eqquick_stmt_eq166,5706
let full_stmt_eqfull_stmt_eq187,6471
let get_attrsget_attrs208,7360

ssa_simp.ml,59
Ssa_simp1,0
module DD6,109
let simp_cfgsimp_cfg9,188

ssa_simp_misc.ml,87
Ssa_simp_misc1,0
module CC4,36
module DD5,55
let cfg_jumpelimcfg_jumpelim9,240

ssa_slice.ml,440
Ssa_slice1,0
module CHOP_SSACHOP_SSA6,70
 module TraverseTraverse12,187
  let print_cfgprint_cfg14,237
module SGSG26,512
 tt28,531
 module VV29,553
 let iter_vertexiter_vertex30,577
 let iter_succiter_succ31,618
module CompComp34,660
 let get_sccget_scc37,754
 let compute_cdscompute_cds56,1387
 let add_jmp_stmtsadd_jmp_stmts77,2057
 let get_ddsget_dds98,2596
  let sliceslice106,2765
 let chopchop139,3694

ssa_visitor.mli,248
Ssa_visitor1,0
class tt16,532
  method visit_expvisit_exp18,554
  method visit_stmtvisit_stmt21,646
  method visit_valuevisit_value30,982
  method visit_rvarvisit_rvar33,1076
  method visit_avarvisit_avar36,1203
class nopnop42,1466

ssa_visitor.ml,863
Ssa_visitor1,0
class tt8,45
  method visit_expvisit_exp10,111
  method visit_stmtvisit_stmt13,198
  method visit_valuevisit_value16,285
  method visit_rvarvisit_rvar19,414
  method visit_avarvisit_avar25,665
class nopnop28,716
  method visit_expvisit_exp29,739
  method visit_valuevisit_value30,775
  method visit_stmtvisit_stmt31,811
  method visit_avarvisit_avar32,847
  method visit_rvarvisit_rvar33,883
let rec actionaction37,925
let wrapstmtwrapstmt44,1142
let wrapexpwrapexp45,1214
let wrapvalwrapval46,1284
let idid48,1357
let rec exp_acceptexp_accept50,1371
and avar_acceptavar_accept96,2673
and rvar_acceptrvar_accept98,2732
and value_acceptvalue_accept101,2793
and stmt_acceptstmt_accept108,2959
let stmts_acceptstmts_accept129,3631
let prog_acceptprog_accept132,3696
let cfg_acceptcfg_accept139,3908

steensgard.mli,190
Steensgard1,0
type 'a loopinfoloopinfo8,229
  | BBBB9,248
  | OtherOther10,261
  | LoopLoop11,291
val steensgard_aststeensgard_ast13,340
val steensgard_ssasteensgard_ssa15,400

steensgard.ml,355
Steensgard1,0
module DD8,221
module type GG11,308
  val remove_edge_eremove_edge_e15,355
  val v2sv2s16,397
type 'a loopinfoloopinfo19,430
  | BBBB20,449
  | OtherOther21,462
  | LoopLoop22,492
module MakeMake24,541
  let steensgardsteensgard28,627
let steensgard_aststeensgard_ast82,2491
let steensgard_ssasteensgard_ssa86,2562

stp.ml,1616
Stp1,0
module DD10,127
module VHVH15,207
class pppp20,235
  val used_varsused_vars37,737
  val ctxctx38,800
  val mutable unknown_counterunknown_counter40,840
  val mutable let_counterlet_counter42,876
  method and_startand_start44,908
  method and_constraintand_constraint47,941
  method and_close_constraintand_close_constraint56,1066
  method and_endand_end59,1110
  method let_beginlet_begin63,1168
  method let_endlet_end76,1471
  method open_stream_benchmarkopen_stream_benchmark81,1570
  method close_benchmarkclose_benchmark84,1630
  method declare_given_freevarsdeclare_given_freevars86,1661
  method declare_new_freevarsdeclare_new_freevars93,1883
  method predeclare_free_varpredeclare_free_var98,2028
  method flushflush100,2079
  method extendextend103,2110
  method unextendunextend108,2225
  method varvar111,2268
  method varnamevarname118,2436
  method typtyp121,2476
  method decl_no_printdecl_no_print126,2669
  method print_free_varprint_free_var129,2725
  method decldecl132,2834
  method ast_expast_exp136,2923
  method forallforall315,8458
  method existsexists329,8751
  method assert_ast_exp_beginassert_ast_exp_begin343,9044
  method assert_ast_exp_endassert_ast_exp_end352,9236
  method assert_ast_expassert_ast_exp359,9357
  method valid_ast_exp_beginvalid_ast_exp_begin366,9566
  method valid_ast_exp_endvalid_ast_exp_end376,9777
  method valid_ast_expvalid_ast_exp382,9899
  method counterexamplecounterexample389,10105
  method closeclose394,10189
class pp_ocpp_oc400,10248
  method closeclose406,10405

structural_analysis.ml,1038
Structural_analysis1,0
module DD9,217
type region_typeregion_type13,305
  | BlockBlock14,324
  | Block | IfThenIfThen14,324
  | Block | IfThen | IfThenElseIfThenElse14,324
  | Block | IfThen | IfThenElse | CaseCase14,324
  | Block | IfThen | IfThenElse | Case | ProperProper14,324
  | SelfLoopSelfLoop15,372
  | SelfLoop | WhileLoopWhileLoop15,372
  | SelfLoop | WhileLoop | NaturalLoopNaturalLoop15,372
  | SelfLoop | WhileLoop | NaturalLoop | ImproperImproper15,372
type nodenode17,423
type node = BBlockBBlock17,423
type node = BBlock of Cfg.bbid | RegionRegion17,423
module CC19,491
module NodeNode21,511
  tt23,532
  let comparecompare24,548
  let hashhash25,572
  let equalequal26,598
let rtype2srtype2s30,622
let rec node2snode2s41,888
and nodes2snodes2s44,1007
module GG46,1071
module PCPC47,1135
module DFSDFS48,1167
let printgprintg50,1203
let graph_of_cfggraph_of_cfg57,1368
let find_backedgesfind_backedges65,1593
let structural_analysisstructural_analysis81,1975

symbeval.ml,14
Symbeval1,0

symbeval_search.ml,2719
Symbeval_search1,0
module DD4,89
module type SymbSymb10,205
  module MemLMemL12,228
    tt13,248
  module FormForm16,266
      tt17,286
      type initinit18,299
      type outputoutput19,322
      val initinit20,350
      val add_to_formulaadd_to_formula21,378
      val output_formulaoutput_formula22,436
  type myctxmyctx25,482
  exception HaltedHalted27,518
  exception ErrorError28,562
  exception UnknownLabelUnknownLabel29,598
  exception AssertFailedAssertFailed30,637
  exception AssumptionFailedAssumptionFailed31,671
  val initinit32,709
  val evaleval33,758
  val eval_expreval_expr34,791
module type StrategyStrategy38,843
  type myctxmyctx40,899
  tt41,929
  type datadata42,938
  type initdatainitdata43,950
  val start_atstart_at44,966
  val pop_nextpop_next45,1006
  val add_next_statesadd_next_states46,1056
module NaiveSymbNaiveSymb49,1123
  let initinit52,1172
  let evaleval53,1220
module FastSymbFastSymb56,1256
  let initinit59,1300
  let evaleval60,1344
module MakeSearchMakeSearch63,1376
  module SS66,1432
  let rec searchsearch68,1459
  let eval_ast_programeval_ast_program87,2150
module QQ99,2604
  tt101,2664
  let emptyempty103,2697
  let enqueueenqueue105,2720
  let enqueue_allenqueue_all107,2755
  let dequeuedequeue110,2813
  let dequeue_odequeue_o117,2959
module UnboundedBFSUnboundedBFS123,3035
module UnboundedBFSNaiveUnboundedBFSNaive137,3482
module UnboundedBFSFastUnboundedBFSFast138,3533
let bfs_ast_programbfs_ast_program139,3582
let bfs_ast_program_fastbfs_ast_program_fast140,3650
module MaxdepthBFSMaxdepthBFS143,3724
module MaxdepthBFSNaiveMaxdepthBFSNaive158,4127
module MaxdepthBFSFastMaxdepthBFSFast159,4176
let bfs_maxdepth_ast_programbfs_maxdepth_ast_program160,4223
let bfs_maxdepth_ast_program_fastbfs_maxdepth_ast_program_fast161,4288
module UnboundedDFSUnboundedDFS163,4358
module UnboundedDFSNaiveUnboundedDFSNaive176,4711
module UnboundedDFSFastUnboundedDFSFast177,4762
let dfs_ast_programdfs_ast_program178,4811
let dfs_ast_program_fastdfs_ast_program_fast179,4879
module MaxdepthDFSMaxdepthDFS181,4952
module MaxdepthDFSNaiveMaxdepthDFSNaive198,5396
module MaxdepthDFSFastMaxdepthDFSFast199,5445
let dfs_maxdepth_ast_programdfs_maxdepth_ast_program200,5492
let dfs_maxdepth_ast_program_fastdfs_maxdepth_ast_program_fast201,5557
module EdgeMapEdgeMap204,5628
module MaxrepeatDFSMaxrepeatDFS207,5783
module MaxrepeatDFSNaiveMaxrepeatDFSNaive231,6535
module MaxrepeatDFSFastMaxrepeatDFSFast232,6586
let maxrepeat_ast_programmaxrepeat_ast_program233,6635
let maxrepeat_ast_program_fastmaxrepeat_ast_program_fast234,6698

syscall_id.mli,55
Syscall_id1,0
val find_syscallsfind_syscalls21,711

syscall_id.ml,482
Syscall_id1,0
module DD8,120
let syscall_regsyscall_reg11,207
module SS13,244
module DFSPECDFSPEC15,280
  module GG16,303
  module LL17,326
    tt18,346
    type t = TopTop18,346
    type t = Top | SetSet18,346
    let toptop19,376
    let equalequal20,394
    let meetmeet24,513
  let transfer_functiontransfer_function30,640
  let s0s048,1297
  let initinit56,1573
  let dirdir57,1603
module DFDF61,1643
let find_syscallsfind_syscalls63,1683

syscall_models.ml,206
Syscall_models1,0
let x86_is_system_callx86_is_system_call17,276
let linux_get_namelinux_get_name22,415
let linux_get_modellinux_get_model53,1083
let linux_syscall_to_illinux_syscall_to_il66,1335

template.ml,1042
Template1,0
module DD8,69
module type TypesTypes11,152
  type environenviron13,176
  type statestate14,191
  type result_expresult_exp15,204
  type result_stmtresult_stmt16,222
module AbstractAbstract19,248
  type process_expprocess_exp22,288
  type process_stmtprocess_stmt23,352
  module type ExprsExprs25,421
    val varvar27,449
    val intint28,488
    val lablab29,537
    val iteite30,577
    val extractextract31,640
    val concatconcat32,703
    val binopbinop33,756
    val unopunop34,822
    val castcast35,877
    val lettlett36,938
    val loadload37,999
    val storestore38,1068
    val unknownunknown39,1147
  module type StmtsStmts42,1194
    val movemove44,1222
    val halthalt45,1286
    val jmpjmp46,1342
    val cjmpcjmp47,1398
    val asserttassertt48,1474
    val assumeassume49,1530
    val commentcomment50,1585
    val labellabel51,1622
    val specialspecial52,1659
  module MakeMake55,1725
    let exprexpr58,1784
    let stmtstmt73,2250

test_common.ml,1249
Test_common1,0
exception RangeNotFoundRangeNotFound11,146
let leave_filesleave_files13,188
let speclistspeclist14,218
let check_filecheck_file19,347
let mkdir_and_ignoremkdir_and_ignore24,480
let rm_and_ignorerm_and_ignore27,551
let rec rm_and_ignore_listrm_and_ignore_list33,721
let stpstp40,864
let does_stp_workdoes_stp_work42,883
module SolverCheckSolverCheck47,997
  let check_solver_pathcheck_solver_path48,1043
let check_stp_pathcheck_stp_path52,1180
let pin_pathpin_path56,1289
let pinpin59,1408
let gentrace_pathgentrace_path60,1426
let gentracegentrace61,1473
let pin_out_suffixpin_out_suffix62,1504
let rec find_pin_outfind_pin_out65,1549
let check_pin_setupcheck_pin_setup72,1795
let rec find_funsfind_funs95,2603
let rec find_funfind_fun99,2807
let rec find_callfind_call101,2878
let inject_stmtinject_stmt112,3214
let halt_stmthalt_stmt143,4416
let check_bigint_answercheck_bigint_answer146,4454
let check_eaxcheck_eax158,4780
let check_functionscheck_functions168,4987
let typechecktypecheck171,5077
let find_prog_chunkfind_prog_chunk174,5188
let summarizesummarize197,6125
let rec summarize_resultssummarize_results209,6518
let backwards_taintbackwards_taint214,6632

to_c.ml,680
To_c1,0
module VHVH18,230
class pppp20,253
  val specialspecial42,1053
  val mem_loadmem_load43,1083
  val mem_storemem_store44,1115
  method ast_programast_program48,1207
  method format_expformat_exp70,1753
  method ast_stmtast_stmt72,1793
  method ast_stmtsast_stmts114,2699
  method format_typformat_typ118,2750
  method format_initializationsformat_initializations120,2783
  method ast_expast_exp133,3019
  method format_varformat_var232,5591
  method binop_to_stringbinop_to_string236,5681
  method typtyp247,5951
  method format_nameformat_name261,6346
  method format_valueformat_value288,6952
  method format_castformat_cast303,7444

traces.ml,12
Traces1,0

traces_backtaint.mli,352
Traces_backtaint1,0
module LocLoc11,279
  tt13,296
  type t = VV13,296
  type t = V of Var.t | MM13,296
  val comparecompare14,343
module LocSetLocSet16,377
val backwards_taintbackwards_taint30,925
val print_locsetprint_locset33,1044
val exp_to_locsetexp_to_locset36,1234
val identify_fault_locationidentify_fault_location43,1593

traces_backtaint.ml,521
Traces_backtaint1,0
module DD7,87
module LocLoc12,265
  tt13,285
  type t = VV13,285
  type t = V of Var.t | MM13,285
  let comparecompare14,332
  let to_stringto_string20,520
module LocSetLocSet25,654
module VHVH26,684
let print_locsetprint_locset29,710
let add_referencedadd_referenced38,1089
let interesting_mem_writeinteresting_mem_write71,2269
let backwards_taintbackwards_taint94,2916
let exp_to_locsetexp_to_locset131,4175
let identify_fault_locationidentify_fault_location150,4768

traces_stream.mli,93
Traces_stream1,0
val concreteconcrete10,301
val generate_formulagenerate_formula17,654

traces_stream.ml,19
Traces_stream1,0

traces_surgical.ml,518
Traces_surgical1,0
module DD8,242
module NameSetNameSet14,304
let mem_namemem_name51,960
let used_varsused_vars53,1015
let newvarnewvar55,1053
let trace_transform_stmt2trace_transform_stmt266,1300
let get_symbolic_seeds2get_symbolic_seeds2147,4184
let run_and_subst_blockrun_and_subst_block166,4833
let run_and_subst_blocksrun_and_subst_blocks244,7677
let dicerdicer257,8070
let concrete_substitutionconcrete_substitution308,9515
let check_slicecheck_slice322,10123
let sliceslice328,10345

tunegc.mli,36
Tunegc1,0
val set_gcset_gc7,166

tunegc.ml,35
Tunegc1,0
let set_gcset_gc3,92

type.mli,1994
Type1,0
type addraddr7,100
type labellabel10,178
  | NameName11,192
  | AddrAddr12,234
typtyp16,356
  | RegReg17,367
  | TMemTMem18,430
  | ArrayArray19,480
type cast_typecast_type29,969
  | CAST_UNSIGNEDCAST_UNSIGNED30,986
  | CAST_SIGNEDCAST_SIGNED31,1036
  | CAST_HIGHCAST_HIGH32,1089
  | CAST_LOWCAST_LOW33,1148
type binop_typebinop_type36,1252
  | PLUSPLUS37,1270
  | MINUSMINUS38,1331
  | TIMESTIMES39,1384
  | DIVIDEDIVIDE40,1451
  | SDIVIDESDIVIDE41,1496
  | MODMOD42,1540
  | SMODSMOD43,1573
  | LSHIFTLSHIFT44,1605
  | RSHIFTRSHIFT45,1635
  | ARSHIFTARSHIFT46,1679
  | ANDAND47,1724
  | OROR48,1779
  | XORXOR49,1832
  | EQEQ50,1887
  | NEQNEQ51,1948
  | LTLT52,2014
  | LELE53,2047
  | SLTSLT54,2092
  | SLESLE55,2124
type unop_typeunop_type59,2234
  | NEGNEG60,2251
  | NOTNOT61,2290
type pospos65,2371
type taint_typetaint_type69,2427
type taint_type = TaintTaint69,2427
type usageusage70,2458
type usage = RDRD70,2458
type usage = RD | WRWR70,2458
type usage = RD | WR | RWRW70,2458
type contextcontext73,2542
   namename75,2561
   memmem76,2580
   tt77,2597
   indexindex78,2613
   valuevalue79,2630
   usageusage80,2660
   tainttaint81,2678
type attributeattribute85,2767
  | PosPos86,2785
  | AsmAsm87,2855
  | AddressAddress88,2929
  | LiveoutLiveout89,2996
  | StrAttrStrAttr90,3075
  | ContextContext91,3146
  | ThreadIdThreadId94,3311
  | ExnAttrExnAttr95,3368
  | InitROInitRO96,3439
  | SyntheticSynthetic97,3511
type attributesattributes98,3567
type 'a visit_actionvisit_action104,3849
  | SkipChildrenSkipChildren105,3872
  | DoChildrenDoChildren107,3967
  | ChangeToChangeTo108,4082
  | ChangeToAndDoChildrenChangeToAndDoChildren109,4160
type formula_modeformula_mode116,4450
type formula_mode = SatSat116,4450
type formula_mode = Sat | ValidityValidity116,4450
type formula_mode = Sat | Validity | ForallsForalls116,4450

type.ml,1994
Type1,0
type addraddr7,100
type labellabel10,178
  | NameName11,192
  | AddrAddr12,234
typtyp16,356
  | RegReg17,367
  | TMemTMem18,430
  | ArrayArray19,480
type cast_typecast_type29,969
  | CAST_UNSIGNEDCAST_UNSIGNED30,986
  | CAST_SIGNEDCAST_SIGNED31,1036
  | CAST_HIGHCAST_HIGH32,1089
  | CAST_LOWCAST_LOW33,1148
type binop_typebinop_type36,1252
  | PLUSPLUS37,1270
  | MINUSMINUS38,1331
  | TIMESTIMES39,1384
  | DIVIDEDIVIDE40,1451
  | SDIVIDESDIVIDE41,1496
  | MODMOD42,1540
  | SMODSMOD43,1573
  | LSHIFTLSHIFT44,1605
  | RSHIFTRSHIFT45,1635
  | ARSHIFTARSHIFT46,1679
  | ANDAND47,1724
  | OROR48,1779
  | XORXOR49,1832
  | EQEQ50,1887
  | NEQNEQ51,1948
  | LTLT52,2014
  | LELE53,2047
  | SLTSLT54,2092
  | SLESLE55,2124
type unop_typeunop_type59,2234
  | NEGNEG60,2251
  | NOTNOT61,2290
type pospos65,2371
type taint_typetaint_type69,2427
type taint_type = TaintTaint69,2427
type usageusage70,2458
type usage = RDRD70,2458
type usage = RD | WRWR70,2458
type usage = RD | WR | RWRW70,2458
type contextcontext73,2542
   namename75,2561
   memmem76,2580
   tt77,2597
   indexindex78,2613
   valuevalue79,2630
   usageusage80,2660
   tainttaint81,2678
type attributeattribute85,2767
  | PosPos86,2785
  | AsmAsm87,2855
  | AddressAddress88,2929
  | LiveoutLiveout89,2996
  | StrAttrStrAttr90,3075
  | ContextContext91,3146
  | ThreadIdThreadId94,3311
  | ExnAttrExnAttr95,3368
  | InitROInitRO96,3439
  | SyntheticSynthetic97,3511
type attributesattributes98,3567
type 'a visit_actionvisit_action104,3849
  | SkipChildrenSkipChildren105,3872
  | DoChildrenDoChildren107,3967
  | ChangeToChangeTo108,4082
  | ChangeToAndDoChildrenChangeToAndDoChildren109,4160
type formula_modeformula_mode116,4450
type formula_mode = SatSat116,4450
type formula_mode = Sat | ValidityValidity116,4450
type formula_mode = Sat | Validity | ForallsForalls116,4450

typecheck.mli,376
Typecheck1,0
exception TypeErrorTypeError6,79
val infer_astinfer_ast11,208
val typecheck_expressiontypecheck_expression16,332
val typecheck_stmttypecheck_stmt22,501
val typecheck_progtypecheck_prog28,663
val is_integer_typeis_integer_type36,855
val is_mem_typeis_mem_type38,962
val bits_of_widthbits_of_width40,1073
val bytes_of_widthbytes_of_width45,1252

typecheck.ml,668
Typecheck1,0
module DD8,89
exception TypeErrorTypeError11,173
let terrorterror13,204
let subtsubt16,283
let check_subtcheck_subt19,311
let is_integer_typeis_integer_type23,437
let is_mem_typeis_mem_type27,517
let bits_of_widthbits_of_width29,562
let bytes_of_widthbytes_of_width33,644
let rec infer_ast_internalinfer_ast_internal38,765
and check_samecheck_same123,3552
and check_regcheck_reg131,3904
and check_boolcheck_bool135,4042
and check_idxcheck_idx139,4165
let infer_astinfer_ast153,4857
let typecheck_expressiontypecheck_expression155,4899
let typecheck_stmttypecheck_stmt161,5052
let typecheck_progtypecheck_prog191,5764

unroll.mli,279
Unroll1,0
type unrollfunrollf5,136
type node_mappingnode_mapping9,294
val unroll_loops_steensgardunroll_loops_steensgard15,538
val unroll_loops_saunroll_loops_sa20,735
val unroll_loopsunroll_loops24,874
val unroll_loops_with_mappingunroll_loops_with_mapping28,1010

unroll.ml,816
Unroll1,0
module CC5,60
module DD6,79
type unrollfunrollf10,192
type node_mappingnode_mapping12,249
type unrollinfounrollinfo15,345
  | BBBB16,363
  | OtherOther17,381
  | LoopLoop18,410
let rec string_of_unrollinfostring_of_unrollinfo20,489
let rec bbs_from_unrollinfobbs_from_unrollinfo26,832
let find_loop_headfind_loop_head30,965
let unrollinfo_from_steensgardunrollinfo_from_steensgard49,1761
let unrollinfo_from_saunrollinfo_from_sa65,2322
let unroll_loopunroll_loop84,2967
let unroll_bbsunroll_bbs233,8539
let unroll_loops_internalunroll_loops_internal239,8696
let unroll_loops_with_mappingunroll_loops_with_mapping279,10310
let unroll_loops_steensgardunroll_loops_steensgard282,10422
let unroll_loops_saunroll_loops_sa285,10509
let unroll_loopsunroll_loops288,10609

util.mli,2560
Util1,0
val idid7,106
val currycurry10,156
val uncurryuncurry13,234
val ( <@<@16,317
val hd_tlhd_tl19,410
val foldnfoldn22,505
val foldn64foldn6425,614
val mapnmapn28,736
val list_memlist_mem34,935
val list_argmaxlist_argmax37,1067
val list_unionlist_union40,1201
val list_intersectionlist_intersection43,1305
val list_does_intersectlist_does_intersect46,1426
val list_differencelist_difference49,1528
val list_subsetlist_subset52,1656
val list_set_eqlist_set_eq55,1763
val list_uniquelist_unique59,1933
val list_poplist_pop62,2016
val list_pushlist_push65,2103
val list_lastlist_last68,2188
val list_last_optionlist_last_option71,2329
val list_insertlist_insert93,3001
val list_removelist_remove96,3138
val list_deletelist_delete100,3290
val list_comparelist_compare103,3371
val list_cart_prod2list_cart_prod2106,3518
val list_cart_prod3list_cart_prod3109,3670
val list_cart_prod4list_cart_prod4112,3841
val list_permutationlist_permutation119,4203
val list_find_optionlist_find_option121,4414
val list_partition_lastlist_partition_last128,4650
val list_shortest_firstlist_shortest_first132,4817
val change_extchange_ext143,5279
val list_directorylist_directory146,5384
val trim_newlinetrim_newline149,5479
val union_findunion_find155,5678
val split_common_prefixsplit_common_prefix160,5908
val split_common_suffixsplit_common_suffix165,6180
val apply_optionapply_option175,6580
val memoizememoize178,6671
val get_hash_keysget_hash_keys187,6938
val get_hash_valuesget_hash_values191,7125
module HashUtilHashUtil194,7230
  val hashtbl_eqhashtbl_eq199,7395
  val hashtbl_replacehashtbl_replace203,7544
  val get_hash_keysget_hash_keys207,7711
  val get_hash_valuesget_hash_values211,7895
val hashtbl_eqhashtbl_eq216,8020
val int64_ucompareint64_ucompare222,8181
val int64_udivint64_udiv225,8250
val int64_uremint64_urem228,8318
val int64_umaxint64_umax231,8380
val int64_uminint64_umin234,8442
val int64_to_binaryint64_to_binary237,8537
val big_int_to_binarybig_int_to_binary242,8687
val big_int_to_hexbig_int_to_hex245,8804
val big_int_of_stringbig_int_of_string248,8901
val big_int_of_binstringbig_int_of_binstring251,8996
val run_with_remapped_fdrun_with_remapped_fd256,9229
module StatusPrinterStatusPrinter267,9545
  val initinit270,9640
  val incinc273,9726
  val stopstop276,9809
val print_separated_listprint_separated_list283,10007
val print_obj_infoprint_obj_info288,10233
val print_mem_usageprint_mem_usage292,10393

util.ml,2996
Util1,0
let idid5,88
let currycurry7,109
let uncurryuncurry9,142
let (<@<@11,178
let hd_tlhd_tl13,212
let rec foldnfoldn17,285
let rec foldn64foldn6423,468
let mapnmapn31,734
let rec list_memlist_mem35,870
let list_argmaxlist_argmax41,999
let list_unionlist_union50,1269
let list_intersectionlist_intersection54,1370
let list_does_intersectlist_does_intersect58,1489
let list_differencelist_difference62,1561
let list_subsetlist_subset69,1705
let list_set_eqlist_set_eq72,1769
let list_uniquelist_unique74,1827
let list_poplist_pop79,1984
let list_pushlist_push84,2066
let rec list_lastlist_last88,2159
let list_last_optionlist_last_option93,2297
let list_insertlist_insert95,2366
let list_removelist_remove108,2648
let list_deletelist_delete120,2855
let list_comparelist_compare128,3048
let list_cart_prod2list_cart_prod2130,3089
let list_cart_prod3list_cart_prod3136,3181
let list_cart_prod4list_cart_prod4139,3269
let list_permutationlist_permutation142,3363
let list_find_optionlist_find_option152,3711
let list_partition_lastlist_partition_last199,5122
let list_shortest_firstlist_shortest_first205,5306
let change_extchange_ext210,5430
let list_directorylist_directory215,5603
let trim_newlinetrim_newline226,6001
let union_findunion_find231,6148
let rec split_common_prefixsplit_common_prefix247,6549
let split_common_suffixsplit_common_suffix259,6896
let apply_optionapply_option263,7057
let memoizememoize268,7131
let get_hash_keysget_hash_keys289,7676
let get_hash_valuesget_hash_values294,7852
module HashUtilHashUtil299,8035
  let hashtbl_eqhashtbl_eq302,8075
  let hashtbl_replacehashtbl_replace313,8336
  let get_hash_keysget_hash_keys317,8413
  let get_hash_valuesget_hash_values322,8591
let hashtbl_eqhashtbl_eq329,8842
let int64_ucompareint64_ucompare345,9135
let int64_udivint64_udiv350,9252
let int64_uremint64_urem364,9685
let int64_umaxint64_umax367,9752
let int64_uminint64_umin370,9816
let int64_to_binaryint64_to_binary374,9937
let big_int_to_binarybig_int_to_binary393,10404
let big_int_to_hexbig_int_to_hex414,11042
let big_int_of_stringbig_int_of_string433,11721
let big_int_of_binstringbig_int_of_binstring482,13603
let run_with_remapped_fdrun_with_remapped_fd488,13889
module StatusPrinterStatusPrinter528,14864
  module DD530,14894
  let updatetimeupdatetime534,14984
  let totaltotal535,15060
  let currentcurrent536,15080
  let percentagepercentage537,15102
  let lastlast538,15127
  let lasttimelasttime539,15146
  let messagemessage540,15171
  let starttimestarttime541,15200
  let cpercentcpercent543,15227
  let raterate548,15319
  let updateupdate556,15517
  let initinit568,15843
  let incinc578,16055
  let stopstop586,16291
let rec print_separated_listprint_separated_list593,16447
let print_obj_infoprint_obj_info602,16649
let syscallsyscall613,17170
let print_mem_usageprint_mem_usage639,18049

utils_common.ml,306
Utils_common1,0
module DD6,94
let rename_astexprename_astexp12,237
let optimize_cfgoptimize_cfg22,433
let get_functionsget_functions35,900
module SolverSolver62,1853
  let solversolver64,1911
  let set_solverset_solver66,1950
  let solverssolvers71,2079
let jitexecutejitexecute74,2159

var.mli,295
Var1,0
tt6,55
type t = private VV6,55
val newvarnewvar14,383
val renewvarrenewvar19,576
val typtyp22,639
val namename25,705
val hashhash29,762
val equalequal30,782
val comparecompare31,809
module VarHashVarHash35,888
module VarMapVarMap36,933
module VarSetVarSet37,976

var.ml,362
Var1,0
module DD5,79
module VV8,155
  tt10,174
  type t = VV10,174
  let hashhash13,216
  let equalequal15,243
  let comparecompare18,327
module VHMakeVHMake23,393
module VarHashVarHash25,426
module VarMapVarMap31,587
module VarSetVarSet32,618
let newvarnewvar36,652
let renewvarrenewvar46,845
let typtyp48,889
let namename50,913

var_temp.mli,95
Var_temp1,0
val is_temp_nameis_temp_name13,459
val is_tempis_temp16,559
val ntnt20,669

var_temp.ml,165
Var_temp1,0
let temp_prefixtemp_prefix1,0
let temp_prefix_lentemp_prefix_len2,23
let is_temp_nameis_temp_name4,72
let is_tempis_temp8,201
let ntnt11,250

vc.mli,2088
Vc1,0
type optionsoptions13,413
  kk14,430
  modemode15,575
  full_substfull_subst16,828
val default_optionsdefault_options20,1070
type ast_vcast_vc23,1182
type cfg_vccfg_vc26,1338
type ssa_vcssa_vc29,1494
tt32,1601
type t = AstVcAstVc32,1601
type t = AstVc of ast_vc | CfgVcCfgVc32,1601
type t = AstVc of ast_vc | CfgVc of cfg_vc | SsaVcSsaVc32,1601
val vc_astprogvc_astprog36,1811
val vc_astcfgvc_astcfg39,1961
val vc_ssacfgvc_ssacfg42,2110
val compute_dwpcompute_dwp47,2277
val compute_dwp_gencompute_dwp_gen48,2302
val compute_dwp_letcompute_dwp_let53,2492
val compute_dwp_let_gencompute_dwp_let_gen54,2521
val compute_fwpcompute_fwp60,2789
val compute_fwp_gencompute_fwp_gen61,2814
val compute_fwp_uwpcompute_fwp_uwp65,2946
val compute_fwp_uwp_gencompute_fwp_uwp_gen66,2975
val compute_fwp_lazyconccompute_fwp_lazyconc69,3080
val compute_fwp_lazyconc_gencompute_fwp_lazyconc_gen70,3114
val compute_fwp_lazyconc_uwpcompute_fwp_lazyconc_uwp74,3264
val compute_fwp_lazyconc_uwp_gencompute_fwp_lazyconc_uwp_gen75,3302
val compute_dwp1compute_dwp178,3396
val compute_dwp1_gencompute_dwp1_gen80,3461
val compute_flanagansaxecompute_flanagansaxe83,3571
val compute_flanagansaxe_gencompute_flanagansaxe_gen84,3605
val compute_wpcompute_wp90,3790
val compute_wp_gencompute_wp_gen91,3814
val compute_passified_wpcompute_passified_wp94,3903
val compute_passified_wp_gencompute_passified_wp_gen95,3937
val compute_uwpcompute_uwp99,4099
val compute_uwp_gencompute_uwp_gen100,4124
val compute_uwp_efficientcompute_uwp_efficient104,4270
val compute_uwp_efficient_gencompute_uwp_efficient_gen105,4305
val compute_fse_bfscompute_fse_bfs111,4464
val compute_fse_bfs_gencompute_fse_bfs_gen112,4493
val compute_fse_bfs_maxdepthcompute_fse_bfs_maxdepth116,4623
val compute_fse_bfs_maxdepth_gencompute_fse_bfs_maxdepth_gen117,4668
val compute_fse_maxrepeatcompute_fse_maxrepeat121,4846
val compute_fse_maxrepeat_gencompute_fse_maxrepeat_gen122,4888
val vclistvclist128,5051
val pred_vclistpred_vclist132,5170

vc.ml,2048
Vc1,0
module DD6,57
type optionsoptions11,164
  kk12,181
  modemode13,192
  full_substfull_subst14,215
let default_optionsdefault_options17,239
type ast_vcast_vc23,310
type cfg_vccfg_vc24,384
type ssa_vcssa_vc25,458
tt27,533
type t = | AstVcAstVc27,533
         | CfgVcCfgVc28,560
         | SsaVcSsaVc29,587
let vc_astprogvc_astprog31,615
let vc_astcfgvc_astcfg40,952
let vc_ssacfgvc_ssacfg48,1251
let compute_dwp1compute_dwp153,1452
let compute_dwp1_gencompute_dwp1_gen57,1624
let compute_wpcompute_wp59,1667
let compute_wp_gencompute_wp_gen62,1751
let compute_passified_wpcompute_passified_wp64,1790
let compute_passified_wp_gencompute_passified_wp_gen67,1931
let compute_uwpcompute_uwp69,1990
let compute_uwp_gencompute_uwp_gen72,2092
let compute_uwp_efficientcompute_uwp_efficient74,2133
let compute_uwp_efficient_gencompute_uwp_efficient_gen77,2262
let compute_dwpcompute_dwp79,2323
let compute_dwp_gencompute_dwp_gen82,2459
let compute_dwp_letcompute_dwp_let84,2500
let compute_dwp_let_gencompute_dwp_let_gen87,2644
let compute_fwpcompute_fwp89,2693
let compute_fwp_gencompute_fwp_gen92,2830
let compute_fwp_uwpcompute_fwp_uwp94,2871
let compute_fwp_uwp_gencompute_fwp_uwp_gen97,3002
let compute_fwp_lazyconccompute_fwp_lazyconc99,3051
let compute_fwp_lazyconc_gencompute_fwp_lazyconc_gen104,3320
let compute_fwp_lazyconc_uwpcompute_fwp_lazyconc_uwp106,3379
let compute_fwp_lazyconc_uwp_gencompute_fwp_lazyconc_uwp_gen111,3631
let compute_flanagansaxecompute_flanagansaxe113,3698
let compute_flanagansaxe_gencompute_flanagansaxe_gen116,3852
let compute_fse_bfscompute_fse_bfs118,3911
let compute_fse_bfs_gencompute_fse_bfs_gen123,4105
let compute_fse_bfs_maxdepthcompute_fse_bfs_maxdepth125,4154
let compute_fse_bfs_maxdepth_gencompute_fse_bfs_maxdepth_gen130,4379
let compute_fse_maxrepeatcompute_fse_maxrepeat132,4452
let compute_fse_maxrepeat_gencompute_fse_maxrepeat_gen137,4680
let vclistvclist139,4747
let pred_vclistpred_vclist155,5261

vsa.ml,4732
Vsa1,0
module VMVM8,156
module DD15,225
exception UnimplementedUnimplemented19,304
let rec uint64_gcduint64_gcd21,343
module II25,425
let (&%&%27,490
let (|%|%28,510
let (^%^%29,529
let (+%+%30,549
let (-%-%31,566
let bnotbnot32,583
let bits_of_widthbits_of_width35,605
let fwd_transfer_stmt_to_blockfwd_transfer_stmt_to_block37,650
let spsp41,826
module SISI45,947
  tt50,1112
  let to_stringto_string52,1146
  let highbithighbit54,1213
  let extendextend57,1280
  let trunctrunc62,1391
  let maximaxi67,1509
  let minimini68,1540
  let toptop69,1576
  let singlesingle71,1612
  let of_bap_intof_bap_int72,1638
  let zerozero74,1698
  let oneone75,1721
  let minus_oneminus_one76,1743
  let is_reducedis_reduced79,1776
  let check_reducedcheck_reduced85,1990
  let check_reduced2check_reduced289,2142
  let renormrenorm93,2222
  let renormbinrenormbin98,2341
  let renormunrenormun99,2386
  let addadd103,2467
  let addadd116,2899
  let negneg119,2966
  let negneg128,3161
  let subsub131,3256
  let minorminor135,3298
  let maxormaxor154,3767
  let ntzntz171,4189
  let logorlogor180,4365
  let logorlogor207,5392
  let lognotlognot210,5444
  let lognotlognot213,5501
  let logandlogand217,5583
  let logxorlogxor221,5675
  let modulusmodulus227,5821
  let modulusmodulus232,5926
  let toshiftstoshifts236,6052
  let mk_rshiftmk_rshift251,6411
  let rshiftrshift267,6906
  let arshiftarshift270,6990
  let yesyes273,7069
  and nono274,7094
  and maybemaybe275,7115
  let eqeq277,7144
  let unionunion292,7450
  let unionunion307,7867
  let rec foldfold312,7987
module SimpleVSASimpleVSA319,8163
  module DFPDFP321,8189
    module GG323,8213
    module LL324,8238
      tt326,8264
      let toptop327,8289
      let equalequal328,8314
      let meetmeet329,8345
    let s0s0341,8556
    let initinit342,8595
    let dirdir343,8618
    let binop_to_si_functionbinop_to_si_function345,8655
    let unop_to_si_functionunop_to_si_function367,9130
    let bits_of_valbits_of_val371,9217
    let rec transfer_stmttransfer_stmt376,9360
    let transfer_functiontransfer_function467,11933
  module DFDF471,12012
module VSVS478,12099
  type regionregion480,12118
  type addressaddress482,12152
  tt484,12184
  let globalglobal488,12303
  let toptop490,12413
  let pp_addresspp_address492,12429
  let pppp497,12556
  let kindkind506,12700
  let singlesingle512,12823
  let of_bap_intof_bap_int513,12864
  let zerozero515,12918
  let oneone516,12951
  let minus_oneminus_one517,12982
  let addadd520,13027
  let subsub527,13257
  let makeothermakeother533,13383
  let logandlogand546,13793
  let logorlogor548,13851
  let logxorlogxor550,13907
  let yesyes552,13953
  let nono553,13984
  let maybemaybe554,14013
  let eqeq557,14101
  let unionunion566,14373
  let foldfold577,14683
module RegionVSARegionVSA586,14918
  module DFPDFP588,14944
    module GG590,14968
    module LL591,14993
      tt593,15019
      let toptop594,15044
      let equalequal595,15069
      let meetmeet596,15100
    let s0s0608,15311
    let initinit609,15350
    let dirdir612,15420
    let binop_to_vs_functionbinop_to_vs_function614,15457
    let unop_to_vs_functionunop_to_vs_function636,15861
    let rec transfer_stmttransfer_stmt639,15947
    let transfer_functiontransfer_function683,17225
  module DFDF687,17304
module AllocEnvAllocEnv692,17393
  type alocaloc693,17418
  module M1M1694,17450
  module M2M2695,17530
  tt698,17652
  let toptop700,17679
  let foldfold703,17750
  let read_concreteread_concrete707,17847
  let readread711,17941
  let write_concrete_strongwrite_concrete_strong725,18306
  let write_concrete_weakwrite_concrete_weak736,18629
  let writewrite739,18741
  let unionunion752,19075
  let equalequal755,19160
module AbsEnvAbsEnv760,19232
  type valuevalue762,19256
  tt765,19355
  let emptyempty767,19378
  let value_equalvalue_equal769,19402
  let equalequal774,19546
  let do_find_vsdo_find_vs779,19598
  let ssaval2vsssaval2vs785,19729
  let do_find_aedo_find_ae790,19924
module AlmostVSAAlmostVSA803,20176
  module DFPDFP805,20202
    module GG807,20226
    module LL808,20251
      tt810,20277
      let toptop811,20301
      let equalequal812,20330
      let meetmeet813,20361
    let s0s0829,20752
    let init_varsinit_vars834,20952
    let initinit837,21061
    let dirdir840,21100
    let rec transfer_stmttransfer_stmt843,21138
    let transfer_functiontransfer_function930,23715
  module DFDF934,23794

wp.mli,518
Wp1,0
val wpwp23,793
val passified_wppassified_wp27,1004
val build_uwpbuild_uwp29,1082
val dijkstra_uwpdijkstra_uwp35,1438
val build_passified_uwpbuild_passified_uwp38,1533
val efficient_uwpefficient_uwp46,2044
val efficient_wpefficient_wp51,2266
val flanagansaxeflanagansaxe66,2812
val dwp_1stdwp_1st75,3201
val dwpdwp83,3488
val dwp_letdwp_let91,3865
val variableifyvariableify100,4209
val assignments_to_expassignments_to_exp108,4618
val assignments_to_letsassignments_to_lets112,4797

wp.ml,1135
Wp1,0
module DD12,187
module BHBH15,264
module VHVH16,283
let wpwp18,308
let passified_wppassified_wp36,752
module CACA56,1323
module RevCFGRevCFG58,1344
  tt60,1367
  module VV61,1385
  let iter_vertexiter_vertex62,1405
  let iter_succiter_succ63,1442
  let in_degreein_degree64,1475
module ToposortToposort67,1514
module RToposortRToposort68,1566
let build_uwpbuild_uwp70,1619
let dijkstra_uwpdijkstra_uwp102,2878
let build_passified_uwpbuild_passified_uwp104,2911
let efficient_uwpefficient_uwp160,4980
let efficient_wpefficient_wp162,5039
let dwp_namedwp_name216,6485
let dwp_namedwp_name217,6510
let ast_sizeast_size219,6530
let variableifyvariableify231,6745
let rm_useless_varsrm_useless_vars239,6941
let assignments_to_expassignments_to_exp276,8043
let assignments_to_exp_optassignments_to_exp_opt287,8318
let assignments_to_letsassignments_to_lets291,8408
let dwp_gdwp_g303,8769
let dwp_fdwp_f326,9602
let dwp_1stdwp_1st350,10365
let dwp_pred_helpdwp_pred_help360,10743
let dwpdwp365,10948
let dwp_letdwp_let380,11530
let flanagansaxeflanagansaxe410,12426
