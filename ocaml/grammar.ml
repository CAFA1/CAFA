type token =
  | ID of (string)
  | INT of (Big_int_Z.big_int)
  | STRING of (string)
  | COMMENT of (string)
  | LPAREN
  | RPAREN
  | LSQUARE
  | RSQUARE
  | COMMA
  | SEMI
  | EOF
  | COLON
  | CJMP
  | JMP
  | LABEL
  | ADDR
  | ASSERT
  | ASSUME
  | HALT
  | SPECIAL
  | LET
  | IN
  | UNKNOWN
  | WITH
  | TRUE
  | FALSE
  | EBIG
  | ELITTLE
  | IF
  | THEN
  | ELSE
  | PLUS
  | MINUS
  | DIVIDE
  | MOD
  | SMOD
  | TIMES
  | SDIVIDE
  | LSHIFT
  | RSHIFT
  | ARSHIFT
  | XOR
  | NEQ
  | SLT
  | SLE
  | AND
  | OR
  | CONCAT
  | EXTRACT
  | EQUAL
  | EQUALEQUAL
  | LT
  | LE
  | NOT
  | ASSIGN
  | GT
  | GE
  | SGT
  | SGE
  | AT
  | QUESTION
  | LCURLY
  | RCURLY

open Parsing;;
# 2 "grammar.mly"
(* IR Grammer file *)
(* Author: David Brumley, Ivan Jager *)
(* $Id: grammar.mly 7045 2013-02-04 16:29:42Z edmcman $ *)

open Ast
open Big_int_Z
open Grammar_scope
open Grammar_private_scope
open Type

let mk_attr lab string =
  match lab with
  | "asm" -> Asm string
  | "address" -> Address(Int64.of_string string)
  | "set" when string = "liveout" -> Liveout
  | "set" when string = "initro" -> InitRO
  | "set" when string = "synthetic" -> Synthetic
  | "str" | "attr" -> StrAttr string
  | "tid" -> ThreadId(int_of_string string)
  | _ -> err ("Unknown attribute @"^lab)

let mk_context =
  let memre = Str.regexp "^mem\\[\\([^][]+\\)\\]$" in
  (fun name value taint typ usage ->
    if Str.string_match memre name 0 then
      (* Memory value *)
      let index = Str.matched_group 1 name in
      let index = Big_int_Z.big_int_of_string index in
      let index = Big_int_Z.int64_of_big_int index in
      {name=name; mem=true; t=typ; index=index; value=value; usage=usage; taint=taint}
    else
      {name=name; mem=false; t=typ; index=0L; value=value; usage=usage; taint=taint}
  )

let usage_of_string = function
  | "rd" | "RD" -> RD
  | "rw" | "RW" -> RW
  | "wr" | "WR" -> WR
  | s -> err ("Unknown operand usage "^s)

let typ_of_string = 
  let tre = Str.regexp "^u\\([0-9]+\\)$" in
  function
  | "bool" -> reg_1
  | "u8" -> reg_8
  | "u16" -> reg_16
  | "u32" -> reg_32
  | "u64" -> reg_64
  | s when Str.string_match tre s 0 ->
      Reg(int_of_string (Str.matched_group 1 s))
  | s -> err ("Unexpected type '"^s^"'")

let casttype_of_string = function
  | "pad"     -> CAST_UNSIGNED
  | "extend"  -> CAST_SIGNED  
  | "high"    -> CAST_HIGH    
  | "low"     -> CAST_LOW     
  | s -> err("Unexpected cast type '"^s^"'")

# 128 "grammar.ml"
let yytransl_const = [|
  261 (* LPAREN *);
  262 (* RPAREN *);
  263 (* LSQUARE *);
  264 (* RSQUARE *);
  265 (* COMMA *);
  266 (* SEMI *);
    0 (* EOF *);
  267 (* COLON *);
  268 (* CJMP *);
  269 (* JMP *);
  270 (* LABEL *);
  271 (* ADDR *);
  272 (* ASSERT *);
  273 (* ASSUME *);
  274 (* HALT *);
  275 (* SPECIAL *);
  276 (* LET *);
  277 (* IN *);
  278 (* UNKNOWN *);
  279 (* WITH *);
  280 (* TRUE *);
  281 (* FALSE *);
  282 (* EBIG *);
  283 (* ELITTLE *);
  284 (* IF *);
  285 (* THEN *);
  286 (* ELSE *);
  287 (* PLUS *);
  288 (* MINUS *);
  289 (* DIVIDE *);
  290 (* MOD *);
  291 (* SMOD *);
  292 (* TIMES *);
  293 (* SDIVIDE *);
  294 (* LSHIFT *);
  295 (* RSHIFT *);
  296 (* ARSHIFT *);
  297 (* XOR *);
  298 (* NEQ *);
  299 (* SLT *);
  300 (* SLE *);
  301 (* AND *);
  302 (* OR *);
  303 (* CONCAT *);
  304 (* EXTRACT *);
  305 (* EQUAL *);
  306 (* EQUALEQUAL *);
  307 (* LT *);
  308 (* LE *);
  309 (* NOT *);
  310 (* ASSIGN *);
  311 (* GT *);
  312 (* GE *);
  313 (* SGT *);
  314 (* SGE *);
  315 (* AT *);
  316 (* QUESTION *);
  317 (* LCURLY *);
  318 (* RCURLY *);
    0|]

let yytransl_block = [|
  257 (* ID *);
  258 (* INT *);
  259 (* STRING *);
  260 (* COMMENT *);
    0|]

let yylhs = "\255\255\
\001\000\004\000\005\000\005\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\010\000\
\010\000\011\000\012\000\003\000\007\000\007\000\014\000\014\000\
\009\000\015\000\015\000\013\000\013\000\013\000\016\000\017\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\018\000\
\018\000\018\000\008\000\008\000\019\000\019\000\000\000\000\000"

let yylen = "\002\000\
\002\000\001\000\002\000\000\000\004\000\008\000\004\000\005\000\
\005\000\004\000\004\000\004\000\003\000\003\000\002\000\001\000\
\002\000\001\000\001\000\009\000\000\000\002\000\003\000\003\000\
\002\000\000\000\002\000\001\000\002\000\003\000\001\000\006\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\002\000\002\000\004\000\001\000\001\000\006\000\003\000\009\000\
\008\000\006\000\001\000\001\000\003\000\011\000\008\000\001\000\
\001\000\001\000\001\000\000\000\001\000\001\000\002\000\002\000"

let yydefred = "\000\000\
\004\000\000\000\000\000\079\000\000\000\000\000\000\000\000\000\
\060\000\000\000\000\000\000\000\067\000\068\000\000\000\000\000\
\000\000\000\000\000\000\000\000\061\000\000\000\001\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\003\000\000\000\000\000\025\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\031\000\000\000\
\000\000\000\000\069\000\033\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\027\000\000\000\022\000\000\000\000\000\
\013\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\
\029\000\000\000\000\000\000\000\059\000\000\000\000\000\000\000\
\000\000\000\000\000\000\024\000\000\000\075\000\005\000\011\000\
\012\000\010\000\007\000\000\000\000\000\000\000\030\000\000\000\
\000\000\000\000\000\000\072\000\073\000\000\000\000\000\000\000\
\000\000\000\000\009\000\008\000\066\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\065\000\000\000\071\000\000\000\016\000\
\000\000\018\000\000\000\006\000\064\000\000\000\017\000\000\000\
\078\000\077\000\000\000\000\000\000\000\000\000\019\000\020\000"

let yydgoto = "\003\000\
\004\000\166\000\148\000\005\000\006\000\034\000\075\000\151\000\
\021\000\194\000\195\000\208\000\089\000\076\000\037\000\090\000\
\022\000\167\000\203\000"

let yysindex = "\010\000\
\000\000\086\007\000\000\000\000\007\000\235\255\002\255\004\255\
\000\000\086\007\015\255\014\255\000\000\000\000\086\007\086\007\
\007\255\008\255\086\007\213\008\000\000\255\254\000\000\010\255\
\220\254\086\007\086\007\023\255\027\255\086\007\086\007\086\007\
\022\255\000\000\210\254\025\255\000\000\025\255\168\255\019\255\
\026\255\109\007\029\255\033\255\031\255\029\255\086\007\034\255\
\086\007\086\007\086\007\086\007\086\007\086\007\086\007\086\007\
\086\007\086\007\086\007\086\007\086\007\086\007\086\007\086\007\
\086\007\086\007\086\007\086\007\086\007\086\007\086\007\086\007\
\025\255\044\255\000\000\220\254\149\007\243\006\220\254\220\254\
\243\006\243\006\243\006\220\254\086\007\086\007\000\000\046\255\
\053\255\230\254\000\000\000\000\025\255\025\255\086\007\086\007\
\075\255\189\007\086\007\209\255\209\255\029\255\029\255\029\255\
\029\255\029\255\134\255\134\255\134\255\076\009\144\009\089\255\
\089\255\110\009\037\009\144\009\089\255\089\255\089\255\089\255\
\089\255\089\255\213\008\000\000\088\255\000\000\086\007\082\255\
\000\000\000\000\082\255\082\255\082\255\082\255\243\006\243\006\
\000\000\086\007\046\255\039\255\000\000\229\007\013\008\092\255\
\132\255\053\008\050\255\000\000\093\008\000\000\000\000\000\000\
\000\000\000\000\000\000\082\255\082\255\028\007\000\000\086\007\
\086\007\093\255\084\255\000\000\000\000\213\008\094\255\132\255\
\099\255\086\007\000\000\000\000\000\000\213\008\213\008\086\007\
\096\255\098\255\102\255\095\255\243\006\133\008\086\007\025\255\
\103\255\000\255\082\255\000\000\173\008\000\000\025\255\000\000\
\113\255\000\000\107\255\000\000\000\000\211\254\000\000\025\255\
\000\000\000\000\086\007\108\255\253\008\117\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\130\000\060\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\131\000\000\000\000\000\000\000\212\254\
\226\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\178\000\000\000\000\000\237\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\197\006\000\000\197\006\226\006\226\006\
\197\006\197\006\197\006\197\006\000\000\000\000\000\000\000\000\
\119\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\095\002\154\002\048\001\107\001\166\001\
\225\001\028\002\213\002\016\003\075\003\004\006\102\005\142\003\
\201\003\206\005\063\006\150\005\004\004\063\004\122\004\181\004\
\240\004\043\005\149\006\000\000\000\000\000\000\000\000\245\006\
\000\000\000\000\245\006\245\006\245\006\245\006\197\006\197\006\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\171\005\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\245\006\245\006\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\124\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\115\255\176\006\000\000\
\000\000\000\000\000\000\000\000\197\006\000\000\000\000\000\000\
\000\000\000\000\245\006\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\122\006\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\012\000\000\000\000\000\000\000\000\000\226\255\212\255\
\132\000\000\000\000\000\000\000\218\255\000\000\000\000\174\255\
\000\000\228\255\000\000"

let yytablesize = 2762
let yytable = "\091\000\
\028\000\192\000\085\000\201\000\026\000\137\000\023\000\086\000\
\202\000\026\000\001\000\002\000\036\000\020\000\038\000\040\000\
\041\000\044\000\045\000\072\000\073\000\039\000\074\000\079\000\
\084\000\087\000\042\000\043\000\080\000\093\000\046\000\193\000\
\097\000\139\000\124\000\047\000\094\000\077\000\078\000\096\000\
\099\000\081\000\082\000\083\000\125\000\126\000\087\000\128\000\
\129\000\130\000\131\000\132\000\133\000\134\000\140\000\141\000\
\159\000\138\000\098\000\026\000\100\000\101\000\102\000\103\000\
\104\000\105\000\106\000\107\000\108\000\109\000\110\000\111\000\
\112\000\113\000\114\000\115\000\116\000\117\000\118\000\119\000\
\120\000\121\000\122\000\123\000\088\000\144\000\152\000\153\000\
\154\000\155\000\147\000\150\000\160\000\163\000\177\000\047\000\
\135\000\136\000\169\000\176\000\180\000\178\000\183\000\186\000\
\156\000\157\000\142\000\143\000\184\000\185\000\146\000\171\000\
\172\000\191\000\199\000\200\000\206\000\207\000\027\000\049\000\
\050\000\051\000\052\000\053\000\054\000\055\000\056\000\057\000\
\058\000\002\000\080\000\074\000\007\000\008\000\009\000\032\000\
\010\000\035\000\149\000\179\000\047\000\000\000\196\000\000\000\
\000\000\190\000\000\000\000\000\000\000\158\000\187\000\011\000\
\198\000\012\000\000\000\013\000\014\000\164\000\165\000\015\000\
\000\000\204\000\000\000\016\000\049\000\050\000\051\000\052\000\
\053\000\054\000\055\000\174\000\175\000\092\000\047\000\000\000\
\000\000\058\000\017\000\018\000\000\000\181\000\000\000\000\000\
\019\000\000\000\000\000\182\000\000\000\000\000\048\000\000\000\
\000\000\000\000\189\000\000\000\000\000\000\000\049\000\050\000\
\051\000\052\000\053\000\054\000\055\000\056\000\057\000\058\000\
\059\000\060\000\061\000\062\000\063\000\064\000\205\000\047\000\
\000\000\065\000\066\000\067\000\000\000\000\000\068\000\069\000\
\070\000\071\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\024\000\057\000\000\000\025\000\000\000\
\000\000\051\000\052\000\053\000\054\000\055\000\026\000\027\000\
\028\000\029\000\030\000\031\000\032\000\033\000\000\000\000\000\
\000\000\028\000\000\000\000\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\000\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\000\000\028\000\000\000\028\000\
\000\000\000\000\000\000\000\000\000\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\037\000\
\000\000\028\000\028\000\028\000\028\000\000\000\028\000\028\000\
\028\000\028\000\028\000\028\000\026\000\000\000\000\000\026\000\
\000\000\026\000\026\000\026\000\026\000\026\000\000\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\000\000\
\026\000\000\000\026\000\000\000\000\000\000\000\000\000\000\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\039\000\000\000\000\000\026\000\026\000\026\000\
\000\000\000\000\026\000\026\000\026\000\026\000\026\000\027\000\
\000\000\000\000\027\000\000\000\027\000\027\000\027\000\027\000\
\027\000\000\000\027\000\027\000\027\000\027\000\027\000\027\000\
\027\000\027\000\000\000\027\000\000\000\027\000\000\000\000\000\
\000\000\000\000\000\000\027\000\027\000\027\000\027\000\027\000\
\027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
\027\000\027\000\027\000\027\000\027\000\040\000\000\000\000\000\
\027\000\027\000\027\000\000\000\000\000\027\000\027\000\027\000\
\027\000\027\000\058\000\000\000\000\000\058\000\000\000\058\000\
\000\000\058\000\058\000\058\000\000\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\000\000\058\000\000\000\
\058\000\000\000\000\000\000\000\000\000\000\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
\036\000\000\000\000\000\058\000\058\000\058\000\000\000\000\000\
\058\000\058\000\058\000\058\000\058\000\057\000\000\000\000\000\
\057\000\000\000\057\000\000\000\057\000\057\000\057\000\000\000\
\057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
\000\000\057\000\000\000\057\000\000\000\000\000\000\000\000\000\
\000\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
\057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
\057\000\057\000\057\000\038\000\000\000\000\000\057\000\057\000\
\057\000\000\000\000\000\057\000\057\000\057\000\057\000\057\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\037\000\000\000\000\000\037\000\000\000\037\000\000\000\037\000\
\037\000\037\000\000\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\000\000\037\000\000\000\037\000\000\000\
\000\000\000\000\000\000\000\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\034\000\000\000\
\000\000\037\000\037\000\037\000\000\000\000\000\037\000\037\000\
\037\000\037\000\037\000\039\000\000\000\000\000\039\000\000\000\
\039\000\000\000\039\000\039\000\039\000\000\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\000\000\039\000\
\000\000\039\000\000\000\000\000\000\000\000\000\000\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\035\000\000\000\000\000\039\000\039\000\039\000\000\000\
\000\000\039\000\039\000\039\000\039\000\039\000\040\000\000\000\
\000\000\040\000\000\000\040\000\000\000\040\000\040\000\040\000\
\000\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\000\000\040\000\000\000\040\000\000\000\000\000\000\000\
\000\000\000\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\041\000\000\000\000\000\040\000\
\040\000\040\000\000\000\000\000\040\000\040\000\040\000\040\000\
\040\000\036\000\000\000\000\000\036\000\000\000\036\000\000\000\
\036\000\036\000\036\000\000\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\036\000\000\000\036\000\000\000\036\000\
\000\000\000\000\000\000\000\000\000\000\036\000\036\000\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\036\000\042\000\
\000\000\000\000\036\000\036\000\036\000\000\000\000\000\036\000\
\036\000\036\000\036\000\036\000\038\000\000\000\000\000\038\000\
\000\000\038\000\000\000\038\000\038\000\038\000\000\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\000\000\
\038\000\000\000\038\000\000\000\000\000\000\000\000\000\000\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\043\000\000\000\000\000\038\000\038\000\038\000\
\000\000\000\000\038\000\038\000\038\000\038\000\038\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\034\000\
\000\000\000\000\034\000\000\000\034\000\000\000\034\000\034\000\
\034\000\000\000\034\000\034\000\034\000\034\000\034\000\034\000\
\034\000\034\000\000\000\034\000\000\000\034\000\000\000\000\000\
\000\000\000\000\000\000\034\000\034\000\034\000\034\000\000\000\
\000\000\000\000\000\000\000\000\034\000\034\000\034\000\034\000\
\034\000\034\000\034\000\034\000\034\000\051\000\000\000\000\000\
\034\000\034\000\034\000\000\000\000\000\034\000\034\000\034\000\
\034\000\034\000\035\000\000\000\000\000\035\000\000\000\035\000\
\000\000\035\000\035\000\035\000\000\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\000\000\035\000\000\000\
\035\000\000\000\000\000\000\000\000\000\000\000\035\000\035\000\
\035\000\035\000\000\000\000\000\000\000\000\000\000\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\052\000\000\000\000\000\035\000\035\000\035\000\000\000\000\000\
\035\000\035\000\035\000\035\000\035\000\041\000\000\000\000\000\
\041\000\000\000\041\000\000\000\041\000\041\000\041\000\000\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\000\000\041\000\000\000\041\000\000\000\000\000\000\000\000\000\
\000\000\041\000\041\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\049\000\000\000\000\000\041\000\041\000\
\041\000\000\000\000\000\041\000\041\000\041\000\041\000\041\000\
\042\000\000\000\000\000\042\000\000\000\042\000\000\000\042\000\
\042\000\042\000\000\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\000\000\042\000\000\000\042\000\000\000\
\000\000\000\000\000\000\000\000\042\000\042\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\050\000\000\000\
\000\000\042\000\042\000\042\000\000\000\000\000\042\000\042\000\
\042\000\042\000\042\000\043\000\000\000\000\000\043\000\000\000\
\043\000\000\000\043\000\043\000\043\000\000\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\000\000\043\000\
\000\000\043\000\000\000\000\000\000\000\000\000\000\000\043\000\
\043\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\053\000\000\000\000\000\043\000\043\000\043\000\000\000\
\000\000\043\000\043\000\043\000\043\000\043\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\051\000\000\000\
\000\000\051\000\000\000\051\000\000\000\051\000\051\000\051\000\
\000\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\000\000\051\000\000\000\051\000\000\000\000\000\000\000\
\000\000\000\000\051\000\051\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\054\000\000\000\051\000\051\000\
\051\000\051\000\051\000\051\000\000\000\000\000\000\000\051\000\
\051\000\051\000\000\000\000\000\051\000\051\000\051\000\051\000\
\051\000\052\000\000\000\000\000\052\000\000\000\052\000\000\000\
\052\000\052\000\052\000\000\000\052\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\000\000\052\000\000\000\052\000\
\000\000\000\000\000\000\000\000\000\000\052\000\052\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\055\000\
\000\000\052\000\052\000\052\000\052\000\052\000\052\000\000\000\
\000\000\000\000\052\000\052\000\052\000\000\000\000\000\052\000\
\052\000\052\000\052\000\052\000\049\000\000\000\000\000\049\000\
\000\000\049\000\000\000\049\000\049\000\049\000\000\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\000\000\
\049\000\000\000\049\000\000\000\000\000\000\000\000\000\000\000\
\049\000\049\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\056\000\000\000\049\000\049\000\049\000\049\000\
\049\000\049\000\000\000\000\000\000\000\049\000\049\000\049\000\
\000\000\000\000\049\000\049\000\049\000\049\000\049\000\050\000\
\000\000\000\000\050\000\000\000\050\000\000\000\050\000\050\000\
\050\000\000\000\050\000\050\000\050\000\050\000\050\000\050\000\
\050\000\050\000\000\000\050\000\000\000\050\000\000\000\000\000\
\000\000\000\000\000\000\050\000\050\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\048\000\000\000\050\000\
\050\000\050\000\050\000\050\000\050\000\000\000\000\000\000\000\
\050\000\050\000\050\000\000\000\000\000\050\000\050\000\050\000\
\050\000\050\000\053\000\000\000\000\000\053\000\000\000\053\000\
\000\000\053\000\053\000\053\000\000\000\053\000\053\000\053\000\
\053\000\053\000\053\000\053\000\053\000\000\000\053\000\000\000\
\053\000\000\000\000\000\000\000\000\000\047\000\053\000\053\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\053\000\053\000\053\000\053\000\053\000\053\000\
\000\000\000\000\023\000\053\000\053\000\053\000\000\000\000\000\
\053\000\053\000\053\000\053\000\053\000\054\000\000\000\000\000\
\054\000\000\000\054\000\000\000\054\000\054\000\054\000\000\000\
\054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
\000\000\054\000\000\000\054\000\000\000\044\000\000\000\000\000\
\000\000\054\000\054\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\054\000\054\000\054\000\
\054\000\054\000\054\000\000\000\000\000\000\000\054\000\054\000\
\054\000\000\000\000\000\054\000\054\000\054\000\054\000\054\000\
\055\000\000\000\000\000\055\000\000\000\055\000\000\000\055\000\
\055\000\055\000\000\000\055\000\055\000\055\000\055\000\055\000\
\055\000\055\000\055\000\046\000\055\000\000\000\055\000\000\000\
\000\000\000\000\000\000\000\000\055\000\055\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\055\000\055\000\055\000\055\000\055\000\055\000\000\000\000\000\
\000\000\055\000\055\000\055\000\000\000\000\000\055\000\055\000\
\055\000\055\000\055\000\056\000\000\000\000\000\056\000\000\000\
\056\000\000\000\056\000\056\000\056\000\000\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\045\000\056\000\
\000\000\056\000\000\000\000\000\000\000\000\000\000\000\056\000\
\056\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\056\000\056\000\056\000\056\000\056\000\
\056\000\000\000\000\000\000\000\056\000\056\000\056\000\000\000\
\000\000\056\000\056\000\056\000\056\000\056\000\048\000\000\000\
\000\000\048\000\000\000\048\000\000\000\048\000\048\000\048\000\
\000\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\070\000\048\000\000\000\048\000\000\000\000\000\000\000\
\000\000\000\000\048\000\048\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\048\000\048\000\
\000\000\000\000\048\000\048\000\063\000\000\000\047\000\048\000\
\000\000\047\000\000\000\047\000\000\000\047\000\047\000\047\000\
\048\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\000\000\047\000\023\000\047\000\000\000\023\000\062\000\
\000\000\000\000\047\000\047\000\023\000\000\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\047\000\047\000\
\000\000\000\000\047\000\047\000\021\000\000\000\000\000\047\000\
\000\000\000\000\000\000\000\000\000\000\000\000\044\000\000\000\
\047\000\044\000\000\000\044\000\000\000\044\000\044\000\044\000\
\000\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\021\000\044\000\000\000\044\000\023\000\000\000\000\000\
\000\000\000\000\044\000\044\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\076\000\000\000\044\000\000\000\
\000\000\000\000\044\000\044\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\046\000\000\000\000\000\046\000\
\044\000\046\000\000\000\046\000\046\000\046\000\000\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\000\000\
\046\000\000\000\046\000\000\000\000\000\000\000\000\000\000\000\
\046\000\046\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\046\000\000\000\000\000\000\000\
\000\000\046\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\046\000\045\000\
\000\000\000\000\045\000\000\000\045\000\000\000\045\000\045\000\
\045\000\000\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\000\000\045\000\000\000\045\000\000\000\000\000\
\000\000\000\000\000\000\045\000\045\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\045\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\045\000\070\000\000\000\000\000\070\000\000\000\070\000\
\000\000\070\000\070\000\070\000\000\000\070\000\070\000\070\000\
\070\000\070\000\070\000\070\000\070\000\000\000\070\000\000\000\
\070\000\000\000\000\000\000\000\000\000\063\000\070\000\070\000\
\063\000\000\000\063\000\000\000\063\000\063\000\063\000\000\000\
\063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
\000\000\063\000\000\000\000\000\000\000\000\000\000\000\000\000\
\062\000\063\000\063\000\062\000\070\000\062\000\000\000\062\000\
\062\000\062\000\000\000\062\000\062\000\062\000\062\000\062\000\
\062\000\062\000\062\000\000\000\062\000\021\000\000\000\000\000\
\021\000\000\000\000\000\000\000\062\000\062\000\021\000\063\000\
\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\021\000\000\000\000\000\021\000\000\000\000\000\
\000\000\000\000\062\000\000\000\000\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\076\000\000\000\000\000\
\076\000\047\000\000\000\000\000\000\000\000\000\000\000\000\000\
\076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
\000\000\048\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\049\000\050\000\051\000\052\000\053\000\054\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\173\000\047\000\000\000\065\000\066\000\067\000\000\000\
\000\000\068\000\069\000\070\000\071\000\074\000\000\000\000\000\
\000\000\000\000\048\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\049\000\050\000\051\000\052\000\053\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\000\000\000\000\000\000\065\000\066\000\067\000\
\000\000\000\000\068\000\069\000\070\000\071\000\007\000\008\000\
\009\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\011\000\000\000\012\000\000\000\013\000\014\000\000\000\
\000\000\015\000\000\000\047\000\000\000\016\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\048\000\017\000\018\000\000\000\000\000\
\000\000\095\000\019\000\049\000\050\000\051\000\052\000\053\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\047\000\000\000\127\000\065\000\066\000\
\067\000\000\000\000\000\068\000\069\000\070\000\071\000\000\000\
\000\000\000\000\000\000\048\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\049\000\050\000\051\000\052\000\053\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\047\000\000\000\145\000\065\000\066\000\
\067\000\000\000\000\000\068\000\069\000\070\000\071\000\000\000\
\000\000\000\000\000\000\048\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\049\000\050\000\051\000\052\000\053\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\047\000\000\000\000\000\065\000\066\000\
\067\000\000\000\000\000\068\000\069\000\070\000\071\000\000\000\
\000\000\000\000\000\000\048\000\000\000\000\000\000\000\000\000\
\000\000\000\000\161\000\049\000\050\000\051\000\052\000\053\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\047\000\162\000\000\000\065\000\066\000\
\067\000\000\000\000\000\068\000\069\000\070\000\071\000\000\000\
\000\000\000\000\000\000\048\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\049\000\050\000\051\000\052\000\053\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\047\000\000\000\168\000\065\000\066\000\
\067\000\000\000\000\000\068\000\069\000\070\000\071\000\000\000\
\000\000\000\000\000\000\048\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\049\000\050\000\051\000\052\000\053\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\047\000\000\000\170\000\065\000\066\000\
\067\000\000\000\000\000\068\000\069\000\070\000\071\000\000\000\
\000\000\000\000\000\000\048\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\049\000\050\000\051\000\052\000\053\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\047\000\188\000\000\000\065\000\066\000\
\067\000\000\000\000\000\068\000\069\000\070\000\071\000\000\000\
\000\000\000\000\000\000\048\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\049\000\050\000\051\000\052\000\053\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\047\000\197\000\000\000\065\000\066\000\
\067\000\000\000\000\000\068\000\069\000\070\000\071\000\000\000\
\000\000\000\000\000\000\048\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\049\000\050\000\051\000\052\000\053\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\047\000\000\000\000\000\065\000\066\000\
\067\000\000\000\000\000\068\000\069\000\070\000\071\000\000\000\
\000\000\000\000\000\000\048\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\049\000\050\000\051\000\052\000\053\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\047\000\000\000\000\000\065\000\066\000\
\067\000\000\000\000\000\068\000\069\000\070\000\071\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\049\000\050\000\051\000\052\000\053\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\047\000\000\000\000\000\065\000\066\000\
\067\000\000\000\000\000\068\000\069\000\070\000\071\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\049\000\050\000\051\000\052\000\053\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\047\000\000\000\000\000\000\000\065\000\066\000\
\067\000\000\000\000\000\068\000\069\000\070\000\071\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\049\000\050\000\051\000\052\000\053\000\054\000\
\055\000\056\000\057\000\058\000\047\000\060\000\061\000\062\000\
\063\000\000\000\000\000\000\000\000\000\065\000\066\000\067\000\
\000\000\000\000\068\000\069\000\070\000\071\000\000\000\000\000\
\000\000\000\000\000\000\000\000\049\000\050\000\051\000\052\000\
\053\000\054\000\055\000\056\000\057\000\058\000\047\000\060\000\
\061\000\062\000\000\000\000\000\000\000\000\000\000\000\065\000\
\066\000\067\000\000\000\000\000\068\000\069\000\070\000\071\000\
\000\000\000\000\000\000\000\000\000\000\000\000\049\000\050\000\
\051\000\052\000\053\000\054\000\055\000\056\000\057\000\058\000\
\000\000\000\000\061\000\062\000\000\000\000\000\000\000\000\000\
\000\000\000\000\066\000\067\000\000\000\000\000\068\000\069\000\
\070\000\071\000"

let yycheck = "\038\000\
\000\000\002\001\049\001\049\001\049\001\088\000\000\000\054\001\
\054\001\054\001\001\000\002\000\011\001\002\000\011\001\001\001\
\003\001\011\001\011\001\021\001\011\001\010\000\059\001\001\001\
\003\001\001\001\015\000\016\000\002\001\011\001\019\000\032\001\
\002\001\060\001\073\000\007\001\011\001\026\000\027\000\007\001\
\007\001\030\000\031\000\032\000\001\001\076\000\001\001\078\000\
\079\000\080\000\081\000\082\000\083\000\084\000\093\000\094\000\
\139\000\005\001\047\000\000\000\049\000\050\000\051\000\052\000\
\053\000\054\000\055\000\056\000\057\000\058\000\059\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\060\001\011\001\131\000\132\000\
\133\000\134\000\003\001\010\001\054\001\002\001\011\001\007\001\
\085\000\086\000\049\001\007\001\002\001\008\001\007\001\009\001\
\135\000\136\000\095\000\096\000\011\001\008\001\099\000\156\000\
\157\000\011\001\002\001\009\001\009\001\001\001\000\000\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\000\000\000\000\008\001\001\001\002\001\003\001\021\001\
\005\001\006\000\127\000\168\000\007\001\255\255\187\000\255\255\
\255\255\184\000\255\255\255\255\255\255\138\000\181\000\020\001\
\191\000\022\001\255\255\024\001\025\001\026\001\027\001\028\001\
\255\255\200\000\255\255\032\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\160\000\161\000\006\001\007\001\255\255\
\255\255\000\000\047\001\048\001\255\255\170\000\255\255\255\255\
\053\001\255\255\255\255\176\000\255\255\255\255\023\001\255\255\
\255\255\255\255\183\000\255\255\255\255\255\255\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\203\000\007\001\
\255\255\050\001\051\001\052\001\255\255\255\255\055\001\056\001\
\057\001\058\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\001\001\000\000\255\255\004\001\255\255\
\255\255\033\001\034\001\035\001\036\001\037\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\255\255\
\255\255\001\001\255\255\255\255\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\021\001\255\255\023\001\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\000\000\
\255\255\049\001\050\001\051\001\052\001\255\255\054\001\055\001\
\056\001\057\001\058\001\059\001\001\001\255\255\255\255\004\001\
\255\255\006\001\007\001\008\001\009\001\010\001\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\021\001\255\255\023\001\255\255\255\255\255\255\255\255\255\255\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\000\000\255\255\255\255\050\001\051\001\052\001\
\255\255\255\255\055\001\056\001\057\001\058\001\059\001\001\001\
\255\255\255\255\004\001\255\255\006\001\007\001\008\001\009\001\
\010\001\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\023\001\255\255\255\255\
\255\255\255\255\255\255\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\000\000\255\255\255\255\
\050\001\051\001\052\001\255\255\255\255\055\001\056\001\057\001\
\058\001\059\001\001\001\255\255\255\255\004\001\255\255\006\001\
\255\255\008\001\009\001\010\001\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\021\001\255\255\
\023\001\255\255\255\255\255\255\255\255\255\255\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\000\000\255\255\255\255\050\001\051\001\052\001\255\255\255\255\
\055\001\056\001\057\001\058\001\059\001\001\001\255\255\255\255\
\004\001\255\255\006\001\255\255\008\001\009\001\010\001\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\021\001\255\255\023\001\255\255\255\255\255\255\255\255\
\255\255\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\000\000\255\255\255\255\050\001\051\001\
\052\001\255\255\255\255\055\001\056\001\057\001\058\001\059\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\001\001\255\255\255\255\004\001\255\255\006\001\255\255\008\001\
\009\001\010\001\255\255\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\021\001\255\255\023\001\255\255\
\255\255\255\255\255\255\255\255\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\000\000\255\255\
\255\255\050\001\051\001\052\001\255\255\255\255\055\001\056\001\
\057\001\058\001\059\001\001\001\255\255\255\255\004\001\255\255\
\006\001\255\255\008\001\009\001\010\001\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\021\001\
\255\255\023\001\255\255\255\255\255\255\255\255\255\255\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\000\000\255\255\255\255\050\001\051\001\052\001\255\255\
\255\255\055\001\056\001\057\001\058\001\059\001\001\001\255\255\
\255\255\004\001\255\255\006\001\255\255\008\001\009\001\010\001\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\021\001\255\255\023\001\255\255\255\255\255\255\
\255\255\255\255\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\000\000\255\255\255\255\050\001\
\051\001\052\001\255\255\255\255\055\001\056\001\057\001\058\001\
\059\001\001\001\255\255\255\255\004\001\255\255\006\001\255\255\
\008\001\009\001\010\001\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\021\001\255\255\023\001\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\000\000\
\255\255\255\255\050\001\051\001\052\001\255\255\255\255\055\001\
\056\001\057\001\058\001\059\001\001\001\255\255\255\255\004\001\
\255\255\006\001\255\255\008\001\009\001\010\001\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\021\001\255\255\023\001\255\255\255\255\255\255\255\255\255\255\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\000\000\255\255\255\255\050\001\051\001\052\001\
\255\255\255\255\055\001\056\001\057\001\058\001\059\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\255\255\255\255\004\001\255\255\006\001\255\255\008\001\009\001\
\010\001\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\023\001\255\255\255\255\
\255\255\255\255\255\255\029\001\030\001\031\001\032\001\255\255\
\255\255\255\255\255\255\255\255\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\000\000\255\255\255\255\
\050\001\051\001\052\001\255\255\255\255\055\001\056\001\057\001\
\058\001\059\001\001\001\255\255\255\255\004\001\255\255\006\001\
\255\255\008\001\009\001\010\001\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\021\001\255\255\
\023\001\255\255\255\255\255\255\255\255\255\255\029\001\030\001\
\031\001\032\001\255\255\255\255\255\255\255\255\255\255\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\000\000\255\255\255\255\050\001\051\001\052\001\255\255\255\255\
\055\001\056\001\057\001\058\001\059\001\001\001\255\255\255\255\
\004\001\255\255\006\001\255\255\008\001\009\001\010\001\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\021\001\255\255\023\001\255\255\255\255\255\255\255\255\
\255\255\029\001\030\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\000\000\255\255\255\255\050\001\051\001\
\052\001\255\255\255\255\055\001\056\001\057\001\058\001\059\001\
\001\001\255\255\255\255\004\001\255\255\006\001\255\255\008\001\
\009\001\010\001\255\255\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\021\001\255\255\023\001\255\255\
\255\255\255\255\255\255\255\255\029\001\030\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\000\000\255\255\
\255\255\050\001\051\001\052\001\255\255\255\255\055\001\056\001\
\057\001\058\001\059\001\001\001\255\255\255\255\004\001\255\255\
\006\001\255\255\008\001\009\001\010\001\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\021\001\
\255\255\023\001\255\255\255\255\255\255\255\255\255\255\029\001\
\030\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\000\000\255\255\255\255\050\001\051\001\052\001\255\255\
\255\255\055\001\056\001\057\001\058\001\059\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\255\255\
\255\255\004\001\255\255\006\001\255\255\008\001\009\001\010\001\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\021\001\255\255\023\001\255\255\255\255\255\255\
\255\255\255\255\029\001\030\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\041\001\042\001\
\043\001\044\001\045\001\046\001\255\255\255\255\255\255\050\001\
\051\001\052\001\255\255\255\255\055\001\056\001\057\001\058\001\
\059\001\001\001\255\255\255\255\004\001\255\255\006\001\255\255\
\008\001\009\001\010\001\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\021\001\255\255\023\001\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\255\255\041\001\042\001\043\001\044\001\045\001\046\001\255\255\
\255\255\255\255\050\001\051\001\052\001\255\255\255\255\055\001\
\056\001\057\001\058\001\059\001\001\001\255\255\255\255\004\001\
\255\255\006\001\255\255\008\001\009\001\010\001\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\021\001\255\255\023\001\255\255\255\255\255\255\255\255\255\255\
\029\001\030\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\041\001\042\001\043\001\044\001\
\045\001\046\001\255\255\255\255\255\255\050\001\051\001\052\001\
\255\255\255\255\055\001\056\001\057\001\058\001\059\001\001\001\
\255\255\255\255\004\001\255\255\006\001\255\255\008\001\009\001\
\010\001\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\023\001\255\255\255\255\
\255\255\255\255\255\255\029\001\030\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\041\001\
\042\001\043\001\044\001\045\001\046\001\255\255\255\255\255\255\
\050\001\051\001\052\001\255\255\255\255\055\001\056\001\057\001\
\058\001\059\001\001\001\255\255\255\255\004\001\255\255\006\001\
\255\255\008\001\009\001\010\001\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\021\001\255\255\
\023\001\255\255\255\255\255\255\255\255\000\000\029\001\030\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\041\001\042\001\043\001\044\001\045\001\046\001\
\255\255\255\255\000\000\050\001\051\001\052\001\255\255\255\255\
\055\001\056\001\057\001\058\001\059\001\001\001\255\255\255\255\
\004\001\255\255\006\001\255\255\008\001\009\001\010\001\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\021\001\255\255\023\001\255\255\000\000\255\255\255\255\
\255\255\029\001\030\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\041\001\042\001\043\001\
\044\001\045\001\046\001\255\255\255\255\255\255\050\001\051\001\
\052\001\255\255\255\255\055\001\056\001\057\001\058\001\059\001\
\001\001\255\255\255\255\004\001\255\255\006\001\255\255\008\001\
\009\001\010\001\255\255\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\000\000\021\001\255\255\023\001\255\255\
\255\255\255\255\255\255\255\255\029\001\030\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\041\001\042\001\043\001\044\001\045\001\046\001\255\255\255\255\
\255\255\050\001\051\001\052\001\255\255\255\255\055\001\056\001\
\057\001\058\001\059\001\001\001\255\255\255\255\004\001\255\255\
\006\001\255\255\008\001\009\001\010\001\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\000\000\021\001\
\255\255\023\001\255\255\255\255\255\255\255\255\255\255\029\001\
\030\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\041\001\042\001\043\001\044\001\045\001\
\046\001\255\255\255\255\255\255\050\001\051\001\052\001\255\255\
\255\255\055\001\056\001\057\001\058\001\059\001\001\001\255\255\
\255\255\004\001\255\255\006\001\255\255\008\001\009\001\010\001\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\000\000\021\001\255\255\023\001\255\255\255\255\255\255\
\255\255\255\255\029\001\030\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\041\001\042\001\
\255\255\255\255\045\001\046\001\000\000\255\255\001\001\050\001\
\255\255\004\001\255\255\006\001\255\255\008\001\009\001\010\001\
\059\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\021\001\001\001\023\001\255\255\004\001\000\000\
\255\255\255\255\029\001\030\001\010\001\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\041\001\042\001\
\255\255\255\255\045\001\046\001\000\000\255\255\255\255\050\001\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\255\255\
\059\001\004\001\255\255\006\001\255\255\008\001\009\001\010\001\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\000\000\021\001\255\255\023\001\059\001\255\255\255\255\
\255\255\255\255\029\001\030\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\041\001\255\255\
\255\255\255\255\045\001\046\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\001\001\255\255\255\255\004\001\
\059\001\006\001\255\255\008\001\009\001\010\001\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\021\001\255\255\023\001\255\255\255\255\255\255\255\255\255\255\
\029\001\030\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\041\001\255\255\255\255\255\255\
\255\255\046\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\059\001\001\001\
\255\255\255\255\004\001\255\255\006\001\255\255\008\001\009\001\
\010\001\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\023\001\255\255\255\255\
\255\255\255\255\255\255\029\001\030\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\046\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\059\001\001\001\255\255\255\255\004\001\255\255\006\001\
\255\255\008\001\009\001\010\001\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\021\001\255\255\
\023\001\255\255\255\255\255\255\255\255\001\001\029\001\030\001\
\004\001\255\255\006\001\255\255\008\001\009\001\010\001\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\021\001\255\255\255\255\255\255\255\255\255\255\255\255\
\001\001\029\001\030\001\004\001\059\001\006\001\255\255\008\001\
\009\001\010\001\255\255\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\021\001\001\001\255\255\255\255\
\004\001\255\255\255\255\255\255\029\001\030\001\010\001\059\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\001\001\255\255\255\255\004\001\255\255\255\255\
\255\255\255\255\059\001\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\001\001\255\255\255\255\
\004\001\007\001\255\255\255\255\255\255\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\023\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\006\001\007\001\255\255\050\001\051\001\052\001\255\255\
\255\255\055\001\056\001\057\001\058\001\059\001\255\255\255\255\
\255\255\255\255\023\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\255\255\255\255\255\255\050\001\051\001\052\001\
\255\255\255\255\055\001\056\001\057\001\058\001\001\001\002\001\
\003\001\255\255\005\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\020\001\255\255\022\001\255\255\024\001\025\001\255\255\
\255\255\028\001\255\255\007\001\255\255\032\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\023\001\047\001\048\001\255\255\255\255\
\255\255\029\001\053\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\007\001\255\255\009\001\050\001\051\001\
\052\001\255\255\255\255\055\001\056\001\057\001\058\001\255\255\
\255\255\255\255\255\255\023\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\007\001\255\255\009\001\050\001\051\001\
\052\001\255\255\255\255\055\001\056\001\057\001\058\001\255\255\
\255\255\255\255\255\255\023\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\007\001\255\255\255\255\050\001\051\001\
\052\001\255\255\255\255\055\001\056\001\057\001\058\001\255\255\
\255\255\255\255\255\255\023\001\255\255\255\255\255\255\255\255\
\255\255\255\255\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\007\001\008\001\255\255\050\001\051\001\
\052\001\255\255\255\255\055\001\056\001\057\001\058\001\255\255\
\255\255\255\255\255\255\023\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\007\001\255\255\009\001\050\001\051\001\
\052\001\255\255\255\255\055\001\056\001\057\001\058\001\255\255\
\255\255\255\255\255\255\023\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\007\001\255\255\009\001\050\001\051\001\
\052\001\255\255\255\255\055\001\056\001\057\001\058\001\255\255\
\255\255\255\255\255\255\023\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\007\001\008\001\255\255\050\001\051\001\
\052\001\255\255\255\255\055\001\056\001\057\001\058\001\255\255\
\255\255\255\255\255\255\023\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\007\001\008\001\255\255\050\001\051\001\
\052\001\255\255\255\255\055\001\056\001\057\001\058\001\255\255\
\255\255\255\255\255\255\023\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\007\001\255\255\255\255\050\001\051\001\
\052\001\255\255\255\255\055\001\056\001\057\001\058\001\255\255\
\255\255\255\255\255\255\023\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\007\001\255\255\255\255\050\001\051\001\
\052\001\255\255\255\255\055\001\056\001\057\001\058\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\007\001\255\255\255\255\050\001\051\001\
\052\001\255\255\255\255\055\001\056\001\057\001\058\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\007\001\255\255\255\255\255\255\050\001\051\001\
\052\001\255\255\255\255\055\001\056\001\057\001\058\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\007\001\042\001\043\001\044\001\
\045\001\255\255\255\255\255\255\255\255\050\001\051\001\052\001\
\255\255\255\255\055\001\056\001\057\001\058\001\255\255\255\255\
\255\255\255\255\255\255\255\255\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\007\001\042\001\
\043\001\044\001\255\255\255\255\255\255\255\255\255\255\050\001\
\051\001\052\001\255\255\255\255\055\001\056\001\057\001\058\001\
\255\255\255\255\255\255\255\255\255\255\255\255\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\255\255\255\255\043\001\044\001\255\255\255\255\255\255\255\255\
\255\255\255\255\051\001\052\001\255\255\255\255\055\001\056\001\
\057\001\058\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  LSQUARE\000\
  RSQUARE\000\
  COMMA\000\
  SEMI\000\
  EOF\000\
  COLON\000\
  CJMP\000\
  JMP\000\
  LABEL\000\
  ADDR\000\
  ASSERT\000\
  ASSUME\000\
  HALT\000\
  SPECIAL\000\
  LET\000\
  IN\000\
  UNKNOWN\000\
  WITH\000\
  TRUE\000\
  FALSE\000\
  EBIG\000\
  ELITTLE\000\
  IF\000\
  THEN\000\
  ELSE\000\
  PLUS\000\
  MINUS\000\
  DIVIDE\000\
  MOD\000\
  SMOD\000\
  TIMES\000\
  SDIVIDE\000\
  LSHIFT\000\
  RSHIFT\000\
  ARSHIFT\000\
  XOR\000\
  NEQ\000\
  SLT\000\
  SLE\000\
  AND\000\
  OR\000\
  CONCAT\000\
  EXTRACT\000\
  EQUAL\000\
  EQUALEQUAL\000\
  LT\000\
  LE\000\
  NOT\000\
  ASSIGN\000\
  GT\000\
  GE\000\
  SGT\000\
  SGE\000\
  AT\000\
  QUESTION\000\
  LCURLY\000\
  RCURLY\000\
  "

let yynames_block = "\
  ID\000\
  INT\000\
  STRING\000\
  COMMENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmtlist) in
    Obj.repr(
# 108 "grammar.mly"
                     ( _1 )
# 1089 "grammar.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'revstmtlist) in
    Obj.repr(
# 111 "grammar.mly"
                     ( List.rev _1 )
# 1096 "grammar.ml"
               : 'stmtlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'revstmtlist) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 122 "grammar.mly"
                            (  _2 :: _1 )
# 1104 "grammar.ml"
               : 'revstmtlist))
; (fun __caml_parser_env ->
    Obj.repr(
# 123 "grammar.mly"
          ( [] )
# 1110 "grammar.ml"
               : 'revstmtlist))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'attrs) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'semi) in
    Obj.repr(
# 126 "grammar.mly"
                              ( Jmp(_2, _3) )
# 1119 "grammar.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Ast.exp ) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Ast.exp ) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'attrs) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'semi) in
    Obj.repr(
# 127 "grammar.mly"
                                                     ( CJmp(_2, _4, _6, _7)  )
# 1130 "grammar.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'attrs) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'semi) in
    Obj.repr(
# 128 "grammar.mly"
                                    ( Special(_2, _3))
# 1139 "grammar.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'lval) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'attrs) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'semi) in
    Obj.repr(
# 129 "grammar.mly"
                                      ( Move(_1, _3, _4) )
# 1149 "grammar.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'lval) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'attrs) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'semi) in
    Obj.repr(
# 130 "grammar.mly"
                                     ( Move(_1, _3, _4) )
# 1159 "grammar.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'attrs) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'semi) in
    Obj.repr(
# 131 "grammar.mly"
                               ( Halt(_2, _3) )
# 1168 "grammar.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'attrs) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'semi) in
    Obj.repr(
# 132 "grammar.mly"
                                 ( Assert(_2, _3) )
# 1177 "grammar.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'attrs) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'semi) in
    Obj.repr(
# 133 "grammar.mly"
                                 ( Assume(_2, _3) )
# 1186 "grammar.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'attrs) in
    Obj.repr(
# 134 "grammar.mly"
                         ( Label(Name _2, _3) )
# 1194 "grammar.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Big_int_Z.big_int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'attrs) in
    Obj.repr(
# 135 "grammar.mly"
                         ( Label(Addr (int64_of_big_int _2), _3) )
# 1202 "grammar.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'attrs) in
    Obj.repr(
# 136 "grammar.mly"
                        ( Comment(_1, _2) )
# 1210 "grammar.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Big_int_Z.big_int) in
    Obj.repr(
# 140 "grammar.mly"
              ( _1 )
# 1217 "grammar.ml"
               : 'plusminusint))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Big_int_Z.big_int) in
    Obj.repr(
# 141 "grammar.mly"
                    ( minus_big_int _2 )
# 1224 "grammar.ml"
               : 'plusminusint))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'plusminusint) in
    Obj.repr(
# 144 "grammar.mly"
                       ( Taint(int_of_big_int _1) )
# 1231 "grammar.ml"
               : 'taint))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 147 "grammar.mly"
             ( usage_of_string _1 )
# 1238 "grammar.ml"
               : 'usage))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : Big_int_Z.big_int) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'taint) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'usage) in
    Obj.repr(
# 150 "grammar.mly"
                                                             ( mk_context _1 _3 _5 _7 _9 )
# 1249 "grammar.ml"
               : Type.context))
; (fun __caml_parser_env ->
    Obj.repr(
# 153 "grammar.mly"
     ( [] )
# 1255 "grammar.ml"
               : 'attrs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'attrs) in
    Obj.repr(
# 154 "grammar.mly"
             ( _1 :: _2 )
# 1263 "grammar.ml"
               : 'attrs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 157 "grammar.mly"
               ( mk_attr _2 _3 )
# 1271 "grammar.ml"
               : 'attr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Type.context) in
    Obj.repr(
# 158 "grammar.mly"
                ( Context(_3) )
# 1279 "grammar.ml"
               : 'attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opttyp) in
    Obj.repr(
# 161 "grammar.mly"
            ( 
    Scope.get_lval (get_scope ()) _1 _2
  )
# 1289 "grammar.ml"
               : 'lval))
; (fun __caml_parser_env ->
    Obj.repr(
# 166 "grammar.mly"
  ( None )
# 1295 "grammar.ml"
               : 'opttyp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 167 "grammar.mly"
            ( Some(_2) )
# 1302 "grammar.ml"
               : 'opttyp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'styp) in
    Obj.repr(
# 170 "grammar.mly"
       (_1)
# 1309 "grammar.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'styp) in
    Obj.repr(
# 171 "grammar.mly"
                ( TMem _2 )
# 1316 "grammar.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'styp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'styp) in
    Obj.repr(
# 172 "grammar.mly"
                     ( Array(_3, _1) )
# 1324 "grammar.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 175 "grammar.mly"
     ( typ_of_string _1 )
# 1331 "grammar.ml"
               : 'styp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 180 "grammar.mly"
                               ( (Scope.add_push (get_scope()) _2 _4, _6) )
# 1340 "grammar.ml"
               : 'letstart))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.exp ) in
    Obj.repr(
# 183 "grammar.mly"
                     ( _2 )
# 1347 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 184 "grammar.mly"
                     ( BinOp(PLUS, _1, _3) )
# 1355 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 185 "grammar.mly"
                     ( BinOp(MINUS, _1, _3))
# 1363 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 186 "grammar.mly"
                     ( BinOp(TIMES, _1, _3) )
# 1371 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 187 "grammar.mly"
                     ( BinOp(DIVIDE, _1, _3) )
# 1379 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 188 "grammar.mly"
                     ( BinOp(SDIVIDE, _1, _3) )
# 1387 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 189 "grammar.mly"
                     ( BinOp(MOD, _1, _3) )
# 1395 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 190 "grammar.mly"
                     ( BinOp(SMOD, _1, _3) )
# 1403 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 191 "grammar.mly"
                     ( BinOp(LSHIFT, _1, _3) )
# 1411 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 192 "grammar.mly"
                     ( BinOp(RSHIFT, _1, _3) )
# 1419 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 193 "grammar.mly"
                     ( BinOp(ARSHIFT, _1, _3) )
# 1427 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 194 "grammar.mly"
                     ( BinOp(AND, _1, _3) )
# 1435 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 195 "grammar.mly"
                     ( BinOp(OR, _1, _3) )
# 1443 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 196 "grammar.mly"
                     ( BinOp(XOR,  _1, _3) )
# 1451 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 197 "grammar.mly"
                          ( BinOp(EQ, _1, _3) )
# 1459 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 199 "grammar.mly"
                     ( BinOp(NEQ, _1, _3) )
# 1467 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 200 "grammar.mly"
                     ( BinOp(LT, _1, _3) )
# 1475 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 201 "grammar.mly"
                     ( BinOp(LE,  _1, _3) )
# 1483 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 202 "grammar.mly"
                     ( BinOp(SLT, _1, _3) )
# 1491 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 203 "grammar.mly"
                     ( BinOp(SLE, _1, _3) )
# 1499 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 205 "grammar.mly"
                     ( BinOp(LT,  _3, _1) )
# 1507 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 206 "grammar.mly"
                     ( BinOp(LE,  _3, _1) )
# 1515 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 207 "grammar.mly"
                     ( BinOp(SLT, _3, _1) )
# 1523 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 208 "grammar.mly"
                     ( BinOp(SLE, _3, _1) )
# 1531 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 209 "grammar.mly"
                     ( UnOp(NOT, _2) )
# 1538 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 210 "grammar.mly"
                           ( UnOp(NEG, _2) )
# 1545 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 211 "grammar.mly"
                           ( Unknown(_2, _4) )
# 1553 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 212 "grammar.mly"
                     ( Lab(_1) )
# 1560 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lval) in
    Obj.repr(
# 213 "grammar.mly"
                     ( Var(_1) )
# 1567 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Ast.exp ) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 215 "grammar.mly"
      ( Ite(_2, _4, _6) )
# 1576 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'letstart) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 216 "grammar.mly"
                     ( Scope.pop (get_scope());
		       let (x,y) = _1 in
		       Let(x,y, _3) )
# 1586 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : Big_int_Z.big_int) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : Big_int_Z.big_int) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : Ast.exp ) in
    Obj.repr(
# 219 "grammar.mly"
                                                         ( Extract(_3, _5, _8) )
# 1595 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Ast.exp ) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Ast.exp ) in
    Obj.repr(
# 220 "grammar.mly"
                                                         ( Concat(_4, _7) )
# 1603 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Ast.exp ) in
    Obj.repr(
# 222 "grammar.mly"
    ( Cast(casttype_of_string _1, _3, _5) )
# 1612 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    Obj.repr(
# 223 "grammar.mly"
                     ( exp_true )
# 1618 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    Obj.repr(
# 224 "grammar.mly"
                     ( exp_false )
# 1624 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Big_int_Z.big_int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 225 "grammar.mly"
                     ( Int(_1, _3) )
# 1632 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 10 : Ast.exp ) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : Ast.exp ) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : 'endian) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'assign) in
    let _11 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 227 "grammar.mly"
      ( Store(_1, _4, _11, _6, _9) )
# 1644 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Ast.exp ) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'endian) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 228 "grammar.mly"
                                                   ( Load(_1, _3, _5, _8) )
# 1654 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    Obj.repr(
# 231 "grammar.mly"
        ( exp_true )
# 1660 "grammar.ml"
               : 'endian))
; (fun __caml_parser_env ->
    Obj.repr(
# 232 "grammar.mly"
          ( exp_false )
# 1666 "grammar.ml"
               : 'endian))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 233 "grammar.mly"
       ( _1 )
# 1673 "grammar.ml"
               : 'endian))
; (fun __caml_parser_env ->
    Obj.repr(
# 236 "grammar.mly"
       ( () )
# 1679 "grammar.ml"
               : 'semi))
; (fun __caml_parser_env ->
    Obj.repr(
# 237 "grammar.mly"
  ( () )
# 1685 "grammar.ml"
               : 'semi))
; (fun __caml_parser_env ->
    Obj.repr(
# 240 "grammar.mly"
         (())
# 1691 "grammar.ml"
               : 'assign))
; (fun __caml_parser_env ->
    Obj.repr(
# 241 "grammar.mly"
        (())
# 1697 "grammar.ml"
               : 'assign))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry expr *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
let expr (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Ast.exp )
;;
