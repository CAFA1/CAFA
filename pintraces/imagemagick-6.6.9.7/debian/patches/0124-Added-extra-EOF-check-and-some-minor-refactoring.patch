Backport of:

From 8af60c73a888e9d4c17d6800568486439669521c Mon Sep 17 00:00:00 2001
From: dirk <dirk@git.imagemagick.org>
Date: Mon, 29 Dec 2014 21:00:14 +0000
Subject: [PATCH] Added extra EOF check and some minor refactoring.

This a partial fix for corrupted file

bug-debian: https://bugs.debian.org/832942
Origin: upstream, https://github.com/ImageMagick/ImageMagick/commit/d7325bac173492b358417a0ad49fabad44447d52
---
 coders/dds.c | 183 +++++++++++++++++++++--------------------------------------
 1 file changed, 66 insertions(+), 117 deletions(-)

Index: imagemagick-6.7.7.10/coders/dds.c
===================================================================
--- imagemagick-6.7.7.10.orig/coders/dds.c	2016-11-14 09:51:17.661117181 -0500
+++ imagemagick-6.7.7.10/coders/dds.c	2016-11-14 09:51:17.661117181 -0500
@@ -111,6 +111,9 @@
 #define DDSCAPS2_CUBEMAP_NEGATIVEZ  0x00008000
 #define DDSCAPS2_VOLUME   0x00200000
 
+#define MagickMax(X,Y) ((X) > (Y) ? (X) : (Y))
+#define MagickMin(X,Y) ((X) < (Y) ? (X) : (Y))
+
 /*
   Structure declarations.
 */
@@ -192,11 +195,11 @@
 static MagickBooleanType
   ReadUncompressedRGBA(Image *image, DDSInfo *dds_info);
 
-static void
-  SkipDXTMipmaps(Image *image, DDSInfo *dds_info, int texel_size);
+static MagickBooleanType
+  SkipDXTMipmaps(Image *image, DDSInfo *dds_info, int texel_size, ExceptionInfo *exception);
 
-static void
-  SkipRGBMipmaps(Image *image, DDSInfo *dds_info, int pixel_size);
+static MagickBooleanType
+  SkipRGBMipmaps(Image *image, DDSInfo *dds_info, int pixel_size, ExceptionInfo *exception);
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@ -225,13 +228,6 @@
 %
 */
 
-static inline size_t Min(size_t one, size_t two)
-{
-  if (one < two)
-    return one;
-  return two;
-}
-
 static Image *ReadDDSImage(const ImageInfo *image_info,ExceptionInfo *exception)
 {
   Image
@@ -527,8 +523,8 @@
     for (x = 0; x < (ssize_t) dds_info->width; x += 4)
     {
       /* Get 4x4 patch of pixels to write on */
-      q = QueueAuthenticPixels(image, x, y, Min(4, dds_info->width - x),
-        Min(4, dds_info->height - y),exception);
+      q = QueueAuthenticPixels(image, x, y, MagickMin(4, dds_info->width - x),
+        MagickMin(4, dds_info->height - y),exception);
       
       if (q == (PixelPacket *) NULL)
         return MagickFalse;
@@ -565,9 +561,7 @@
     }
   }
   
-  SkipDXTMipmaps(image, dds_info, 8);
-  
-  return MagickTrue;
+  return(SkipDXTMipmaps(image,dds_info,8,exception));
 }
 
 static MagickBooleanType ReadDXT3(Image *image, DDSInfo *dds_info)
@@ -608,8 +602,8 @@
     for (x = 0; x < (ssize_t) dds_info->width; x += 4)
     {
       /* Get 4x4 patch of pixels to write on */
-      q = QueueAuthenticPixels(image, x, y, Min(4, dds_info->width - x),
-                         Min(4, dds_info->height - y),exception);
+      q = QueueAuthenticPixels(image, x, y, MagickMin(4, dds_info->width - x),
+                         MagickMin(4, dds_info->height - y),exception);
       
       if (q == (PixelPacket *) NULL)
         return MagickFalse;
@@ -655,9 +649,7 @@
     }
   }
   
-  SkipDXTMipmaps(image, dds_info, 16);
-  
-  return MagickTrue;
+  return(SkipDXTMipmaps(image,dds_info,16,exception));
 }
 
 static MagickBooleanType ReadDXT5(Image *image, DDSInfo *dds_info)
@@ -702,8 +694,8 @@
     for (x = 0; x < (ssize_t) dds_info->width; x += 4)
     {
       /* Get 4x4 patch of pixels to write on */
-      q = QueueAuthenticPixels(image, x, y, Min(4, dds_info->width - x),
-                         Min(4, dds_info->height - y),exception);
+      q = QueueAuthenticPixels(image, x, y, MagickMin(4, dds_info->width - x),
+                         MagickMin(4, dds_info->height - y),exception);
       
       if (q == (PixelPacket *) NULL)
         return MagickFalse;
@@ -759,9 +751,7 @@
     }
   }
   
-  SkipDXTMipmaps(image, dds_info, 16);
-  
-  return MagickTrue;
+  return(SkipDXTMipmaps(image,dds_info,16,exception));
 }
 
 static MagickBooleanType ReadUncompressedRGB(Image *image, DDSInfo *dds_info)
@@ -800,9 +790,7 @@
       return MagickFalse;
   }
   
-  SkipRGBMipmaps(image, dds_info, 3);
-  
-  return MagickTrue;
+  return(SkipRGBMipmaps(image,dds_info,3,exception));
 }
 
 static MagickBooleanType ReadUncompressedRGBA(Image *image, DDSInfo *dds_info)
@@ -841,15 +829,14 @@
       return MagickFalse;
   }
   
-  SkipRGBMipmaps(image, dds_info, 4);
-  
-  return MagickTrue;
+  return(SkipRGBMipmaps(image,dds_info,4,exception));
 }
 
 /*
   Skip the mipmap images for compressed (DXTn) dds files
 */
-static void SkipDXTMipmaps(Image *image, DDSInfo *dds_info, int texel_size)
+static MagickBooleanType SkipDXTMipmaps(Image *image,DDSInfo *dds_info,
+  int texel_size,ExceptionInfo *exception)
 {
   register ssize_t
     i;
@@ -868,6 +855,12 @@
       && (dds_info->ddscaps1 & DDSCAPS_TEXTURE
           || dds_info->ddscaps2 & DDSCAPS2_CUBEMAP))
     {
+      if (EOFBlob(image) != MagickFalse)
+        {
+          ThrowFileException(exception,CorruptImageError,"UnexpectedEndOfFile",
+            image->filename);
+          return(MagickFalse);
+        }
       w = DIV2(dds_info->width);
       h = DIV2(dds_info->height);
       
@@ -883,12 +876,14 @@
         h = DIV2(h);
       }
     }
+  return(MagickTrue);
 }
 
 /*
   Skip the mipmap images for uncompressed (RGB or RGBA) dds files
 */
-static void SkipRGBMipmaps(Image *image, DDSInfo *dds_info, int pixel_size)
+static MagickBooleanType SkipRGBMipmaps(Image *image,DDSInfo *dds_info,
+  int pixel_size,ExceptionInfo *exception)
 {
   MagickOffsetType
     offset;
@@ -907,6 +902,12 @@
       && (dds_info->ddscaps1 & DDSCAPS_TEXTURE
           || dds_info->ddscaps2 & DDSCAPS2_CUBEMAP))
     {
+      if (EOFBlob(image) != MagickFalse)
+        {
+          ThrowFileException(exception,CorruptImageError,"UnexpectedEndOfFile",
+            image->filename);
+          return(MagickFalse);
+        }
       w = DIV2(dds_info->width);
       h = DIV2(dds_info->height);
       
@@ -922,6 +923,7 @@
         h = DIV2(h);
       }
     }
+  return(MagickTrue);
 }
 
 /*
