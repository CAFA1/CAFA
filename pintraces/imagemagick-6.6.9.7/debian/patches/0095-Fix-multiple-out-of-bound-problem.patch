Backport of:

From 9f9fcdcbf56b88e246177208e2d3ee984f268e89 Mon Sep 17 00:00:00 2001
From: Cristy <urban-warrior@imagemagick.org>
Date: Wed, 13 Jan 2016 18:30:30 -0500
Subject: [PATCH] Fix multiple out of bound problem

Fix an out of bound access in rle file.

Fix an out of bound access in pict file.

Fix an out of bound access in viff file.

This is a partial fix for sun file.

Bug: https://github.com/ImageMagick/ImageMagick/issues/82
Bug-ubuntu: https://bugs.launchpad.net/ubuntu/+source/imagemagick/+bug/1533445
Bug: https://github.com/ImageMagick/ImageMagick/issues/81
Bug-ubuntu: https://bugs.launchpad.net/ubuntu/+source/imagemagick/+bug/1533447
Bug: https://github.com/ImageMagick/ImageMagick/issues/80
Bug-ubuntu: https://bugs.launchpad.net/ubuntu/+source/imagemagick/+bug/1533449
Bug: https://github.com/ImageMagick/ImageMagick/issues/77
Bug-ubuntu: https://bugs.launchpad.net/ubuntu/+source/imagemagick/+bug/1533452
Bug-debian: https://bugs.debian.org/832467
Origin: upstream, https://github.com/ImageMagick/ImageMagick/commit/2174484dfa68a594e2f9ad17f46217b6120db18d
---
 coders/pict.c   |   6 ++--
 coders/rle.c    |   7 ++--
 coders/sun.c    |   4 ++-
 coders/viff.c   |   3 ++
 magick/memory.c | 108 +++++++++++++++++++++++++++++++-------------------------
 5 files changed, 72 insertions(+), 56 deletions(-)

Index: imagemagick-6.6.9.7/coders/pict.c
===================================================================
--- imagemagick-6.6.9.7.orig/coders/pict.c	2016-11-15 15:13:59.223711424 -0500
+++ imagemagick-6.6.9.7/coders/pict.c	2016-11-15 15:15:05.652522540 -0500
@@ -1944,8 +1944,7 @@
                 (GetAlphaPixelComponent(p)));
             p++;
           }
-          count+=EncodeImage(image,scanline,bytes_per_line & 0x7FFF,
-            packed_scanline);
+          count+=EncodeImage(image,scanline,bytes_per_line,packed_scanline);
           if (image->previous == (Image *) NULL)
             {
               status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,
Index: imagemagick-6.6.9.7/coders/rle.c
===================================================================
--- imagemagick-6.6.9.7.orig/coders/rle.c	2016-11-15 15:13:59.223711424 -0500
+++ imagemagick-6.6.9.7/coders/rle.c	2016-11-15 15:13:59.219711375 -0500
@@ -315,11 +315,13 @@
     if ((number_pixels*number_planes_filled) != (size_t) (number_pixels*
          number_planes_filled))
       ThrowReaderException(ResourceLimitError,"MemoryAllocationFailed");
-    pixel_info_length=image->columns*image->rows*number_planes_filled;
-    rle_pixels=AcquireQuantumMemory(pixel_info_length,sizeof(*rle_pixels));
-
+    if (image->rows < (image->rows*number_planes_filled*sizeof(*rle_pixels)))
+      ThrowReaderException(CorruptImageError,"ImproperImageHeader");
+    rle_pixels=AcquireQuantumMemory(image->columns,image->rows*
+      number_planes_filled*sizeof(*rle_pixels));
     if (rle_pixels == (unsigned char *) NULL)
       ThrowReaderException(ResourceLimitError,"MemoryAllocationFailed");
+    pixel_info_length=image->columns*image->rows*number_planes_filled;
     if ((flags & 0x01) && !(flags & 0x02))
       {
         ssize_t
Index: imagemagick-6.6.9.7/coders/sun.c
===================================================================
--- imagemagick-6.6.9.7.orig/coders/sun.c	2016-11-15 15:13:59.223711424 -0500
+++ imagemagick-6.6.9.7/coders/sun.c	2016-11-15 15:13:59.219711375 -0500
@@ -424,9 +424,11 @@
       ThrowReaderException(ResourceLimitError,"ImproperImageHeader");
     bytes_per_line>>=4;
     sun_pixels=(unsigned char *) AcquireQuantumMemory(height,
-      bytes_per_line*sizeof(*sun_pixels));
+      MagickMax(image->columns,bytes_per_line)*sizeof(*sun_pixels));
     if (sun_pixels == (unsigned char *) NULL)
       ThrowReaderException(ResourceLimitError,"MemoryAllocationFailed");
+    ResetMagickMemory(sun_pixels,0,height*MagickMax(image->columns,
+      bytes_per_line)*sizeof(*sun_pixels));
     if (sun_info.type == RT_ENCODED)
       (void) DecodeImage(sun_data,sun_info.length,sun_pixels,bytes_per_line*
         height);
Index: imagemagick-6.6.9.7/coders/viff.c
===================================================================
--- imagemagick-6.6.9.7.orig/coders/viff.c	2016-11-15 15:13:59.223711424 -0500
+++ imagemagick-6.6.9.7/coders/viff.c	2016-11-15 15:13:59.219711375 -0500
@@ -398,6 +398,9 @@
         image->colors=viff_info.map_columns;
         if (AcquireImageColormap(image,image->colors) == MagickFalse)
           ThrowReaderException(ResourceLimitError,"MemoryAllocationFailed");
+        if (viff_info.map_rows <
+            (viff_info.map_rows*bytes_per_pixel*sizeof(*viff_colormap)))
+          ThrowReaderException(CorruptImageError,"ImproperImageHeader");
         viff_colormap=(unsigned char *) AcquireQuantumMemory(image->colors,
           viff_info.map_rows*bytes_per_pixel*sizeof(*viff_colormap));
         if (viff_colormap == (unsigned char *) NULL)
Index: imagemagick-6.6.9.7/magick/memory.c
===================================================================
--- imagemagick-6.6.9.7.orig/magick/memory.c	2016-11-15 15:13:59.223711424 -0500
+++ imagemagick-6.6.9.7/magick/memory.c	2016-11-15 15:15:52.017088666 -0500
@@ -194,7 +194,9 @@
   return(y);
 }
 
-MagickExport void *AcquireAlignedMemory(const size_t count,const size_t quantum)
+
+static MagickBooleanType CheckMemoryOverflow(const size_t count,
+  const size_t quantum)
 {
   size_t
     size;
@@ -203,8 +205,19 @@
   if ((count == 0) || (quantum != (size/count)))
     {
       errno=ENOMEM;
-      return((void *) NULL);
+      return(MagickTrue);
     }
+  return(MagickFalse);
+}
+
+MagickExport void *AcquireAlignedMemory(const size_t count,const size_t quantum)
+{
+  size_t
+    size;
+
+  if (CheckMemoryOverflow(count,quantum) != MagickFalse)
+    return((void *) NULL);
+  size=count*quantum;
 #if defined(MAGICKCORE_HAVE_POSIX_MEMALIGN)
   {
     void
@@ -463,15 +476,12 @@
 MagickExport void *AcquireQuantumMemory(const size_t count,const size_t quantum)
 {
   size_t
-    size;
+    extent;
 
-  size=count*quantum;
-  if ((count == 0) || (quantum != (size/count)))
-    {
-      errno=ENOMEM;
-      return((void *) NULL);
-    }
-  return(AcquireMagickMemory(size));
+  if (CheckMemoryOverflow(count,quantum) != MagickFalse)
+    return((void *) NULL);
+  extent=count*quantum;
+  return(AcquireMagickMemory(extent));
 }
 
 /*
@@ -935,16 +945,15 @@
   const size_t quantum)
 {
   size_t
-    size;
+    extent;
 
-  size=count*quantum;
-  if ((count == 0) || (quantum != (size/count)))
+  if (CheckMemoryOverflow(count,quantum) != MagickFalse)
     {
       memory=RelinquishMagickMemory(memory);
-      errno=ENOMEM;
       return((void *) NULL);
     }
-  return(ResizeMagickMemory(memory,size));
+  extent=count*quantum;
+  return(ResizeMagickMemory(memory,extent));
 }
 
 /*
