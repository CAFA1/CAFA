Backport of:

From be5567e57388a94be074b153b75317072b87d456 Mon Sep 17 00:00:00 2001
From: Cristy <urban-warrior@imagemagick.org>
Date: Fri, 13 May 2016 07:56:18 -0400
Subject: [PATCH] Rewrite property with new wrapper

This fix https://github.com/ImageMagick/ImageMagick/issues/198

And it is also needed to apply cleanly CVE-2016-5841 that use signed/unsigned logic.

Origin:upstream, 08fe978d2de086b90b67631b4d1097becc98f1d5
---
 magick/property.c | 136 ++++++++++++++++++++++++++++++++++++++----------------
 1 file changed, 97 insertions(+), 39 deletions(-)

Index: imagemagick-6.6.9.7/magick/property.c
===================================================================
--- imagemagick-6.6.9.7.orig/magick/property.c	2016-11-15 15:45:24.046725690 -0500
+++ imagemagick-6.6.9.7/magick/property.c	2016-11-15 15:48:19.464867599 -0500
@@ -684,41 +684,97 @@
   return(status);
 }
 
-static inline unsigned short ReadPropertyShort(const EndianType endian,
+
+static inline signed int ReadPropertySignedLong(const EndianType endian,
+  const unsigned char *buffer)
+{
+  union
+  {
+    unsigned int
+      unsigned_value;
+
+    signed int
+      signed_value;
+  } quantum;
+
+  unsigned int
+    value;
+
+  if (endian == LSBEndian)
+    {
+      value=(unsigned int) ((buffer[3] << 24) | (buffer[2] << 16) |
+        (buffer[1] << 8 ) | (buffer[0]));
+      quantum.unsigned_value=(value & 0xffffffff);
+      return(quantum.signed_value);
+    }
+  value=(unsigned int) ((buffer[0] << 24) | (buffer[1] << 16) |
+    (buffer[2] << 8) | buffer[3]);
+  quantum.unsigned_value=(value & 0xffffffff);
+  return(quantum.signed_value);
+}
+
+static inline unsigned int ReadPropertyUnsignedLong(const EndianType endian,
+  const unsigned char *buffer)
+{
+  unsigned int
+    value;
+
+  if (endian == LSBEndian)
+    {
+      value=(unsigned int) ((buffer[3] << 24) | (buffer[2] << 16) |
+        (buffer[1] << 8 ) | (buffer[0]));
+      return((unsigned int) (value & 0xffffffff));
+    }
+  value=(unsigned int) ((buffer[0] << 24) | (buffer[1] << 16) |
+    (buffer[2] << 8) | buffer[3]);
+  return((unsigned int) (value & 0xffffffff));
+}   
+
+static inline signed short ReadPropertySignedShort(const EndianType endian,
   const unsigned char *buffer)
 {
+  union
+  {
+    unsigned short
+      unsigned_value;
+
+    signed short
+      signed_value;
+  } quantum;
+
   unsigned short
     value;
 
-  if (endian == MSBEndian)
+  if (endian == LSBEndian)
     {
-      value=(unsigned short) ((((unsigned char *) buffer)[0] << 8) |
-        ((unsigned char *) buffer)[1]);
-      return((unsigned short) (value & 0xffff));
+      value=(unsigned short) ((buffer[1] << 8) | buffer[0]);
+      quantum.unsigned_value=(value & 0xffff);
+      return(quantum.signed_value);
     }
-  value=(unsigned short) ((buffer[1] << 8) | buffer[0]);
-  return((unsigned short) (value & 0xffff));
+  value=(unsigned short) ((((unsigned char *) buffer)[0] << 8) |
+    ((unsigned char *) buffer)[1]);
+  quantum.unsigned_value=(value & 0xffff);
+  return(quantum.signed_value);
 }
 
-static inline size_t ReadPropertyLong(const EndianType endian,
+static inline unsigned short ReadPropertyUnsignedShort(const EndianType endian,
   const unsigned char *buffer)
 {
-  size_t
+  unsigned short
     value;
 
-  if (endian == MSBEndian)
+  if (endian == LSBEndian)
     {
-      value=(size_t) ((buffer[0] << 24) | (buffer[1] << 16) |
-        (buffer[2] << 8) | buffer[3]);
-      return((size_t) (value & 0xffffffff));
+      value=(unsigned short) ((buffer[1] << 8) | buffer[0]);
+      return((unsigned short) (value & 0xffff));
     }
-  value=(size_t) ((buffer[3] << 24) | (buffer[2] << 16) |
-    (buffer[1] << 8 ) | (buffer[0]));
-  return((size_t) (value & 0xffffffff));
+  value=(unsigned short) ((((unsigned char *) buffer)[0] << 8) |
+    ((unsigned char *) buffer)[1]);
+  return((unsigned short) (value & 0xffff));
 }
 
 static MagickBooleanType GetEXIFProperty(const Image *image,
-  const char *property)
+  const char *property,ExceptionInfo *exception)
 {
 #define MaxDirectoryStack  16
 #define EXIF_DELIMITER  "\n"
@@ -781,7 +837,7 @@
    for (component=0; component < components; component++) \
    { \
      length+=FormatMagickString(buffer+length,MaxTextExtent-length, \
-       format", ",arg1, arg2); \
+       format", ",(arg1),(arg2)); \
      if (length >= MaxTextExtent - 1) \
        length=MaxTextExtent-1; \
      p1+=size; \
@@ -1085,7 +1141,7 @@
       { 0x1001c, "exif:GPSAreaInformation" },
       { 0x1001d, "exif:GPSDateStamp" },
       { 0x1001e, "exif:GPSDifferential" },
-      {  0x0000, NULL}
+      { 0x00000, (const char *) NULL }
     };
 
   const StringInfo
@@ -1111,7 +1167,8 @@
     entry,
     length,
     number_entries,
-    tag;
+    tag,
+    tag_value;
 
   SplayTreeInfo
     *exif_resources;
@@ -1121,8 +1178,7 @@
     id,
     level,
     offset,
-    tag_offset,
-    tag_value;
+    tag_offset;
 
   static int
     tag_bytes[] = {0, 1, 1, 2, 4, 8, 1, 1, 2, 4, 8, 4, 8};
@@ -1237,7 +1293,7 @@
   }
   if (length < 16)
     return(MagickFalse);
-  id=(ssize_t) ((int) ReadPropertyShort(LSBEndian,exif));
+  id=(ssize_t) ReadPropertySignedShort(LSBEndian,exif);
   endian=LSBEndian;
   if (id == 0x4949)
     endian=LSBEndian;
@@ -1246,12 +1302,12 @@
       endian=MSBEndian;
     else
       return(MagickFalse);
-  if (ReadPropertyShort(endian,exif+2) != 0x002a)
+  if (ReadPropertyUnsignedShort(endian,exif+2) != 0x002a)
     return(MagickFalse);
   /*
     This the offset to the first IFD.
   */
-  offset=(ssize_t) ((int) ReadPropertyLong(endian,exif+4));
+  offset=(ssize_t) ReadPropertySignedLong(endian,exif+4);
   if ((offset < 0) || (size_t) offset >= length)
     return(MagickFalse);
   /*
@@ -1279,7 +1335,7 @@
     /*
       Determine how many entries there are in the current IFD.
     */
-    number_entries=(size_t) ((int) ReadPropertyShort(endian,directory));
+    number_entries=(size_t) ReadPropertyUnsignedShort(endian,directory);
     for ( ; entry < number_entries; entry++)
     {
       register unsigned char
@@ -1297,11 +1353,11 @@
       if (GetValueFromSplayTree(exif_resources,q) == q)
         break;
       (void) AddValueToSplayTree(exif_resources,q,q);
-      tag_value=(ssize_t) ((int) ReadPropertyShort(endian,q)+tag_offset);
-      format=(size_t) ((int) ReadPropertyShort(endian,q+2));
+      tag_value=(size_t) ReadPropertyUnsignedShort(endian,q)+tag_offset;
+      format=(size_t) ReadPropertyUnsignedShort(endian,q+2);
       if (format >= (sizeof(tag_bytes)/sizeof(*tag_bytes)))
         break;
-      components=(ssize_t) ((int) ReadPropertyLong(endian,q+4));
+      components=(ssize_t) ReadPropertySignedLong(endian,q+4);
       number_bytes=(size_t) components*tag_bytes[format];
       if (number_bytes < components)
         break;  /* prevent overflow */
@@ -1315,7 +1371,7 @@
           /*
             The directory entry contains an offset.
           */
-          offset=(ssize_t) ((int) ReadPropertyLong(endian,q+8));
+          offset=(ssize_t) ReadPropertySignedLong(endian,q+8);
           if ((offset < 0) || (size_t) offset >= length)
             continue;
           if ((offset+number_bytes) < offset)
@@ -1348,38 +1404,38 @@
             }
             case EXIF_FMT_SSHORT:
             {
-              EXIFMultipleValues(2,"%hd",ReadPropertyShort(endian,p1));
+              EXIFMultipleValues(2,"%hd",ReadPropertySignedShort(endian,p1));
               break;
             }
             case EXIF_FMT_USHORT:
             {
-              EXIFMultipleValues(2,"%hu",ReadPropertyShort(endian,p1));
+              EXIFMultipleValues(2,"%hu",ReadPropertyUnsignedShort(endian,p1));
               break;
             }
             case EXIF_FMT_ULONG:
             {
               EXIFMultipleValues(4,"%.20g",(double)
-                ((int) ReadPropertyLong(endian,p1)));
+                ReadPropertyUnsignedLong(endian,p1));
               break;
             }
             case EXIF_FMT_SLONG:
             {
               EXIFMultipleValues(4,"%.20g",(double)
-                ReadPropertyLong(endian,p1));
+                ReadPropertySignedLong(endian,p1));
               break;
             }
             case EXIF_FMT_URATIONAL:
             {
               EXIFMultipleFractions(8,"%.20g/%.20g",(double)
-                ((int) ReadPropertyLong(endian,p1)),(double)
-                ((int) ReadPropertyLong(endian,p1+4)));
+                ReadPropertyUnsignedLong(endian,p1),(double)
+                ReadPropertyUnsignedLong(endian,p1+4));
               break;
             }
             case EXIF_FMT_SRATIONAL:
             {
               EXIFMultipleFractions(8,"%.20g/%.20g",(double)
-                ReadPropertyLong(endian,p1),(double)
-                ReadPropertyLong(endian,p1+4));
+                ReadPropertySignedLong(endian,p1),(double)
+                ReadPropertySignedLong(endian,p1+4));
               break;
             }
             case EXIF_FMT_SINGLE:
@@ -1478,8 +1534,7 @@
           {
             ssize_t
               offset;
-
-            offset=(ssize_t) ((int) ReadPropertyLong(endian,p));
+            offset=(ssize_t) ReadPropertySignedLong(endian,p);
             if (((size_t) offset < length) && (level < (MaxDirectoryStack-2)))
               {
                 ssize_t
@@ -1498,8 +1553,8 @@
                 level++;
                 if ((directory+2+(12*number_entries)) > (exif+length))
                   break;
-                offset=(ssize_t) ((int) ReadPropertyLong(endian,directory+2+(12*
-                  number_entries)));
+                offset=(ssize_t) ReadPropertySignedLong(endian,directory+2+(12*
+                  number_entries));
                 if ((offset != 0) && ((size_t) offset < length) &&
                     (level < (MaxDirectoryStack-2)))
                   {
@@ -2041,7 +2096,7 @@
     {
       if (LocaleNCompare("exif:",property,5) == 0)
         {
-          if ((GetEXIFProperty(image,property) != MagickFalse) &&
+          if ((GetEXIFProperty(image,property,exception) != MagickFalse) &&
               (image->properties != (void *) NULL))
             {
               p=(const char *) GetValueFromSplayTree((SplayTreeInfo *)
